/*!
*@FileName: RenRenForm_MessageGets.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2010-12-27
*@Brief: 站内信列表Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_MessageGets.h"

#define HEADMASK_X		(3)
#define HEADMASK_Y		(3)

#define NAME_X			(HEADMASKBUTTON_W + 10)
#define NAME_Y			(5)
#define NAME_H			(FONT_MIDDLE + LINE_SPACE)

#define TIME_X			(SCR_W/2)
#define TIME_Y			(5)

#define TITLE_X			(NAME_X)
#define TITLE_Y			(NAME_Y + NAME_H)
#define TITLE_H			(FONT_NORMAL + LINE_SPACE)
#define TITLE_W			(SCR_W - TITLE_X - 10)
//Content的高度是动态的
#define CONTENT_X		(NAME_X)
#define CONTENT_Y		(TITLE_Y + TITLE_H)
#define CONTENT_W		(SCR_W - CONTENT_X - 10)

#define COOLBARLIST_HEIGHT		(HEADMASKBUTTON_H + HEADMASK_Y*2)


// 构造函数
TMessageGetsForm::TMessageGetsForm(TApplication* pApp):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	memset(gItemData, 0, sizeof(gItemData));
	//信箱类型
	char* 	szbox = NULL;
	szbox = Get_Url_Params(RR_MessageGets, "box");
	if(strcmp(szbox, RENREN_PARAM_INBOX) == 0 )
		nMessageBoxType = MESSAGE_TYPE_INBOX;
	else
		nMessageBoxType = MESSAGE_TYPE_OUTBOX;
	
	Create(APP_RE_ID_CommonListForm);
}

// 析构函数
TMessageGetsForm::~TMessageGetsForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0; i<MESSAGELIST_MAXITEM; i++)
	{
		if( gItemData[i].pBmp != NULL)
		{
			gItemData[i].pBmp->Destroy();
			gItemData[i].pBmp = NULL;									
		}
	}
}

// 窗口事件处理
Boolean TMessageGetsForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
			
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
			{
				NotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));				
				bHandled = TRUE;
				switch(notifyData.nAccessType)
				{
					case RR_PhotoDownload:
					{
						if( gItemData[notifyData.nParam].pBmp != NULL)
						{
							gItemData[notifyData.nParam].pBmp->Destroy();
							gItemData[notifyData.nParam].pBmp = NULL;									
						}
						TBitmap* pDownLoadBitmap = NULL;			
						pDownLoadBitmap= LoadImgByPath(notifyData.pszFilePath);
						if(pDownLoadBitmap != NULL)
						{
							TMaskButton* pMyHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(gItemData[notifyData.nParam].HeadMaskButtonID));
							if(pMyHeadMBtn != NULL)
							{
								gItemData[notifyData.nParam].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
								gItemData[notifyData.nParam].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);							
								pMyHeadMBtn->SetImage(gItemData[notifyData.nParam].pBmp, (HEADMASKBUTTON_W - gItemData[notifyData.nParam].pBmp->GetWidth())/2, (HEADMASKBUTTON_H - gItemData[notifyData.nParam].pBmp->GetHeight())/2 );
								pMyHeadMBtn->Draw();
							}

							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 								
						}
						break;
					}

					default:
						break;
				}
			}
			break;

		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TMessageGetsForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	tResponseMessageGets* Response = NULL;

	if(nMessageBoxType == MESSAGE_TYPE_INBOX )
	{
		SetAppTilte(this, APP_RE_ID_STRING_MessagesInBox);
		//m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_OutBox,TITLE_BUTTON_LEFT);
		m_TitleBtnLeft = SetAppBitmapButton(this, APP_RE_ID_BITMAP_write_but, APP_RE_ID_BITMAP_write_but_over);
	}
	else
	{
		SetAppTilte(this, APP_RE_ID_STRING_MessagesOutBox);
		//m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_InBox,TITLE_BUTTON_LEFT);
		m_TitleBtnLeft = SetAppBitmapButton(this, APP_RE_ID_BITMAP_write_but, APP_RE_ID_BITMAP_write_but_over);
	}
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);

	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_MessageGets, (void **)&Response);	

	//:TODO:
	//Panel -> CoolBarList->pRowList->pBarRow->pListItem
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));
	if(pCoolBarList)
	{
		TBarRowList* pRowList = NULL;
		TBarRow* pBarRow = NULL;
		TBarListItem* pListItem = NULL;
		//背景设置为白色底色
		pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
		pRowList = pCoolBarList->Rows();
		if (pRowList)
		{
			pRowList->BeginUpdate();
			pRowList->Clear();
			pBarRow = pRowList->AppendRow();
			if(pBarRow)
			{

				//数量统计
				{
					TBarListItem* lpItem = NULL;
					TUChar pszTitle[64] = {0};
					lpItem = pBarRow->AppendItem();
					if (lpItem)
					{
						Int32 StringWidth = 0;
						TUString::StrPrintF(pszTitle, TResource::LoadConstString(APP_RE_ID_STRING_MessageCount), Response->count);
						StringWidth = GetShowAllStringWidth(pszTitle, FONT_MIDDLE) + 8;	//多预留一些
						CtrlAddItemToCoolBarList_Lable(this, lpItem, (COOLBARLIST_WIDTH-StringWidth)/2, NAME_Y, 0, FONT_MIDDLE, pszTitle);
						lpItem->SetHeight(NAME_Y*2+FONT_MIDDLE);
						lpItem->SetEnabled(FALSE);
					}
				}
				
				//以下为增加列表项自定义项
				for (int i = 0; i < Response->nSize_messages; i++)
				{
					TUChar pszString[4096] = {0};
					pListItem = pBarRow->AppendItem();

					if (pListItem)
					{
						//属性设置
						pListItem->SetHeight(COOLBARLIST_HEIGHT);
						pListItem->SetTitle(NULL);
						pListItem->SetCaption(NULL);       
						pListItem->SetIndicatorType(itNone);

						//头像,先读取磁盘cache, 无文件再下载
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByUrl(Response->messages[i].head_url);
						if(  pDownLoadBitmap != NULL)
						{
							gItemData[i].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
							gItemData[i].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
							gItemData[i].HeadMaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem, HEADMASK_X, HEADMASK_Y, HEADMASKBUTTON_W, HEADMASKBUTTON_H, gItemData[i].pBmp, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));					

							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 						
						}
						else
						{
							gItemData[i].HeadMaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem, HEADMASK_X, HEADMASK_Y, HEADMASKBUTTON_W, HEADMASKBUTTON_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default), (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));
							RenRenAPICommon_DownloadPhoto(Response->messages[i].head_url, this->GetWindowHwndId(), i );
						}
						//姓名
						TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->messages[i].name);
						CtrlAddItemToCoolBarList_Lable(this, pListItem, NAME_X, NAME_Y, 0, FONT_MIDDLE, pszString);
						//时间
						TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->messages[i].time);
						CtrlAddItemToCoolBarList_Lable(this, pListItem, TIME_X, TIME_Y, 0, FONT_SMALL, pszString, RGB_COLOR_LIGHTBLUE);
						//标题,新消息显示为红色
						//一个小技巧,一个消息显示为两种(已读和未读), 然后根据情况隐藏一个
						TUChar pszStringTemp[4096] = {0};
						TUString::StrUtf8ToStrUnicode(pszStringTemp , (const Char *)Response->messages[i].title);
						gItemData[i].TitleIDRead = CtrlAddItemToCoolBarList_Lable(this, pListItem, TITLE_X, TITLE_Y, TITLE_W, FONT_NORMAL, pszStringTemp);
						
						TUString::StrCopy(pszString, TResource::LoadConstString(APP_RE_ID_STRING_NewMessageFlag));
						TUString::StrCat(pszString, pszStringTemp);
						gItemData[i].TitleIDUnread = CtrlAddItemToCoolBarList_Lable(this, pListItem, TITLE_X, TITLE_Y, TITLE_W, FONT_NORMAL, pszString, RGB_COLOR_RED);
						
						if(Response->messages[i].is_read == 0)
						{
							this->HideControl(gItemData[i].TitleIDRead);
						}
						else
						{
							this->HideControl(gItemData[i].TitleIDUnread);
						}
						
						//内容
						TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->messages[i].content);
						CtrlAddItemToCoolBarList_Lable(this, pListItem, CONTENT_X, CONTENT_Y, CONTENT_W, FONT_MIDDLE, pszString, RGB_COLOR_GRAY);

						pListItem->SetTagValue(i);
						gItemData[i].id = Response->messages[i].id;
					}
				}
			}
			
			pRowList->EndUpdate();
		}

	}

	if( Response )
	{
		delete Response;	
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TMessageGetsForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TMessageGetsForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;

	if(m_TitleBtnRight == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		RenRenAPICommon_Download(RR_FriendsGetFriends, this->GetWindowHwndId(), 0, FRIENDLSIT_MODE_MESSAGE);			
	}
#if 0	
	else if(m_TitleBtnLeft == nCtrlID)
	{
		if(nMessageBoxType == MESSAGE_TYPE_INBOX )
			Set_Url_Params(RR_MessageGets, "box", RENREN_PARAM_OUTBOX);
		else
			Set_Url_Params(RR_MessageGets, "box", RENREN_PARAM_INBOX);
		RenRenAPICommon_Download(RR_MessageGets, this->GetWindowHwndId(), 0, 0); 	
		bHandled = TRUE; 		
		return bHandled;
	}
#endif
	switch(nCtrlID)
	{
		case APP_RE_ID_CommonListForm_CommonCoolBarList:
		{
			TBarListItem *lpItem;
			Int32        nIndex;
			char 	szuids[64] = "";
			lpItem = (TBarListItem *)(pEvent->lParam3);
			//nIndex = lpItem->GetIndex();
			nIndex = lpItem->GetTagValue();

			sprintf(szuids, "%d", gItemData[nIndex].id);
			Set_Url_Params(RR_MessageGet, "id", szuids);
			if(nMessageBoxType == MESSAGE_TYPE_INBOX )
				Set_Url_Params(RR_MessageGet, "box", RENREN_PARAM_INBOX);
			else
				Set_Url_Params(RR_MessageGet, "box", RENREN_PARAM_OUTBOX);
			//TODO: 将短信标识为已读
			RenRenAPICommon_Download(RR_MessageGet, this->GetWindowHwndId(), 0 , 0);	

			//隐藏未读的标题,显示已读的标题
			this->HideControl(gItemData[nIndex].TitleIDUnread);
			this->ShowControl(gItemData[nIndex].TitleIDRead);
		}
			break;
		default:
			break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TMessageGetsForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;	
}

//控件丢失焦点
Boolean TMessageGetsForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TMessageGetsForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}
