/*!
*@FileName: RenRenForm_InitialLogin.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2010-12-13
*@Brief: 登录Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_InitialLogin.h"
#include "md5.h"

// 构造函数
TInitialLoginForm::TInitialLoginForm(TApplication* pApp):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	RenRenAPI_GetConfig();
	Create(APP_RE_ID_InitialLoginForm);
}

// 析构函数
TInitialLoginForm::~TInitialLoginForm(void)
{
//	RenRenAPI_SetConfig();
}

// 窗口事件处理
Boolean TInitialLoginForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
		//窗口创建
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}
		//窗口关闭
	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			//最后一个窗口需要SendStopEvent();
			pApp->SendStopEvent();
			break;
		}
		//点击控件
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
		//控件获取焦点
	case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
		}
		break;
		//控件丢失焦点
	case EVENT_CtrlKillFocus :
		{
			bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
		}
		break;
		//输入框内容变化
	case EVENT_FieldChanged:
		{
			_OnFldChangedEvent(pApp, pEvent);
			bHandled = TRUE;
			break;		
		}
		//窗口的背景
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
			// 擦除
			dc.EraseRectangle(&rc, 0);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg_with_logo), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

		// 右软键事件 
	case EVENT_KeyCommand: 
		{ 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟标题栏右按钮选中消息 
				HitControl(m_TitleBtnRight); 
				bHandled = TRUE; 
			} 
		} 
		break;	
		//下载完成事件
	case MSG_DL_THREAD_NOTIFY:
		{
			bHandled = TRUE;
		}
		break;
	case MSG_FORM_UPDATE:
		{
			//如果不保存密码,则清空密码输入
			if(RenRenUserInfoNeedSave.bSavePwd == FALSE)
			{
				reinterpret_cast<TEdit*>(this->GetControlPtr(APP_RE_ID_InitialLoginForm_FieldPassword))->Clear ();
			}			
		}
		break;
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TInitialLoginForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//Open input method on winInitEvent
	ImeOpenIme( IME_MODE_VOLITANT,  IME_CLASS_ENGLISH);//IME_CLASS_CHINESE

	//标题栏左按钮
	m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_Login,TITLE_BUTTON_LEFT);
	//标题栏右按钮
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Exit,TITLE_BUTTON_RIGHT);
	//标题
	//SetAppTilte(this, APP_RE_ID_STRING_RenRen);

	TUChar pszString[128];
	//账号
	TUString::StrGBToUnicode(pszString,(Char*)RenRenUserInfoNeedSave.user);
	TEdit*	pEditAccount = static_cast<TEdit*>(GetControlPtr(APP_RE_ID_InitialLoginForm_FieldAccount));
	pEditAccount->SetMaxChars(127);
	pEditAccount->Insert (pszString, TUString::StrLen(pszString) );	
	//密码
	TEdit*	pEditPassword = static_cast<TEdit*>(GetControlPtr(APP_RE_ID_InitialLoginForm_FieldPassword));
	pEditPassword->SetMaxChars(63);
	if(RenRenUserInfoNeedSave.bSavePwd == TRUE)
	{
		TUString::StrGBToUnicode(pszString,(Char*)RenRenUserInfoNeedSave.password);
		pEditPassword->Insert (pszString, TUString::StrLen(pszString) );	
	}
	// 2. 如果有记录密码,第一次按显示密码,会清空
	if(strlen((char*)RenRenUserInfoNeedSave.password) )
		bCleanPwdWhenFirstShowPwd = TRUE;
	else
		bCleanPwdWhenFirstShowPwd = FALSE;
	
	reinterpret_cast<TCheckBox*>(this->GetControlPtr(APP_RE_ID_InitialLoginForm_SavePwd))->SetValue(RenRenUserInfoNeedSave.bSavePwd);	
	reinterpret_cast<TCheckBox*>(this->GetControlPtr(APP_RE_ID_InitialLoginForm_AutoLogin))->SetValue(RenRenUserInfoNeedSave.bAutoLogin);	

	//处理自动登录
	if(RenRenUserInfoNeedSave.bAutoLogin && RenRenUserInfoNeedSave.bSavePwd)
	{
		//设置参数
		char* pMd5Password = NULL;
		Set_Url_Params(RR_InitialLogin, "user", (char*)RenRenUserInfoNeedSave.user);
		pMd5Password = MD5Create((char*)RenRenUserInfoNeedSave.password);
		Set_Url_Params(RR_InitialLogin, "password", pMd5Password);
		free(pMd5Password);
		
		RenRenAPICommon_Download(RR_InitialLogin, this->GetWindowHwndId(), 0, 0);	
	}

	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TInitialLoginForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TInitialLoginForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);

	//标题栏右按钮
	if(m_TitleBtnRight == nCtrlID)
	{
		//pApp->CloseAllWindows();
		App_PostMessageEx(&gtidMain, MSG_EXIT, NULL, 0, 0, 0);	
		bHandled = TRUE; 
		return bHandled;
	}
	//标题栏左按钮
	else if(m_TitleBtnLeft == nCtrlID)
	{
		//获取输入框的字符串
		const TUChar *TUCharUser = this->GetControlPtr(APP_RE_ID_InitialLoginForm_FieldAccount)->GetCaption();
		const TUChar *TUCharPassword = this->GetControlPtr(APP_RE_ID_InitialLoginForm_FieldPassword)->GetCaption();
		Boolean bSavePwd = this->GetControlPtr(APP_RE_ID_InitialLoginForm_SavePwd)->GetValue();
		Boolean bAutoLogin = this->GetControlPtr(APP_RE_ID_InitialLoginForm_AutoLogin )->GetValue();
		Char User[128];
		Char password[64];

		if( (TUString::StrLen(TUCharUser) == 0) || (TUString::StrLen(TUCharPassword) == 0) )
			{
			pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_LoginInputWarningNULL), TResource::LoadConstString(APP_RE_ID_STRING_PleaseInputAgain), WMB_OK);
			bHandled = TRUE; 		
			return bHandled;
			}
		
		TUString::StrUnicodeToStrUtf8(User, TUCharUser);
		TUString::StrUnicodeToStrUtf8(password, TUCharPassword);

		//保存设置
		STRCPY_Ex(RenRenUserInfoNeedSave.user, (char*)User);
		STRCPY_Ex(RenRenUserInfoNeedSave.password, (char*)password);
		RenRenUserInfoNeedSave.bAutoLogin = bAutoLogin;
		RenRenUserInfoNeedSave.bSavePwd = bSavePwd;
		
		//设置参数
		Set_Url_Params(RR_InitialLogin, "user", (char*)RenRenUserInfoNeedSave.user);
		
		char* pMd5Password = NULL;
		pMd5Password = MD5Create((char*)RenRenUserInfoNeedSave.password);
		Set_Url_Params(RR_InitialLogin, "password", pMd5Password);
		free(pMd5Password);

		//下载
		RenRenAPICommon_Download(RR_InitialLogin, this->GetWindowHwndId(), 0, 0);

		
		bHandled = TRUE; 		
		return bHandled;
	}

	switch(nCtrlID)
	{
	case APP_RE_ID_InitialLoginForm_SavePwd:
	{
		Boolean bSavePwd = this->GetControlPtr(APP_RE_ID_InitialLoginForm_SavePwd )->GetValue();
		if(bSavePwd == FALSE)
		{
			this->GetControlPtr(APP_RE_ID_InitialLoginForm_AutoLogin)->SetValue(FALSE);
		}

		RenRenUserInfoNeedSave.bSavePwd = bSavePwd;
//		RenRenAPI_SetConfig();
		break;
	}
	case APP_RE_ID_InitialLoginForm_AutoLogin:
	{
		Boolean bAutoLogin = this->GetControlPtr(APP_RE_ID_InitialLoginForm_AutoLogin )->GetValue();
		if(bAutoLogin == TRUE)
		{
			this->GetControlPtr(APP_RE_ID_InitialLoginForm_SavePwd )->SetValue(TRUE);
		}

		RenRenUserInfoNeedSave.bAutoLogin = bAutoLogin;
//		RenRenAPI_SetConfig();		
		break;
	}
	case APP_RE_ID_InitialLoginForm_ShowPwd:
	{
		TUChar MaskChar[1] = {'*'};
		Boolean bShowPwd = this->GetControlPtr(APP_RE_ID_InitialLoginForm_ShowPwd)->GetValue();
		if(bShowPwd == FALSE)
		{
			TEdit* psw = reinterpret_cast<TEdit*>(this->GetControlPtr(APP_RE_ID_InitialLoginForm_FieldPassword));
			if(psw)
			{
				psw->SetMaskChar(MaskChar[0]);
				psw->Draw();
			}
		}
		else
		{
			if(bCleanPwdWhenFirstShowPwd == TRUE)
			{
				//this->GetControlPtr(APP_RE_ID_InitialLoginForm_FieldPassword)->SetCaption(TUSTR_Kx_NULL, FALSE);
				bCleanPwdWhenFirstShowPwd = FALSE;
			}
				
			TEdit* psw = reinterpret_cast<TEdit*>(this->GetControlPtr(APP_RE_ID_InitialLoginForm_FieldPassword));
			if(psw)
			{
				psw->SetMaskChar(NULL);
				psw->Draw();
			}
		}

		break;
	}

	case APP_RE_ID_InitialLoginForm_RegisterButton:
	{
		char url[256] = {0};
		sprintf(url, "http://mreg.renren.com/reg/registermobile.do?r=1");
		TWebPanelForm *pWin = new TWebPanelForm( pApp, TResource::LoadConstString(APP_RE_ID_STRING_RenRen),  url);	
		bHandled = TRUE; 			
	}
	default:
		break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TInitialLoginForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	return bHandled;	
}

//控件丢失焦点
Boolean TInitialLoginForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	return bHandled;
}

// 文本框输入处理事件
Boolean TInitialLoginForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	return bHandle;
}
