/*!
*@FileName: RenRenApp_Test.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2010-12-13
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "md5.h"


// 构造函数
TTestForm::TTestForm(TApplication* pApp):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	Create(APP_RE_ID_TestForm);
}

// 析构函数
TTestForm::~TTestForm(void)
{

}

// 窗口事件处理
Boolean TTestForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
		}
		break;		
	case EVENT_CtrlKillFocus :
		{
			bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
		}
		break;		
	case EVENT_FieldChanged:
		{
			_OnFldChangedEvent(pApp, pEvent);
			bHandled = TRUE;
			break;		
		}	
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, 320,GUI_API_STYLE_ALIGNMENT_LEFT);

			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_TitleBtnRight); 
				bHandled = TRUE; 
			} 
		} 
		break;	

	case MSG_DL_THREAD_NOTIFY:
		{
			bHandled = TRUE;
		}
		break;

	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TTestForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{

	m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_OK,TITLE_BUTTON_LEFT);
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
	SetAppTilte(this, APP_RE_ID_STRING_RenRen);

	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TTestForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

extern sUrlparams  Urlparam_InitalLogin[];
// 控件点击事件处理
Boolean TTestForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;

	if(m_TitleBtnRight == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		bHandled = TRUE; 		
		return bHandled;
	}

	switch(nCtrlID)
	{
	case APP_RE_ID_TestForm_Test01:
		{
			Set_Url_Params(RR_ProfileGetInfo, "uid", RenRenUserInfo.szuid);
			RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 				
			bHandled = TRUE;
		}
		break;
	case APP_RE_ID_TestForm_Test02:
		{
			RenRenAPICommon_Download(RR_FriendsGetFriends, this->GetWindowHwndId(), 0, 0);
			bHandled = TRUE;
			break;
		}
	case APP_RE_ID_TestForm_Test03:
		{
			Set_Url_Params(RR_FeedGet, "uid", RenRenUserInfo.szuid);
			Set_Url_Params(RR_FeedGet, "page", "1");
			RenRenAPICommon_Download(RR_FeedGet, this->GetWindowHwndId(), 0, 0); 				
			bHandled = TRUE;
		}
		break;
	case APP_RE_ID_TestForm_Test04:
		{
			Set_Url_Params(RR_MessageGets, "box", RENREN_PARAM_INBOX);
			RenRenAPICommon_Download(RR_MessageGets, this->GetWindowHwndId(), 0, 0); 
			bHandled = TRUE;
		}
		break;
	case APP_RE_ID_TestForm_Test05:
		{
			Set_Url_Params(RR_PhotosGetAlbums, "uid", RenRenUserInfo.szuid);
			RenRenAPICommon_Download(RR_PhotosGetAlbums, this->GetWindowHwndId(), 0, 0); 				
			bHandled = TRUE;
		}
		break;
	case APP_RE_ID_TestForm_Test06:
		{
			RenRenAPICommon_Download(RR_UsersGetEvent, this->GetWindowHwndId(), 0, 0); 	
			bHandled = TRUE;
		}
		break;
	case APP_RE_ID_TestForm_Test07:
		{
			char url[256] = {0};
			sprintf(url, "http://3g.renren.com/ep.do?c=1100502&sid=%s", RenRenUserInfo.ticket);
			//TWebPanelForm *pWin = new TWebPanelForm( pApp, AppName_App_RenRen,  "http://www.baidu.com");
			TWebPanelForm *pWin = new TWebPanelForm( pApp, AppName_App_RenRen,  url);
			bHandled = TRUE;
			break;
		}
	case APP_RE_ID_TestForm_Test08:
		{
			Set_Url_Params(RR_PagesGetList, "uid", RenRenUserInfo.szuid);
			RenRenAPICommon_Download(RR_PagesGetList, this->GetWindowHwndId(), 0, 0); 
			bHandled = TRUE;
		}
		break;
	case APP_RE_ID_TestForm_Test09:
		{
			Set_Url_Params(RR_MessageGet, "box", "1");
			Set_Url_Params(RR_MessageGet, "id", "1459988346");
			RenRenAPICommon_Download(RR_MessageGet, this->GetWindowHwndId(), 0, 0); 

			bHandled = TRUE;
		}
		break;
	case APP_RE_ID_TestForm_Test10:
		{
			Set_Url_Params(RR_GuestbookGet, "uid", RenRenUserInfo.szuid);
			RenRenAPICommon_Download(RR_GuestbookGet, this->GetWindowHwndId(), 0, 0); 

			bHandled = TRUE;
		}
		break;	
	default:
		break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TTestForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	return bHandled;	
}

//控件丢失焦点
Boolean TTestForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	return bHandled;
}

// 文本框输入处理事件
Boolean TTestForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	return bHandle;
}
