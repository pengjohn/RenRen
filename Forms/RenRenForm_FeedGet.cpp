/*!
*@FileName: RenRenForm_FeedGet.cpp
*@Author: zengying@GoZone
*@Date: 2010-12-28
*@Brief: 新鲜事Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_FeedGet.h"

#define FEED_PROFILE_IMAGE_INDEX		0xABCDEF

char* GetShareTypeStr(int nShareType);
Int32 GetShareTypeIcon(int nShareType);
PopMenu	PopMenu_Blog[] = 
{
	{POP_OPTION_SET_READ, APP_RE_ID_STRING_Delete},
	{POP_OPTION_SHARE, APP_RE_ID_STRING_Share}		
};

PopMenu	PopMenu_Blog_Me[] = 
{
	{POP_OPTION_DELETE_ME, APP_RE_ID_STRING_Delete}
};

PopMenu	PopMenu_Blog_Friend[] = 
{
	{POP_OPTION_SHARE, APP_RE_ID_STRING_Share}		
};


PopMenu	PopMenu_Status[] = 
{
	{POP_OPTION_SET_READ, APP_RE_ID_STRING_Delete},
	{POP_OPTION_TRANSMIT, APP_RE_ID_STRING_Transmit},
	{POP_OPTION_REPLY_STATUS, APP_RE_ID_STRING_Reply}
};

PopMenu	PopMenu_Status_Me[] = 
{
	{POP_OPTION_DELETE_ME, APP_RE_ID_STRING_Delete},
};

PopMenu	PopMenu_Status_Friend[] = 
{
	{POP_OPTION_TRANSMIT, APP_RE_ID_STRING_Transmit},
	{POP_OPTION_REPLY_STATUS, APP_RE_ID_STRING_Reply}
};


PopMenu	PopMenu_PagesPhoto[] = 
{
	{POP_OPTION_SET_READ, APP_RE_ID_STRING_Delete}
};

PopMenu	PopMenu_Photo[] = 
{
	{POP_OPTION_SET_READ, APP_RE_ID_STRING_Delete},
	{POP_OPTION_SHARE, APP_RE_ID_STRING_Share}				
};

PopMenu	PopMenu_Photo_Me[] = 
{
	{POP_OPTION_DELETE_ME, APP_RE_ID_STRING_Delete},
};

PopMenu	PopMenu_Photo_Friend[] = 
{
	{POP_OPTION_SHARE, APP_RE_ID_STRING_Share}				
};

PopMenu	PopMenu_Other[] = 
{
	{POP_OPTION_SET_READ, APP_RE_ID_STRING_Delete},
};
					
//控件间间隙
#define RR_FEED_ITEM_W_SPACE	(4)
#define RR_FEED_ITEM_H_SPACE	(5)

#if(LCD_SIZE == LCD_HVGA )
	//评论信息背景大小
	#define RR_FEED_COMMENTINFO_W		(110)
	#define RR_FEED_COMMENTINFO_H		(35)
	//Option图标大小
	#define RR_FEED_OPTION_W			(30)
	#define RR_FEED_OPTION_H			(30)
	//动态缩略图片宽高
	#define RR_FEED_THUMBNAIL_W			(40)
	#define RR_FEED_THUMBNAIL_H			(50)
#elif(LCD_SIZE == LCD_WVGA )
	//评论信息大小
	#define RR_FEED_COMMENTINFO_W		(110)
	#define RR_FEED_COMMENTINFO_H		(35)
	//Option图标大小
	#define RR_FEED_OPTION_W			(45)
	#define RR_FEED_OPTION_H			(45)
	//动态缩略图片宽高
	#define RR_FEED_THUMBNAIL_W			(60)
	#define RR_FEED_THUMBNAIL_H			(75)
#endif

#define RR_FEED_OFFSET_X		(RR_FEED_OPTION_W)	//离右边的距离,给option按钮


//个人信息相关
//大头像坐标
#define RR_HEAD_X				(10)
#define RR_HEAD_Y				(10)
#define RR_HEAD_W				(100)
#define RR_HEAD_H				(100)

//姓名 坐标
#define RR_NAME_X				(RR_HEAD_X + RR_HEAD_W + 10)
#define RR_NAME_Y				(10)
#define RR_NAME_W				(SCR_W - RR_NAME_X - 10)
#define RR_NAME_H				(FONT_NORMAL + 4)

//Status 坐标
#define RR_STATUS_X				(RR_NAME_X)
#define RR_STATUS_Y				(RR_NAME_Y + RR_NAME_H + 5)
#define RR_STATUS_W			(RR_NAME_W)
#define RR_STATUS_H				(FONT_MIDDLE + 6)

//更新时间坐标
#define RR_UPDATE_TIME_X		(10)
#define RR_UPDATE_TIME_Y		(4)
#define RR_UPDATE_TIME_W		(SCR_W - RR_UPDATE_TIME_X - 10)
#define RR_UPDATE_TIME_H		(FONT_SMALL + 12)

//QuickBar坐标
#define RR_QUICK_BAR_X			(0)
#define RR_QUICK_BAR_Y			(0)
#define RR_QUICK_BAR_H			(TITLEBAR_H)

#define QUICK_BAR_CAMERA_W		(RR_QUICK_BAR_H)
#define QUICK_BAR_STATUS_W		(SCR_W - QUICK_BAR_CAMERA_W)


//--------------------------------------------
//头像坐标
#define RR_FEED_USER_IMAGE_X			(1)
#define RR_FEED_USER_IMAGE_W			(HEADPHOTO_W)
#define RR_FEED_USER_IMAGE_H			(HEADPHOTO_H)

//头像背景坐标
#define RR_FEED_TYPE_LOGO_X			(2)
#define RR_FEED_TYPE_LOGO_Y			(8)
#define RR_FEED_TYPE_LOGO_W			(HEADMASKBUTTON_W)
#define RR_FEED_TYPE_LOGO_H			(HEADMASKBUTTON_H)


//好友姓名坐标
#define RR_FEED_FNAME_X			(RR_FEED_TYPE_LOGO_X + RR_FEED_TYPE_LOGO_W + RR_FEED_ITEM_W_SPACE)//根据获取到的数据会变动
#define RR_FEED_FNAME_Y			(10)//(RR_FEED_TYPE_LOGO_Y + RR_FEED_TYPE_LOGO_H - 18)
#define RR_FEED_FNAME_H			(FONT_NORMAL)

//简介内容坐标
#define RR_FEED_INTRO_Y			(RR_FEED_TYPE_LOGO_Y)
#define RR_FEED_INTRO_H			(FONT_NORMAL)

//内容坐标
#define RR_FEED_CONTENT_X		(RR_FEED_FNAME_X)
#define RR_FEED_CONTENT_Y		(RR_FEED_TYPE_LOGO_Y+RR_FEED_TYPE_LOGO_H+RR_FEED_ITEM_H_SPACE)
#define RR_FEED_CONTENT_W		(SCR_W-RR_FEED_CONTENT_X-RR_FEED_ITEM_W_SPACE-RR_FEED_OFFSET_X)
#define RR_FEED_CONTENT_H		(FONT_NORMAL)

//动态缩略图片XY
#define RR_FEED_THUMBNAIL_X			(RR_FEED_FNAME_X)
#define RR_FEED_THUMBNAIL_Y			(RR_FEED_TYPE_LOGO_Y+RR_FEED_TYPE_LOGO_H+RR_FEED_ITEM_H_SPACE)

//时间坐标
#define RR_FEED_STIME_X			(RR_FEED_CONTENT_X)
#define RR_FEED_STIME_Y			(RR_FEED_CONTENT_Y + RR_FEED_CONTENT_H+RR_FEED_ITEM_H_SPACE)
#define RR_FEED_STIME_W			(50)
#define RR_FEED_STIME_H			(FONT_SMALL)

//评论信息坐标
#define RR_FEED_COMMENTINFO_X			(RR_FEED_CONTENT_X)

//Option图标
#define RR_FEED_OPTION_X			(RR_FEED_CONTENT_X + RR_FEED_CONTENT_W)

//默认行高
#define RR_FEED_ITEM_DEFAULT_H		(100)

//提示文本, 如"没有新鲜事"等
#define RR_FEED_INFO_X			(10)
#define RR_FEED_INFO_Y			(12)
#define RR_FEED_INFO_W			(SCR_W - RR_FEED_INFO_X - 10)
#if(LCD_SIZE == LCD_HVGA )
#define RR_FEED_INFO_H			(40)
#elif(LCD_SIZE == LCD_WVGA )
#define RR_FEED_INFO_H			(60)
#endif


///"更多"
#define RR_FEED_MORE_X			(10)
#define RR_FEED_MORE_Y			(10)
#define RR_FEED_MORE_W		(TITLE_BUTTON_W)
#define RR_FEED_MORE_H			(TITLE_BUTTON_H)




// 构造函数
TFeedGetForm::TFeedGetForm(TApplication* pApp, eFeedMode nFeedMode, Boolean bNew):TWindow(pApp)
{
//	Response = NULL;

	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	m_QuickBarTakePhotoID = -1;
	m_QuickBarStatusID = -1;
	m_ProfileImageID = -1;
	m_MoreBtnID = -1;
	pProfileImage = NULL;
	memset(m_pszName,0x0, sizeof(m_pszName));
	memset(m_uid,0x0, sizeof(m_uid));
	memset((void*)&gItemData, 0x0, sizeof(gItemData));
	PreSelectRichViewID = 0;
	m_ItemCount = 0;

	STRCPY_Ex(m_uid, Get_Url_Params(RR_FeedGet, "uid"));
			
	m_FeedMode = nFeedMode;
	switch(m_FeedMode)
	{
		case FEED_MODE_NEW:
			bHaveBottomTab = FALSE;
			bHaveProfile = FALSE;
			bHaveQuickBar = TRUE;
			break;
		case FEED_MODE_MYHOME:
			bHaveBottomTab = TRUE;
			bHaveProfile = TRUE;
			bHaveQuickBar = TRUE;
			break;
		case FEED_MODE_FRIENDHOME:
			bHaveBottomTab = TRUE;
			bHaveProfile = TRUE;
			bHaveQuickBar = FALSE;
			break;
		default:
			bHaveBottomTab = FALSE;
			bHaveProfile = FALSE;
			bHaveQuickBar = FALSE;
			break;			
	}
	
	Create(APP_RE_ID_FeedGetForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);	
}

// 析构函数
TFeedGetForm::~TFeedGetForm(void)
{
	int i=0;
	int j=0;
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

//	if( Response )
//	{
//		delete Response;	
//	}

	if( pProfileImage != NULL)
	{
		pProfileImage->Destroy();
		pProfileImage = NULL;								
	}
	
	for(i=0; i<RR_FEED_ITEM_COUNT_MAX; i++)
	{
		if( gItemData[i].pLogoBmp != NULL)
		{
			gItemData[i].pLogoBmp->Destroy();
			gItemData[i].pLogoBmp = NULL;								
		}
	}

	for(i=0; i<RR_FEED_ITEM_COUNT_MAX; i++)
	{
		for(j=0; j<RR_FEED_ITEM_THUMBNAIL_COUNT_MAX; j++)
		{
			if( gItemData[i].pThumbnailBmp[j] != NULL)
			{
				gItemData[i].pThumbnailBmp[j]->Destroy();
				gItemData[i].pThumbnailBmp[j] = NULL;
			}
		}	
	}
}

// 窗口事件处理
Boolean TFeedGetForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);

				//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_QuickBar), 0, 44, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
				if(bHaveBottomTab)
					dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Bottom_btn_bg), 0, BOTTOM_TAB_Y, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);	
				
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
		case EVENT_CoolBarListPreDraw:
			{
				bHandled = _OnCoolBarListPreDraw(pApp, pEvent); 			   
			}
			break;
			
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
			{
				NotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						
		
				bHandled = TRUE;
				switch(notifyData.nAccessType)
				{
					case RR_PhotoDownload:
					{	
						//下载完后更新对应的图片
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);

						if(pDownLoadBitmap)
						{
							if(notifyData.nParam == FEED_PROFILE_IMAGE_INDEX)
							{
								TMaskButton* pLogo = NULL;
								pLogo = static_cast<TMaskButton*>(GetControlPtr(m_ProfileImageID));
								if(pLogo)
								{
									TRectangle rc;
									
									pLogo->GetBounds(&rc);
									if( pProfileImage != NULL)
									{
										pProfileImage->Destroy();
										pProfileImage = NULL; 							
									}
									
									pProfileImage = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
									pProfileImage->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
									pLogo->SetCaption(TUSTR_Re_NULL,0,0);
									pLogo->SetImage(pProfileImage, (rc.Width()-pProfileImage->GetWidth())/2, (rc.Height()-pProfileImage->GetHeight())/2);
									pLogo->Draw();
								}
								
							}
							else if(notifyData.nParam < RR_FEED_ITEM_COUNT_MAX)
							{
								TMaskButton* pLogo = NULL;
								pLogo = static_cast<TMaskButton*>(GetControlPtr(gItemData[notifyData.nParam].nLogoID));
								if(pLogo)
								{
									TRectangle rc;
									
									pLogo->GetBounds(&rc);
									if( gItemData[notifyData.nParam].pLogoBmp != NULL)
									{
										gItemData[notifyData.nParam].pLogoBmp->Destroy();
										gItemData[notifyData.nParam].pLogoBmp = NULL; 							
									}

									gItemData[notifyData.nParam].pLogoBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
									gItemData[notifyData.nParam].pLogoBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
								
									pLogo->SetCaption(TUSTR_Re_NULL,0,0);
									pLogo->SetImage(gItemData[notifyData.nParam].pLogoBmp, (rc.Width()-gItemData[notifyData.nParam].pLogoBmp->GetWidth())/2, (rc.Height()-gItemData[notifyData.nParam].pLogoBmp->GetHeight())/2);
									pLogo->Draw();
								}
							}
							else
							{
								TImage *pThumbnailImage = NULL;
								int ItemIndex = (notifyData.nParam- RR_FEED_ITEM_COUNT_MAX)/RR_FEED_ITEM_THUMBNAIL_COUNT_MAX;
								int ThumbnailIndex = (notifyData.nParam - RR_FEED_ITEM_COUNT_MAX)%RR_FEED_ITEM_THUMBNAIL_COUNT_MAX;
								pThumbnailImage = static_cast<TImage*>(GetControlPtr(gItemData[ItemIndex].ThumbnailCtrlID[ThumbnailIndex]));
								
								if(pThumbnailImage)
								{
									TRectangle rc;
									
									pThumbnailImage->GetBounds(&rc);
									if( gItemData[ItemIndex].pThumbnailBmp[ThumbnailIndex] != NULL)
									{
										gItemData[ItemIndex].pThumbnailBmp[ThumbnailIndex]->Destroy();
										gItemData[ItemIndex].pThumbnailBmp[ThumbnailIndex] = NULL; 							
									}
									
									gItemData[ItemIndex].pThumbnailBmp[ThumbnailIndex] = TBitmap::Create(rc.Width(), rc.Height(), pDownLoadBitmap->GetDepth());
									gItemData[ItemIndex].pThumbnailBmp[ThumbnailIndex]->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
									pThumbnailImage->SetBitmap(gItemData[ItemIndex].pThumbnailBmp[ThumbnailIndex]);
									pThumbnailImage->Draw();
								}
							}	
							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 						
						}						
						break;
					}

					case RR_SharePublish:
						{
							pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success),TResource::LoadConstString(APP_RE_ID_STRING_Share),WMB_OK); 
						}
						break;

					case RR_StatusSet:
						{
							pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success),TResource::LoadConstString(APP_RE_ID_STRING_Publish),WMB_OK);
							if(m_FeedMode == FEED_MODE_NEW)
							{
								Set_Url_Params(RR_FeedGet, "uid", m_uid);
								Set_Url_Params(RR_FeedGet, "page", "1");
								RenRenAPICommon_Download(RR_FeedGet, this->GetWindowHwndId(), 0, FEED_MODE_NEW); 							
							}
							else if(m_FeedMode == FEED_MODE_MYHOME)
							{
								Set_Url_Params(RR_ProfileGetInfo, "uid", m_uid);
								RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0);
							}
						}
						break;

					case RR_StatusGet:
						{
						}
						break;
					case RR_PhotosUpload:
					{
						if(pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_PhotoUploadContinue),TResource::LoadConstString(APP_RE_ID_STRING_PhotoUploadSuccess),WMB_YESNO) ==0 )
							{
							HitControl(m_QuickBarTakePhotoID); 
							}
						break;
					}						
					case RR_MessageSent:
						{
							pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success),TResource::LoadConstString(APP_RE_ID_STRING_Send),WMB_OK); 	
						}
						break;
					case RR_StatusAddComment:
						{
						pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success), TResource::LoadConstString(APP_RE_ID_STRING_Reply), WMB_OK);
						}						
						break;
					case RR_FeedRead:
						{
						TBarRowList *lpRowList = NULL;
						TBarRow *lpRow = NULL;
						
						TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FeedGetForm_FeedCoolBarList));//ShowCoolList(ShowType)
						lpRowList = pCoolBarList->Rows();
						lpRow = lpRowList->FirstRow();
						if(lpRow == NULL)
							{
							return FALSE;
							}

						TBarListItem* lpItem = NULL;
						lpItem = lpRow->FirstItem();						
						while(lpItem)
						{
							if(lpItem->GetValue() == notifyData.nParam)
							{
								lpItem->Delete(FALSE);
								break;
							}

							lpItem = lpRow->NextItem();
						};
						}
						break;
					case RR_FeedGetMore:
					{
						tResponseFeedGet* Response = NULL;
						RenRenAPI_JsonParse(RR_FeedGetMore, (void **)&Response);	
						//:TODO:
						if(Response)
						{
							_UpdateCoolBarList(pApp, Response);

							delete Response;
							Response = NULL;
						}
					}
					break;

					case RR_UsersGetInfoPhoto:
					{
						tResponseUsersGetInfo* Response = NULL;
						RenRenAPI_JsonParse(RR_UsersGetInfoPhoto, (void **)&Response);
						if(Response)
						{
							_UpdateProfilePhoto(pApp, Response);
							
							delete Response;	
							Response = NULL;							
						}
					}
					break;
					
					default:
						break;
				}
				break;
			}
			break;

		case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			switch(notifyData.nParam)
			{
				case RR_StatusSet:
					{
					Set_Url_Params(RR_StatusSet, "status", (char*)notifyData.pszEditContent);
					Set_Url_Params(RR_StatusSet, "forward_id", "");
					Set_Url_Params(RR_StatusSet, "forward_owner", "");
					RenRenAPICommon_Download(RR_StatusSet, this->GetWindowHwndId(), 0, 0);
					}	
					break;
				case RR_MessageSent:
					{
					Set_Url_Params(RR_MessageSent, "rid", "");
					Set_Url_Params(RR_MessageSent, "box", "");
					Set_Url_Params(RR_MessageSent, "uid", m_uid);
					
					Set_Url_Params(RR_MessageSent, "title", (char*)notifyData.pszEditTitle);					
					Set_Url_Params(RR_MessageSent, "content", (char*)notifyData.pszEditContent);
					
					RenRenAPICommon_Download(RR_MessageSent, this->GetWindowHwndId(), 0, 0);	
					}
					break;
				case RR_PhotosUpload:
					{
						Set_Url_Params(RR_PhotosUpload, "caption", (char*)notifyData.pszEditContent);
						RenRenAPICommon_Download(RR_PhotosUpload,  this->GetWindowHwndId(), 0, 0);
					}
					break;

				case RR_StatusAddComment:
				{
					PostNotifyMsgDataType notifyData;
					Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));
		
					Set_Url_Params(RR_StatusAddComment, "owner_id", (char*)notifyData.pszReceiver);
					Set_Url_Params(RR_StatusAddComment, "status_id", (char*)notifyData.pszEditTitle);
					
					Set_Url_Params(RR_StatusAddComment, "rid", "");
					Set_Url_Params(RR_StatusAddComment, "content", (char*)notifyData.pszEditContent);			

					RenRenAPICommon_Download(RR_StatusAddComment, this->GetWindowHwndId(), 0, 0);		
					bHandled = TRUE;
				}				
				break;
			}
			bHandled = TRUE;
			break;
		}
		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TFeedGetForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int nErrorCode = eFailed;
	Int32 Height_Panel = 0;		//Panel高度
	Int32 Height_Top = 0;			//CoolBarList上面信息的高度
	Int32 Height_CoolBarList = 0;	//CoolBarList高度
	
	//显示不同的标题
	switch(m_FeedMode)
	{
		case FEED_MODE_NEW:
			SetAppTilte(this, APP_RE_ID_STRING_Feed);
			m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Home,TITLE_BUTTON_RIGHT);			
			m_TitleBtnLeft= SetAppTitleButton(this, APP_RE_ID_STRING_Refresh, TITLE_BUTTON_LEFT);
			break;
		case FEED_MODE_MYHOME:
			SetAppTilte(this, APP_RE_ID_STRING_MyNews);
			m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Home,TITLE_BUTTON_RIGHT);
			m_TitleBtnLeft= SetAppTitleButton(this, APP_RE_ID_STRING_Refresh, TITLE_BUTTON_LEFT);			
			break;
		case FEED_MODE_FRIENDHOME:
			tResponseProfile* ResponseProfile;
			nErrorCode = RenRenAPI_JsonParse(RR_ProfileGetInfo, (void **)&ResponseProfile);
			if(ResponseProfile != NULL)
			{
				//姓名
				TUChar  pszFName[64] = {0};
				TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)ResponseProfile->name);
			
				SetAppTilte(this, 0, pszFName);

				delete ResponseProfile;
				ResponseProfile = NULL;
			}

			m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
			//公共主页不能发送站内信
			if(bIsPage == FALSE)
				m_TitleBtnLeft= SetAppBitmapButton(this, APP_RE_ID_BITMAP_write_but, APP_RE_ID_BITMAP_write_but_over);
			
			break;
		default:
			break;			
	}
	
	if(bHaveBottomTab)
		CreateProfileBottomTab(this, &BottomTabCtrID, 1);

	TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_FeedGetForm_FeedPanel));
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FeedGetForm_FeedCoolBarList));	

	//设置panel高度
	if(pTPanel)
	{
		TRectangle rect;
		Height_Panel = SCR_H - STATUSBAR_H - TITLEBAR_H;
		if(bHaveBottomTab)
			Height_Panel -= BOTTOM_TAB_H;
		Int32 nY = TITLEBAR_H;
			
		pTPanel->GetBounds(&rect);
		rect.SetY(nY);
		rect.SetHeight(Height_Panel);
		pTPanel->SetBounds(&rect);
	}
	
	//Profile
	if(bHaveProfile)
	{
		tResponseProfile* ResponseProfile;
		nErrorCode = RenRenAPI_JsonParse(RR_ProfileGetInfo, (void **)&ResponseProfile);
		if(ResponseProfile != NULL)
		{
			//头像,下载RR_UsersGetInfoPhoto -> 下载mainurl
			TBitmap* pDownLoadBitmap = NULL;
			pDownLoadBitmap = LoadImgByUrl(ResponseProfile->headurl);			
			const TBitmap * pImageDeault = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_DefaultLarge);
			const TBitmap * pBackImage = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_headmask_large);
			if(pDownLoadBitmap == NULL)
			{
				//RenRenAPICommon_DownloadPhoto(ResponseProfile->headurl, this->GetWindowHwndId(), FEED_PROFILE_IMAGE_INDEX);	
				m_ProfileImageID = CtrlAddItemToPanel_MaskButton(this, pTPanel, RR_HEAD_X, RR_HEAD_Y, RR_HEAD_W, RR_HEAD_H, (TBitmap*)pImageDeault, (TBitmap*)pImageDeault, (TBitmap*)pBackImage );	
				this->DisableControl(m_ProfileImageID);
			}
			else
			{
				//需要做放大
				pProfileImage = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
				pProfileImage->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));				
				m_ProfileImageID = CtrlAddItemToPanel_MaskButton(this, pTPanel, RR_HEAD_X, RR_HEAD_Y, RR_HEAD_W, RR_HEAD_H, (TBitmap*)pProfileImage, (TBitmap*)pProfileImage, (TBitmap*)pBackImage );	
				this->DisableControl(m_ProfileImageID);

				//释放图片
				pDownLoadBitmap->Destroy();
				pDownLoadBitmap = NULL; 						
			}
			//下载大头像
			tResponseUsersGetInfo* ResponseUserInfoPhoto = NULL;
			RenRenAPI_JsonParse(RR_UsersGetInfoPhoto, (void **)&ResponseUserInfoPhoto);
			if(ResponseUserInfoPhoto)
			{
				if( (ResponseUserInfoPhoto->nArraySize > 0) && (ResponseUserInfoPhoto->Array[0].uid == ResponseProfile->uid) )
				{
					_UpdateProfilePhoto(pApp, ResponseUserInfoPhoto);
				}
				else
				{
					Set_Url_Params(RR_UsersGetInfoPhoto, "uids", m_uid);
					RenRenAPICommon_Download(RR_UsersGetInfoPhoto, this->GetWindowHwndId(), 0, 0); 
				}					
							
				delete ResponseUserInfoPhoto;
				ResponseUserInfoPhoto = NULL;							
			}
			else
			{
				Set_Url_Params(RR_UsersGetInfoPhoto, "uids", m_uid);
				RenRenAPICommon_Download(RR_UsersGetInfoPhoto, this->GetWindowHwndId(), 0, 0); 
			}
		
			//姓名,需要保存
			STRCPY_Ex(m_pszName, ResponseProfile->name);
			TUChar  pszFName[64] = {0};
			TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)ResponseProfile->name);
			CtrlAddItemToPanel_Label(this, pTPanel, RR_NAME_X, RR_NAME_Y, 0, FONT_NORMAL, pszFName, RGB_COLOR_BLACK);
			Height_Top += (RR_NAME_Y+RR_NAME_H);
			
			//状态
			TUChar  pszStatus[1024] = {0};
			Coord nHeight_RichView = 0;
			if(ResponseProfile->nSize_status>0)
			{
				TUString::StrUtf8ToStrUnicode(pszStatus, (const Char *)ResponseProfile->status[0].content);
				CtrlAddItemToPanel_RichView(this, pTPanel, RR_STATUS_X, RR_STATUS_Y, RR_STATUS_W, &nHeight_RichView, FONT_MIDDLE, pszStatus, RGB_COLOR_BLACK);
			}

			//位置容错调整
			if(nHeight_RichView > (RR_HEAD_H-RR_NAME_H) )
				Height_Top += nHeight_RichView;
			else
				Height_Top += (RR_HEAD_H- RR_NAME_H);

			delete ResponseProfile;
			ResponseProfile = NULL;
		}
	}
	//更新时间
	{
		TUChar sUpdateTime[128] = {0};
		//TUChar* pszDateTime = NULL; 
		//cUnixTime_ConvertUnixTimeToFormatString(GetSysSecond(), KX_TIME_FORMAT_YY_MM_DD_HH_MM, &pszDateTime );
		TUChar* pszDateTime = NULL;			
		DateTimeType dtP = {0}; 
		TimGetLocalDateTime(&dtP);

		TUChar* 		pFormatStr = NULL;			
		pFormatStr = (TUChar*)TResource::LoadConstString(APP_RE_ID_STRING_UTimeFormat_YY_MM_DD_HH_MM);
		pszDateTime = new TUChar[64];
		memset(pszDateTime, 0 , sizeof(TUChar) * 64 );
		TUString::StrPrintF( pszDateTime, pFormatStr, dtP.year, dtP.month, dtP.day, dtP.hour/10, dtP.hour%10, dtP.minute/10, dtP.minute%10 );

		TUString::StrPrintF(sUpdateTime, TResource::LoadConstString(APP_RE_ID_STRING_UpdateTime),pszDateTime);

		if(pszDateTime) 
		{
			delete[] pszDateTime;
			pszDateTime = NULL;
		}

		CtrlAddItemToPanel_Label(this, pTPanel, RR_UPDATE_TIME_X, Height_Top+4, 0, FONT_SMALL, sUpdateTime, RGB_COLOR_LIGHTGRAY);
		Height_Top += RR_UPDATE_TIME_H;
	}

	//设置CoolBarList高度
	if(pCoolBarList)
	{
		TRectangle rect;
		Int32 Height_CoolBarList = Height_Panel- Height_Top;
		Int32 nY = Height_Top;
			
		pCoolBarList->GetBounds(&rect);
		rect.SetY(nY);
		rect.SetHeight(Height_CoolBarList);
		pCoolBarList->SetBounds(&rect);
	}

	//从对应Json中获取数据,用于更新UI
	tResponseFeedGet* Response = NULL;
	nErrorCode = RenRenAPI_JsonParse(RR_FeedGet, (void **)&Response);	
	//:TODO:
	if(Response)
	{
		_SetCoolBarList(pApp);
		_UpdateCoolBarList(pApp, Response);

		delete Response;
		Response = NULL;
	}
	else
	{
		//显示无权限操作的情况(用户设置了阅读权限)	
		if(nErrorCode == 200)
		{
			TUChar ErrorInfo[ERROR_INFO_LEN] = {0};
			if(RenRenAPI_JsonParse_bSuccess(RR_FeedGet, ErrorInfo) != 0)	
			{
				if(TUString::StrLen(ErrorInfo) > 0)
				{

					_SetCoolBarList(pApp);
					
					TBarRowList* pRowList = NULL;
					TBarRow* pBarRow = NULL;
					
					pRowList = pCoolBarList->Rows();
					pRowList->Clear();
					pBarRow = pRowList->AppendRow();
	
					//显示错误提示
					TBarListItem* lpItem = NULL;
					lpItem = pBarRow->AppendItem();
					if (lpItem)  
					{
						CtrlAddItemToCoolBarList_Lable(this, lpItem, RR_FEED_INFO_X,  RR_FEED_INFO_Y, RR_FEED_INFO_W, FONT_NORMAL, (TUChar*)ErrorInfo);
						lpItem->SetHeight(RR_FEED_INFO_H);
					}
				}
			}
		}
	}		
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TFeedGetForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TFeedGetForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);
	
	_OnCoolCtrlSelected(pApp, nCtrlID);

	if(!bHandled)
	{
		if(m_TitleBtnRight == nCtrlID)
		{
			if(m_FeedMode == FEED_MODE_NEW)
				this->CloseWindow();
			else			
				App_PostMessageEx(&gtidMain, MSG_BACKTO_HOME, NULL, 0, 0, 0);			
			bHandled = TRUE; 
			return bHandled;
		}
		else if(m_TitleBtnLeft == nCtrlID)
		{
			if(m_FeedMode == FEED_MODE_NEW)
			{
				//刷新
				Set_Url_Params(RR_FeedGet, "uid", m_uid);
				Set_Url_Params(RR_FeedGet, "page", "1");
				RenRenAPICommon_Download(RR_FeedGet, this->GetWindowHwndId(), 0, FEED_MODE_NEW); 
			}
			else if(m_FeedMode == FEED_MODE_MYHOME)
			{
				//刷新,需要连个人信息都刷新
				//Set_Url_Params(RR_FeedGet, "uid", m_uid);
				//Set_Url_Params(RR_FeedGet, "page", "1");
				//RenRenAPICommon_Download(RR_FeedGet, this->GetWindowHwndId(), 0, FEED_MODE_MYHOME); 
				Set_Url_Params(RR_ProfileGetInfo, "uid", m_uid);
				RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0);				
			}				
			else if(m_FeedMode == FEED_MODE_FRIENDHOME)
			{
				//发送站内信
				PostNotifyMsgDataType in_msgData = {0};
				MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

				STRCPY_Ex(in_msgData.pszReceiver, m_pszName);
				
				in_msgData.nCtrlId = 0;
				in_msgData.nHwndId = this->GetWindowHwndId();

				in_msgData.nAppTitleStrID = APP_RE_ID_STRING_Message; 
				in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_Send;
				
				in_msgData.nTitleEditMaxChars = RENREN_LENGTH_BLOG_TITLE;
				in_msgData.nContentEditMaxChars = RENREN_LENGTH_MESSAGE;
				
				in_msgData.IsReceiverEdit = TRUE;
				in_msgData.IsExpressionBtn = FALSE;
				in_msgData.IsTitleEdit = TRUE;
				in_msgData.IsPrivacyCtl= FALSE;
				in_msgData.nParam = RR_MessageSent;

				TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);
			}
			bHandled = TRUE;		
			return bHandled;
		}
		else if(m_QuickBarTakePhotoID == nCtrlID)
		{
			if( PopBox_UploadPhoto(pApp, this->GetWindowHwndId()) == 1)
			{
			}
			bHandled = TRUE;		
			return bHandled;
		}
		else if(m_QuickBarStatusID == nCtrlID)
		{
			PostNotifyMsgDataType in_msgData = {0};
			TUChar pszStateContent[1024];
			
			MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));
			memset(pszStateContent, 0, sizeof(pszStateContent));		
			
			in_msgData.nCtrlId = 0;
			in_msgData.nHwndId = this->GetWindowHwndId();
			
			in_msgData.nAppTitleStrID = APP_RE_ID_STRING_Status; 
			in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_Publish;
			
			in_msgData.nContentEditMaxChars = RENREN_LENGTH_STATUS;
			
			in_msgData.IsExpressionBtn = TRUE;
			in_msgData.nParam = RR_StatusSet;

			TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);			
			bHandled = TRUE;		
			return bHandled;
		}		
		//获取用户信息及新鲜事
		else if(BottomTabCtrID.nCtrID[0] == nCtrlID)
		{
			//Set_Url_Params(RR_ProfileGetInfo, "uid", m_uid);
			//RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 				
			bHandled = TRUE;		
			return bHandled;
		}
		//相册
		else if(BottomTabCtrID.nCtrID[1] == nCtrlID)
		{
			Set_Url_Params(RR_PhotosGetAlbums, "uid", m_uid);
			RenRenAPICommon_Download(RR_PhotosGetAlbums, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME); 				
			bHandled = TRUE;		
			return bHandled;
		}
		//日记
		else if(BottomTabCtrID.nCtrID[2] == nCtrlID)
		{
			Set_Url_Params(RR_BlogGets, "uid", m_uid);
			RenRenAPICommon_Download(RR_BlogGets, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME);			
			bHandled = TRUE;
			return bHandled;
		}
		//留言本
		else if(BottomTabCtrID.nCtrID[3] == nCtrlID)
		{
			Set_Url_Params(RR_GuestbookGet, "uid", m_uid);
			RenRenAPICommon_Download(RR_GuestbookGet, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME); 			
			bHandled = TRUE;		
			return bHandled;
		}
		//资料
		else if(BottomTabCtrID.nCtrID[4] == nCtrlID)
		{
			if(bIsPage == TRUE)
				{
				Set_Url_Params(RR_PagesGetInfo, "page_id", m_uid);
				RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0); 				
				}
			else
				{
				Set_Url_Params(RR_UsersGetInfo, "uids", m_uid);
				RenRenAPICommon_Download(RR_UsersGetInfo, this->GetWindowHwndId(), 0, 0); 				
				}
			bHandled = TRUE;		
			return bHandled;
		}
		//更多
		else if(m_MoreBtnID == nCtrlID)
		{
			char* szPage = Get_Url_Params(RR_FeedGetMore, "page");
			char szPageParams[16] = {0};
			int nPage = 0;
			nPage = atoi(szPage);
			nPage ++;
			sprintf(szPageParams, "%d", nPage);
			Set_Url_Params(RR_FeedGetMore, "page", szPageParams);
			RenRenAPICommon_Download(RR_FeedGetMore, this->GetWindowHwndId(), 0, 0);
		}
	}

	return bHandled;
}

//控件获取焦点
Boolean TFeedGetForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1; 

	//:TODO:
	for(int i=0; i<RR_FEED_ITEM_COUNT_MAX; i++)
	{
		if( (gItemData[i].FnameCtrlID == nCtrlID ) ||
		    (gItemData[i].TitleCtrlID == nCtrlID) ||
		    (gItemData[i].ContentCtrlID== nCtrlID) )
		{	

			bHandled = TRUE;
			break;
		}
	}

	if(bHandled == TRUE)
	{	
		//点击后显示选中
		TRichView* tNewRichView =static_cast< TRichView* >(GetControlPtr(nCtrlID));
		if(tNewRichView)
		{
			TRectangle rc;
			
			tNewRichView->GetBounds(&rc);
			tNewRichView->SetSelectionPos(0,rc.Width());
		}
	}
	return bHandled;	
}

//控件丢失焦点
Boolean TFeedGetForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1; 

	//:TODO:
	for(int i=0; i<RR_FEED_ITEM_COUNT_MAX; i++)
	{
		if( (gItemData[i].FnameCtrlID == nCtrlID ) ||
		    (gItemData[i].TitleCtrlID == nCtrlID) ||
		    (gItemData[i].ContentCtrlID== nCtrlID) )
		{	

			bHandled = TRUE;
			break;
		}
	}

	if(bHandled == TRUE)
	{	
		//点击后显示选中
		TRichView* tNewRichView =static_cast< TRichView* >(GetControlPtr(nCtrlID));
		if(tNewRichView)
		{
			TRectangle rc;
			
			tNewRichView->GetBounds(&rc);
			tNewRichView->SetSelectionPos(0,0);
			tNewRichView->SetFocusStatus(FALSE);
		}
	}
	return bHandled;
}

// 文本框输入处理事件
Boolean TFeedGetForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}

/**
 * 初始化CoolBarList
 *
 * \param pApp
 *
 * \return 
 */
Int32 TFeedGetForm::_SetCoolBarList(TApplication* pApp)
{
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	TBarRow *lpRow = NULL;
	
	TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_FeedGetForm_FeedPanel));
	pPanel->SetOrigin(0, 0);
	
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FeedGetForm_FeedCoolBarList));//ShowCoolList(ShowType)
	if (pCoolBarList)
	{
		pCoolBarList->GetBounds(&Rc_CoolBarList);
		lpRowList = pCoolBarList->Rows();
		//add row
		if (lpRowList)
		{
			lpRowList->BeginUpdate();
			lpRowList->Clear();
			lpRow = lpRowList->AppendRow();
			lpRowList->EndUpdate(); 
		}
	}

	//是否有快速发表栏
	if(bHaveQuickBar)
	{
		TBarListItem* lpItem = NULL;
		lpItem = lpRow->AppendItem();
		if (lpItem)  
		{
			TRectangle rect;				
			lpItem->GetBounds(rect);		
			Int32 CoolBarDiffTop = rect.Y() - Rc_CoolBarList.Y();//coolbarlist 距界面顶部的值				
		
			m_QuickBarTakePhotoID = CtrlAddItemToCoolBarList_Image(this, lpItem, RR_QUICK_BAR_X,  RR_QUICK_BAR_Y + CoolBarDiffTop, QUICK_BAR_CAMERA_W, RR_QUICK_BAR_H, (TBitmap *)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_QuickBar_TakePhoto));
			m_QuickBarStatusID = CtrlAddItemToCoolBarList_Image(this, lpItem, RR_QUICK_BAR_X+QUICK_BAR_CAMERA_W,  RR_QUICK_BAR_Y + CoolBarDiffTop, QUICK_BAR_STATUS_W, RR_QUICK_BAR_H, (TBitmap *)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_QuickBar_Status));

			lpItem->SetHeight(RR_QUICK_BAR_H);
			lpItem->SetValue(-1);	//不参与删除操作
		}
	}
	
	return TRUE;
}

/**
 * 更新CoolBarList
 *
 * \param pApp
 * \param Response
 *
 * \return 
 */
Int32 TFeedGetForm::_UpdateCoolBarList(TApplication* pApp, tResponseFeedGet* Response)
{

	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	TBarRow *lpRow = NULL;
	
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FeedGetForm_FeedCoolBarList));//ShowCoolList(ShowType)
	pCoolBarList->GetBounds(&Rc_CoolBarList);
	lpRowList = pCoolBarList->Rows();
	if (lpRowList == NULL)
		{
		return FALSE;
		}
	
	lpRowList->BeginUpdate();
	lpRow = lpRowList->FirstRow();
	if(lpRow == NULL)
		{
		return FALSE;
		}

	//先删除上一个更多按钮
	if(m_MoreBtnID != -1)
	{
		TBarListItem* lpItem = NULL;
		lpItem = lpRow->LastItem();
		if(lpItem)
			{
			lpItem->Delete(FALSE);
			}
	}
	
	if(Response->nArraySize>0)
	{
		int nIndex = 0;//记录Jason中，数组下标		
		
		//int nCoolMaxItem = (Response->nArraySize < RR_FEED_ITEM_COUNT_MAX)?Response->nArraySize:RR_FEED_ITEM_COUNT_MAX;	//cool最大item值
		//while( nIndex < nCoolMaxItem)
		for(int j=0; j<Response->nArraySize; j++)
		{
			Boolean bHavePhoto = FALSE;

			//如果个数超过这直接返回
			if(m_ItemCount >= RR_FEED_ITEM_COUNT_MAX)
				break;
			
			if(Response->Array[nIndex].feed_type != RR_FeedTypeError)//下载信息正确则显示
			{
				//add Item
				TBarListItem* lpItem = NULL;
				lpItem = lpRow->AppendItem();
				if (lpItem)  
				{
					TFont objFontType;
					TUChar pszFName[32] = {0};
					TUChar pszIntro[1024] = {0}; 				
					TUChar pszContent[256] = {0};
					TUChar pszDateTime[32] = {0};				
					Int32 ItemHeight = 0;
					Int32 ItemWidth = 0;				
					TRectangle Rc_Temp;
					TRectangle rect;				
					lpItem->GetBounds(rect);
					lpItem->SetCaption(NULL);						
					lpItem->SetIndicatorType(itNone);
				
					Int32 CoolBarDiffTop = rect.Y() - Rc_CoolBarList.Y();//coolbarlist 距界面顶部的值				
	
					//新鲜事头像图标
					//头像, 先读取磁盘cache,无文件,再下载
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByUrl(Response->Array[nIndex].headurl);
					if(  pDownLoadBitmap != NULL)
					{
						gItemData[m_ItemCount].pLogoBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
						gItemData[m_ItemCount].pLogoBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
						gItemData[m_ItemCount].nLogoID = CtrlAddItemToCoolBarList_MaskButton(this, lpItem, RR_FEED_TYPE_LOGO_X, CoolBarDiffTop + RR_FEED_TYPE_LOGO_Y, RR_FEED_TYPE_LOGO_W, RR_FEED_TYPE_LOGO_H,  gItemData[m_ItemCount].pLogoBmp, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1) );

						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 						
					}						
					else
					{
						gItemData[m_ItemCount].nLogoID = CtrlAddItemToCoolBarList_MaskButton(this, lpItem, RR_FEED_TYPE_LOGO_X, CoolBarDiffTop + RR_FEED_TYPE_LOGO_Y, RR_FEED_TYPE_LOGO_W, RR_FEED_TYPE_LOGO_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default), (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1) );
						RenRenAPICommon_DownloadPhoto(Response->Array[nIndex].headurl, this->GetWindowHwndId(), m_ItemCount);
					}					
					ItemWidth = ItemWidth + RR_FEED_TYPE_LOGO_X + RR_FEED_TYPE_LOGO_W + RR_FEED_ITEM_W_SPACE;							

					//操作图标
					switch(Response->Array[nIndex].feed_type)
					{
						case RR_FeedUpdateStatus:
						case RR_FeedUpdateStatusForPage:
							{
								if(m_FeedMode == FEED_MODE_FRIENDHOME)
								{
									gItemData[m_ItemCount].tPopMenu = PopMenu_Status_Friend;
									gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Status_Friend);										
								}
								else
								{
									if(Response->Array[nIndex].actor_id == RenRenUserInfo.uid)
									{
										gItemData[m_ItemCount].tPopMenu = PopMenu_Status_Me;
										gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Status_Me);
									}
									else
									{
										gItemData[m_ItemCount].tPopMenu = PopMenu_Status;
										gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Status);
									}
								}
							}
							break;
						case RR_FeedPostBlog:
						case RR_FeedPublicPostBlog:
						case RR_FeedShareBlog:								
							{
								if(m_FeedMode == FEED_MODE_FRIENDHOME)
								{
									gItemData[m_ItemCount].tPopMenu = PopMenu_Blog_Friend;
									gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Blog_Friend);										
								}
								else
								{
									if(Response->Array[nIndex].actor_id == RenRenUserInfo.uid)
									{
										gItemData[m_ItemCount].tPopMenu = PopMenu_Blog_Me;
										gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Blog_Me);
									}
									else
									{
										gItemData[m_ItemCount].tPopMenu = PopMenu_Blog;
										gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Blog);
									}
								}
							}
							break;

						case RR_FeedUploadPhoto:
						case RR_FeedPublicUploadPhoto:
						case RR_FeedShareAlbum:
						case RR_FeedSharePhoto:
							{
								if(m_FeedMode == FEED_MODE_FRIENDHOME)
								{
									gItemData[m_ItemCount].tPopMenu = PopMenu_Photo_Friend;
									gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Photo_Friend);									
								}
								else
								{
									if(Response->Array[nIndex].actor_id == RenRenUserInfo.uid)
									{
										gItemData[m_ItemCount].tPopMenu = PopMenu_Photo_Me;
										gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Photo_Me);
									}
									else
									{
										gItemData[m_ItemCount].tPopMenu = PopMenu_Photo;
										gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Photo);								
									}
								}
							}
							break;							
						
						//其他更多类型
						case RR_FeedAddPublicWeb:
						case RR_FeedLinkShared:
						case RR_FeedLinkSharedForPage:
						default:
							{
								if(m_FeedMode == FEED_MODE_FRIENDHOME)
									{
									gItemData[m_ItemCount].tPopMenu = NULL;
									gItemData[m_ItemCount].nPopMenuCount = 0;										
									}
								else
									{
									gItemData[m_ItemCount].tPopMenu = PopMenu_Other;
									gItemData[m_ItemCount].nPopMenuCount = ARR_SIZE(PopMenu_Other);
									}
							}							
							break;
					}

					//操作图标
					//if(gItemData[m_ItemCount].nPopMenuCount >0)
					//	gItemData[m_ItemCount].nOptionID = CtrlAddItemToCoolBarList_MaskButton(this, lpItem, RR_FEED_OPTION_X, CoolBarDiffTop + RR_FEED_TYPE_LOGO_Y + RR_FEED_TYPE_LOGO_H, RR_FEED_OPTION_W, RR_FEED_OPTION_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_FeedOption), (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_FeedOption) );

					//好友还是公共主页
					if( strcmp(Response->Array[nIndex].actor_type, "page") == 0)
						gItemData[m_ItemCount].bPage = TRUE;
					
					//好友姓名
					TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)Response->Array[nIndex].name);
					Int32 nLabelFnameId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
					gItemData[m_ItemCount].FnameCtrlID = nLabelFnameId;//save fname ctrl ID
					TRichView* pFnameLabel = static_cast<TRichView*>(GetControlPtr(nLabelFnameId));
					objFontType.Create(FONT_NORMAL, FONT_NORMAL);
					int nWidth = GetShowAllStringWidth(pszFName,objFontType);
					
					TRectangle Rc_FnameLabel(ItemWidth, CoolBarDiffTop + RR_FEED_FNAME_Y, nWidth, RR_FEED_FNAME_H);
					pFnameLabel->SetBounds(&Rc_FnameLabel);
					pFnameLabel->SetFont(objFontType); 
					pFnameLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_HIGHTLINE);
					pFnameLabel->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_BLUE);
					
					pFnameLabel->SetWordWrapAttr(FALSE);
					pFnameLabel->SetTransparent(TRUE);
					pFnameLabel->SetEnabled(TRUE);
					pFnameLabel->SetScrollBarMode(CTL_SCL_MODE_NONE);
					pFnameLabel->SetMaxVisibleLines(1, TRUE);
					
					pFnameLabel->SetCaption(pszFName,FALSE);
					pFnameLabel->GetBounds(&Rc_Temp);
					
					ItemWidth = ItemWidth + Rc_Temp.Width()+ RR_FEED_ITEM_W_SPACE;				
				
					//message 或者 prefix	
					if(strcmp(Response->Array[nIndex].prefix,"")!=0)//prefix 字串不为空
					{
						TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->Array[nIndex].prefix); 					
					}
					else
					{
						if(strcmp(Response->Array[nIndex].message,"")!=0)
						{
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->Array[nIndex].message);
						}
						else
						{
							if( (Response->Array[nIndex].feed_type == RR_FeedProfilePictureUpdated) ||
								(Response->Array[nIndex].feed_type == RR_FeedProfilePictureUpdatedForPage) )
								TUString::StrCopy(pszIntro, TResource::LoadConstString(APP_RE_ID_STRING_ProfilePictureUpdated));
							//TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
						}
					}
					
					ItemHeight = RR_FEED_FNAME_Y;
					
					Int32 nLabeIntrolId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
					TLabel* pIntroLabel = static_cast<TLabel*>(GetControlPtr(nLabeIntrolId));
					pIntroLabel->SetAutoSize(FALSE);
					TRectangle Rc_IntroLabel(ItemWidth, ItemHeight + CoolBarDiffTop, SCR_W-ItemWidth-RR_FEED_ITEM_W_SPACE - RR_FEED_OFFSET_X, RR_FEED_INTRO_H+6);
					pIntroLabel->SetBounds(&Rc_IntroLabel);
					objFontType = pIntroLabel->GetFont();
					objFontType.Create(FONT_NORMAL, FONT_NORMAL);
					pIntroLabel->SetFont(objFontType);
					pIntroLabel->SetCaption(pszIntro,FALSE);
					pIntroLabel->GetBounds(&Rc_Temp);

					ItemHeight = ItemHeight + RR_FEED_INTRO_H + RR_FEED_ITEM_H_SPACE;

					//增加多行
					ItemHeight = _AddMoreLabel(lpItem,pIntroLabel,objFontType,pszIntro,ItemHeight,CoolBarDiffTop,Rc_Temp);						

					
					if(strcmp(Response->Array[nIndex].prefix,"")!=0)
					{
						//message部分，不可点击
						if(strcmp(Response->Array[nIndex].message,"")!=0)
						{
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->Array[nIndex].message);
							
							Int32 lableID = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pLabel = static_cast<TLabel*>(GetControlPtr(lableID));
							TRectangle Rc_Label(RR_FEED_CONTENT_X, ItemHeight + CoolBarDiffTop, RR_FEED_CONTENT_W, RR_FEED_CONTENT_H);
							pLabel->SetBounds(&Rc_Label);
							objFontType = pLabel->GetFont();
							objFontType.Create(FONT_NORMAL, FONT_NORMAL);
							pLabel->SetFont(objFontType); 
							pLabel->SetCaption(pszIntro,FALSE); 				
							pLabel->SetTransparent(TRUE);
							pLabel->SetEnabled(TRUE);
							
							pLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_BLACK);
							
							pLabel->SetTransparent(TRUE);					
							pLabel->GetBounds(&Rc_Temp);
							ShowAsShort(pLabel, pszIntro,objFontType);
																							
							ItemHeight = ItemHeight + Rc_Temp.Height() + RR_FEED_ITEM_H_SPACE;
							
						}

						//具体的标题，内容部分					
						if(strcmp(Response->Array[nIndex].title,"")!=0)
						{					
							//RR_FeedSharePhoto暂时不需要Title
							if(Response->Array[nIndex].feed_type != RR_FeedSharePhoto)
							{
								TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->Array[nIndex].title);

								gItemData[m_ItemCount].TitleCtrlID = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								TRichView* pTitle = static_cast<TRichView*>(GetControlPtr(gItemData[m_ItemCount].TitleCtrlID));
								TRectangle Rc_Content(RR_FEED_CONTENT_X, ItemHeight + CoolBarDiffTop, RR_FEED_CONTENT_W, RR_FEED_CONTENT_H);
								pTitle->SetBounds(&Rc_Content);
								objFontType = pTitle->GetFont();
								objFontType.Create(FONT_NORMAL, FONT_NORMAL);
								pTitle->SetFont(objFontType); 
								pTitle->SetCaption(pszIntro,FALSE); 				
								pTitle->SetTransparent(TRUE);

								pTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_HIGHTLINE);
								pTitle->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_BLUE);
								pTitle->SetEnabled(TRUE);					
								pTitle->SetWordWrapAttr(FALSE);
								pTitle->SetTransparent(TRUE);
								pTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pTitle->SetMaxVisibleLines(1, TRUE);
						
								pTitle->GetBounds(&Rc_Temp);
								ShowAsShort(pTitle, pszIntro,objFontType);
																								
								ItemHeight = ItemHeight + Rc_Temp.Height() + RR_FEED_ITEM_H_SPACE;
							}
						}
						
						if(strcmp(Response->Array[nIndex].description,"")!=0)
						{						
							//description, 不需要点击链接
							memset(pszIntro, 0, sizeof(pszIntro));
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->Array[nIndex].description);
							if(1)
							{
								gItemData[m_ItemCount].ContentCtrlID = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);//CTL_CLASS_RICHVIEW
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(gItemData[m_ItemCount].ContentCtrlID));//TRichView
								TRectangle Rc_Content(RR_FEED_CONTENT_X, ItemHeight + CoolBarDiffTop, RR_FEED_CONTENT_W, RR_FEED_CONTENT_H);
								pContent->SetBounds(&Rc_Content);
								objFontType = pContent->GetFont();
								objFontType.Create(FONT_MIDDLE, FONT_MIDDLE);
								pContent->SetFont(objFontType); 
								
								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(FALSE);
								
								pContent->SetWordWrapAttr(FALSE);
								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(FALSE);
								pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pContent->SetMaxVisibleLines(1, TRUE);
								
								pContent->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
								pContent->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);
								pContent->GetBounds(&Rc_Temp);
						
								ShowAsShort(pContent, pszIntro,objFontType);
						
								
								ItemHeight = ItemHeight + Rc_Temp.Height() + RR_FEED_ITEM_H_SPACE;								
							}
						}		
					}
					else
					{
						ItemHeight = ItemHeight + RR_FEED_ITEM_H_SPACE;
					}
					//类型图标TODO::高度判断
					CtrlAddItemToCoolBarList_Image(this, lpItem,RR_FEED_STIME_X, ItemHeight + CoolBarDiffTop, 16, 16, (TBitmap*)TBitmap::LoadResBitmap(GetShareTypeIcon(Response->Array[nIndex].feed_type)));
						
					//日期
					TUString::StrUtf8ToStrUnicode(pszDateTime, (const Char *)Response->Array[nIndex].update_time);
					Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 0, 0);
					TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));

					//if(ItemHeight < RR_FEED_ITEM_H_SPACE + RR_FEED_TYPE_LOGO_Y + RR_FEED_TYPE_LOGO_H )
					//ItemHeight = RR_FEED_ITEM_H_SPACE + RR_FEED_TYPE_LOGO_Y + RR_FEED_TYPE_LOGO_H;
					
					TRectangle Rc_Time(RR_FEED_STIME_X + 20, ItemHeight + CoolBarDiffTop, RR_FEED_STIME_W, RR_FEED_STIME_H);
					pTime->SetBounds(&Rc_Time);
					objFontType = pTime->GetFont();
					objFontType.Create(FONT_SMALL, FONT_SMALL);
					pTime->SetFont(objFontType); 
					pTime->SetCaption(pszDateTime,FALSE);
					pTime->SetColor(CTL_COLOR_TYPE_FORE, RGB(185,185,185));
					pTime->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);					
					pTime->GetBounds(&Rc_Temp);					
					ItemHeight = ItemHeight + Rc_Temp.Height() + RR_FEED_ITEM_H_SPACE;

					//Attachment 内容部分
					if(Response->Array[nIndex].nSize_attachment > 0)
					{
						int i = 0;
						const TBitmap * pDefaultBmp = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_feed_pic_thumbnail);

						int thumnailCount = (Response->Array[nIndex].nSize_attachment<RR_FEED_ITEM_THUMBNAIL_COUNT_MAX)?Response->Array[nIndex].nSize_attachment:RR_FEED_ITEM_THUMBNAIL_COUNT_MAX;
						for(i = 0; i < thumnailCount; i++)
						{
							if(strcmp(Response->Array[nIndex].attachment[i].media_type,"photo") == 0 || strcmp(Response->Array[nIndex].attachment[i].media_type,"album") == 0)
							{
								RenRenAPICommon_DownloadPhoto(Response->Array[nIndex].attachment[i].src, this->GetWindowHwndId(), RR_FEED_ITEM_COUNT_MAX + m_ItemCount*RR_FEED_ITEM_THUMBNAIL_COUNT_MAX + i);
								
								//附带图片
								TImage *pThumbnailImage = NULL;
								gItemData[m_ItemCount].ThumbnailCtrlID[i] = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
								pThumbnailImage = static_cast<TImage*>(GetControlPtr(gItemData[m_ItemCount].ThumbnailCtrlID[i]));
								
								if(pThumbnailImage != NULL)
								{
									TRectangle Rc_ThumbnailImage(RR_FEED_THUMBNAIL_X + i*(RR_FEED_THUMBNAIL_W+RR_FEED_ITEM_H_SPACE),ItemHeight + CoolBarDiffTop, RR_FEED_THUMBNAIL_W, RR_FEED_THUMBNAIL_H);
									pThumbnailImage->SetBounds(&Rc_ThumbnailImage);
									pThumbnailImage->SetBitmap(pDefaultBmp);
									
								}
								bHavePhoto = TRUE;
								gItemData[m_ItemCount].Thumbnail_media_id[i] = Response->Array[nIndex].attachment[i].media_id;
								gItemData[m_ItemCount].Thumbnail_owner_id[i] = Response->Array[nIndex].attachment[i].owner_id;
							}
						}

						if(bHavePhoto)
							ItemHeight = ItemHeight + RR_FEED_THUMBNAIL_H + RR_FEED_ITEM_H_SPACE;				
					}		

					//评论
					switch(Response->Array[nIndex].feed_type)
					{
						case RR_FeedUpdateStatus:
						case RR_FeedUpdateStatusForPage:
						case RR_FeedPostBlog:
						case RR_FeedPublicPostBlog:
						{
							if(Response->Array[nIndex].nSize_comments > 0)
							{
								//if(Response->Array[nIndex].comments[0].count > 0)
								{
									if(Response->Array[nIndex].comments[0].count > 99)
										TUString::StrCopy(pszIntro, TResource::LoadConstString(APP_RE_ID_STRING_CommentCountMuch));
									else
										TUString::StrPrintF(pszIntro, TResource::LoadConstString(APP_RE_ID_STRING_CommentCount), Response->Array[nIndex].comments[0].count);
							
									gItemData[m_ItemCount].CommentContCtrlID = CtrlAddItemToCoolBarList_CommentInfo(this,  lpItem, RR_FEED_COMMENTINFO_X, ItemHeight + CoolBarDiffTop, RR_FEED_COMMENTINFO_W, RR_FEED_COMMENTINFO_H, pszIntro);
									ItemHeight = ItemHeight + RR_FEED_COMMENTINFO_H + RR_FEED_ITEM_H_SPACE;
								}
							}

							break;
						}						
					}
					
					if(ItemHeight < RR_FEED_ITEM_H_SPACE + RR_FEED_TYPE_LOGO_Y + RR_FEED_TYPE_LOGO_H + RR_FEED_ITEM_H_SPACE )
						ItemHeight = RR_FEED_ITEM_H_SPACE + RR_FEED_TYPE_LOGO_Y + RR_FEED_TYPE_LOGO_H + RR_FEED_ITEM_H_SPACE;

					//操作图标
					if(gItemData[m_ItemCount].nPopMenuCount >0)
						gItemData[m_ItemCount].nOptionID = CtrlAddItemToCoolBarList_MaskButton(this, lpItem, RR_FEED_OPTION_X, (ItemHeight-RR_FEED_OPTION_H)/2, RR_FEED_OPTION_W, RR_FEED_OPTION_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_FeedOption), (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_FeedOption) );
					

					lpItem->SetHeight(ItemHeight);
					lpItem->SetValue(m_ItemCount);
					gItemData[m_ItemCount].RowItemValue = m_ItemCount;
					
				}
			}

			gItemData[m_ItemCount].actor_id = Response->Array[nIndex].actor_id;
			gItemData[m_ItemCount].source_id = Response->Array[nIndex].source_id;
			gItemData[m_ItemCount].post_id = Response->Array[nIndex].post_id;
			gItemData[m_ItemCount].feed_type = Response->Array[nIndex].feed_type;
			STRCPY_Ex(gItemData[m_ItemCount].message, Response->Array[nIndex].message);
			STRCPY_Ex(gItemData[m_ItemCount].href, Response->Array[nIndex].href);
			if(Response->Array[nIndex].nSize_attachment > 0)
			{
				gItemData[m_ItemCount].Attachment0_media_id = Response->Array[nIndex].attachment[0].media_id;
				gItemData[m_ItemCount].Attachment0_owner_id = Response->Array[nIndex].attachment[0].owner_id;
			}
			else
			{
				gItemData[m_ItemCount].Attachment0_media_id = 0;
				gItemData[m_ItemCount].Attachment0_owner_id = 0;
			}				
				
			nIndex++;
			m_ItemCount ++;
		}

		
		
		//如果还有,显示更多
		Set_Url_Params(RR_FeedGet, "uid", m_uid);
		char*  szCount = Get_Url_Params(RR_FeedGet, "count");
		char* sxPage = Get_Url_Params(RR_FeedGet, "page");
		int nCount = 0;
		int nPage = 0;
		nCount = atoi(szCount);
		nPage = atoi(sxPage);
		
		//if(Response->nArraySize >= nCount*nPage)
		if(Response->nArraySize >= nCount)
		{
			TBarListItem* lpItem = NULL;
			lpItem = lpRow->AppendItem();
			if (lpItem)  
			{
				m_MoreBtnID = CtrlAddItemToCoolBarList_Button(this, lpItem, RR_FEED_MORE_X,  RR_FEED_MORE_Y, RR_FEED_MORE_W, RR_FEED_MORE_H, (TUChar*)TResource::LoadConstString(APP_RE_ID_STRING_More));
				lpItem->SetHeight(RR_FEED_MORE_Y*2 + RR_FEED_MORE_H);
				lpItem->SetValue(-1);	//不参与删除操作
			}	
		}

	}
	else
	{
		//显示没有新鲜事了
		TBarListItem* lpItem = NULL;
		lpItem = lpRow->AppendItem();
		if (lpItem)  
		{
			CtrlAddItemToCoolBarList_Lable(this, lpItem, RR_FEED_INFO_X,  RR_FEED_INFO_Y, RR_FEED_INFO_W, FONT_NORMAL, (TUChar*)TResource::LoadConstString(APP_RE_ID_STRING_WithoutFeeds));
			lpItem->SetHeight(RR_FEED_INFO_H);
		}	
	}

	lpRowList->EndUpdate();
	
	if (pCoolBarList)
	{
		pCoolBarList->Update();
	}
	this->UpdateWindow(0);

	return TRUE;
}

/**
 * 手动切换第二行显示
 *
 * \param lpItem
 * \param pIntroLabel
 * \param objFontType
 * \param pChar
 * \param ItemHeight
 * \param CoolBarDiffTop
 * \param Rc_Temp
 *
 * \return 
 */
Int32 TFeedGetForm::_AddMoreLabel(TBarListItem* lpItem, TLabel* pIntroLabel, TFont objFontType,TUChar* pChar,Int32 ItemHeight, Int32 CoolBarDiffTop, TRectangle Rc_Temp)
{
	Int32 nStrLen = 0;
	Int32 nIntroLabelStrLen = 0;
	TUChar pszTemp[128] = {0};
	Int32 nItemHeight = ItemHeight; 
		
	nStrLen = TUString::StrLen(pChar);									  
	nIntroLabelStrLen = objFontType.WordWrapNoLF(pChar, Rc_Temp.Width());
	
	if (nIntroLabelStrLen < nStrLen)
	{
		//Add one more label to show
		TUString::StrNCopy(pszTemp,pChar,nIntroLabelStrLen);
		pIntroLabel->SetCaption(pszTemp,FALSE);
		
		Int32 nLabeIntrolIdM = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
		TLabel* pIntroLabelM = static_cast<TLabel*>(GetControlPtr(nLabeIntrolIdM));
		pIntroLabelM->SetAutoSize(FALSE);
		TRectangle Rc_IntroLabelM( RR_FEED_FNAME_X, ItemHeight + CoolBarDiffTop, SCR_W-RR_FEED_FNAME_X-RR_FEED_ITEM_W_SPACE-RR_FEED_OFFSET_X, RR_FEED_INTRO_H+6);
		pIntroLabelM->SetBounds(&Rc_IntroLabelM);
		objFontType = pIntroLabelM->GetFont();
		objFontType.Create(FONT_NORMAL, FONT_NORMAL);
		pIntroLabelM->SetFrameWidth(0);
		pIntroLabelM->SetFont(objFontType);
		pIntroLabelM->SetCaption(pChar+nIntroLabelStrLen,FALSE);
		pIntroLabelM->GetBounds(&Rc_Temp);
	
		nItemHeight = ItemHeight + RR_FEED_INTRO_H + RR_FEED_ITEM_H_SPACE;
		nItemHeight = _AddMoreLabel(lpItem,pIntroLabelM,objFontType,pChar+nIntroLabelStrLen,nItemHeight,CoolBarDiffTop,Rc_Temp);
	}
	else
	{
		//needn't add more label to show
	}

	return nItemHeight;
}

/** 处理CoolBarList的PreDraw事件，绘制CoolBarList的背景图
*
* \param pApp   TApplication指针
* \param pEvent EventType指针
* \return 是否已处理
*/
Boolean TFeedGetForm::_OnCoolBarListPreDraw(TApplication * pApp, EventType * pEvent)
{
    Boolean       bHandled = FALSE;
    CblstPreDrawEventType *pEraseEvent = reinterpret_cast< CblstPreDrawEventType* >(pEvent);
	TCoolBarList *pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(pEraseEvent->CoolBarListCtrlID));

    switch(pEraseEvent->CoolBarListCtrlID)
    {
    case APP_RE_ID_FeedGetForm_FeedCoolBarList:
        {
            TCtrlDC    dcCtrl(GetControlPtr(pEraseEvent->CoolBarListCtrlID));
            TRectangle rc(pEraseEvent->Rect);
            TRectangle ReNewRc;
			

            dcCtrl.BeginPaint();
            if (pEraseEvent && idsDown == pEraseEvent->Status)
            {	
            	ReNewRc.SetRect(rc.X()+1,rc.Y()+1,rc.Width()-2,rc.Height()-2);
				dcCtrl.DrawRectangleEx(&ReNewRc, 0, WHITE);
				
            }
			
			// 画边线
			Int32 nItemCount = 0;
			TBarRow *pRow = (TBarRow*)pEraseEvent->pRow;
			if(pRow)
			{
				nItemCount = pRow->Count();
			}

			if (nItemCount - 1 ==  ((TBarListItem*)pEraseEvent->pItem)->GetIndex())
			{
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.Right(), rc.Y(),RGB_COLOR_LIGHTGRAY);
				dcCtrl.DrawLineEx(rc.X(), rc.Bottom()-1, rc.Right(), rc.Bottom()-1, RGB_COLOR_LIGHTGRAY);
			}
			else
			{
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.Right(), rc.Y(),RGB_COLOR_LIGHTGRAY);
				//dcCtrl.DrawLineEx(rc.X(), rc.Bottom(), rc.Right(), rc.Bottom(), RGB_COLOR_LIGHTGRAY);
			}
			
            dcCtrl.EndPaint();    

            pEraseEvent->Result = 1;
            bHandled = TRUE;
        }
        break;
    }

    return bHandled;
}

/** CoolBarList上的控件处理事件
*
* \param pApp
* \param nCtrlID
* \return
*/
Boolean TFeedGetForm::_OnCoolCtrlSelected(TApplication * pApp, Int32 nCtrlID)
{
	Boolean bHandled = FALSE;
	
	if(nCtrlID)
	{
		for(int i=0; i<RR_FEED_ITEM_COUNT_MAX; i++)
		{
			if(i < m_ItemCount)
			{				
				char	szuid[64] = "";				
				sprintf(szuid, "%d", gItemData[i].actor_id);				 

				char	szSourceId[64] = {0}; 			
				DoubleToChar(gItemData[i].source_id, szSourceId);

				char szPostId[64] = {0};
				DoubleToChar(gItemData[i].post_id, szPostId);

				char mediaID[64] = {0};
				DoubleToChar(gItemData[i].Attachment0_media_id, mediaID);
								
				if( gItemData[i].FnameCtrlID == nCtrlID || gItemData[i].nLogoID == nCtrlID)//点击到姓名或者用户logo
				{	
					bIsPage = gItemData[i].bPage;						
					Set_Url_Params(RR_ProfileGetInfo, "uid", szuid);
					RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 
					bHandled = TRUE;
					break;
				}
				else if(gItemData[i].TitleCtrlID == nCtrlID)//点击到标题或者内容概要
				{	
					
					switch(gItemData[i].feed_type)
					{
						case RR_FeedPostBlog:
						case RR_FeedPublicPostBlog:
							{
								//显示日志详情
								Set_Url_Params(RR_BlogGet, "id", szSourceId);	
								Set_Url_Params(RR_BlogGet, "uid", szuid);
								RenRenAPICommon_Download(RR_BlogGet, this->GetWindowHwndId(), 0, 0);
							}
							break;
						case RR_FeedShareBlog:
							{
								sprintf(szuid, "%d", gItemData[i].Attachment0_owner_id);									
								Set_Url_Params(RR_BlogGet, "id", (char*)mediaID);	
								Set_Url_Params(RR_BlogGet, "uid", szuid);
								RenRenAPICommon_Download(RR_BlogGet, this->GetWindowHwndId(), 0, 0);
							}
							break;							

						case RR_FeedUploadPhoto:
						case RR_FeedPublicUploadPhoto:
							{
								//显示照片专辑列表				
								sprintf(szuid, "%d", gItemData[i].Attachment0_owner_id);	
								Set_Url_Params(RR_PhotosGet, "uid", szuid);
								Set_Url_Params(RR_PhotosGet, "aid", szSourceId);
								Set_Url_Params(RR_PhotosGet, "pids", "");
								Set_Url_Params(RR_PhotosGet, "password", "");
								RenRenAPICommon_Download(RR_PhotosGet, this->GetWindowHwndId(), 0, 0);				
								
							}
							break;							
						case RR_FeedSharePhoto:
							{
								//显示照片专辑列表				
								sprintf(szuid, "%d", gItemData[i].Attachment0_owner_id);	
								Set_Url_Params(RR_PhotosGet, "uid", szuid);
								Set_Url_Params(RR_PhotosGet, "aid", mediaID);
								Set_Url_Params(RR_PhotosGet, "pids", "");
								Set_Url_Params(RR_PhotosGet, "password", "");
								RenRenAPICommon_Download(RR_PhotosGet, this->GetWindowHwndId(), 0, 0);				
								
							}
							break;
						case RR_FeedShareAlbum:
							{
								//显示照片专辑列表				
								sprintf(szuid, "%d", gItemData[i].Attachment0_owner_id);	
								Set_Url_Params(RR_PhotosGet, "uid", szuid);
								Set_Url_Params(RR_PhotosGet, "aid", mediaID);
								Set_Url_Params(RR_PhotosGet, "pids", "");
								Set_Url_Params(RR_PhotosGet, "password", "");
								RenRenAPICommon_Download(RR_PhotosGet, this->GetWindowHwndId(), 0, 0);
							}
							break;
						
						case RR_FeedAddPublicWeb:
							{
								//显示相与公共主页对应的个人主页				
								//Set_Url_Params(RR_PagesGetInfo, "page_id", szSourceId);
								//RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0); 		
								bIsPage = TRUE;
								Set_Url_Params(RR_ProfileGetInfo, "uid", szSourceId);
								RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 								
							}
							break;
							
						case RR_FeedLinkShared:
						case RR_FeedLinkSharedForPage:
							{
								//显示链接对应的网页
								//重定向的目前webpanel会死机
								if(strlen(gItemData[i].href) > 0)
								{
									TWebPanelForm *pWin = new TWebPanelForm( pApp, TResource::LoadConstString(APP_RE_ID_STRING_RenRen), gItemData[i].href);

								}
							}
							break;							
						default:
							//其他更多类型
							break;
							
					}
					bHandled = TRUE;
					break;
				}
				else if(gItemData[i].CommentContCtrlID== nCtrlID)//点击到评论信息
				{	
					switch(gItemData[i].feed_type)
					{
						case RR_FeedUpdateStatus:
						case RR_FeedUpdateStatusForPage:
							{
							Set_Url_Params(RR_StatusGetComment, "status_id", szSourceId);
							Set_Url_Params(RR_StatusGetComment, "owner_id", szuid);

							Set_Url_Params(RR_StatusGetComment, "order", "1");
							RenRenAPICommon_Download(RR_StatusGetComment, this->GetWindowHwndId(), 0, 0);							
							}
							break;
						case RR_FeedPostBlog:
						case RR_FeedPublicPostBlog:
							{
								//显示日志详情
								Set_Url_Params(RR_BlogGetComments, "id", szSourceId);	
								Set_Url_Params(RR_BlogGetComments, "uid", szuid);
								Set_Url_Params(RR_BlogGetComments, "page", "1");
								RenRenAPICommon_Download(RR_BlogGetComments, this->GetWindowHwndId(), 0, 0);
							}
							break;
						case RR_FeedShareBlog:
							{
								sprintf(szuid, "%d", gItemData[i].Attachment0_owner_id);									
								Set_Url_Params(RR_BlogGetComments, "id", (char*)mediaID);	
								Set_Url_Params(RR_BlogGetComments, "uid", szuid);
								Set_Url_Params(RR_BlogGetComments, "page", "1");
								RenRenAPICommon_Download(RR_BlogGetComments, this->GetWindowHwndId(), 0, 0);
							}
							break;							

						case RR_FeedUploadPhoto:
						case RR_FeedPublicUploadPhoto:
						case RR_FeedShareAlbum:
						case RR_FeedSharePhoto:
							{
								//Photo暂时没有评论
								#if 0
								Set_Url_Params(RR_PhotosGet, "uid", szuid);
								Set_Url_Params(RR_PhotosGet, "aid", szSourceId);
								Set_Url_Params(RR_PhotosGet, "pids", "");
								Set_Url_Params(RR_PhotosGet, "page", "1");
								RenRenAPICommon_Download(RR_PhotosGetComments, this->GetWindowHwndId(), 0, 0);
								#endif
								
							}
							break;
						
						case RR_FeedAddPublicWeb:
							{
								//暂时没有评论
								#if 0
								Set_Url_Params(RR_PagesGetInfo, "page_id", szSourceId);
								RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0); 								
								#endif
							}
							break;
							
						case RR_FeedLinkShared:
						case RR_FeedLinkSharedForPage:
							//显示链接对应的网页
							break;							
						default:
							//其他更多类型
							break;
							
					}
					bHandled = TRUE;
					break;
				}
				else if(gItemData[i].nOptionID == nCtrlID)//点击操作
				{	
					Int32  nRetPopBoxID = 0;
					TPopupBox* pPopBox = new TPopupBox(pApp, TResource::LoadConstString(APP_RE_ID_STRING_Cancel), NULL);
					
					for(int j=0; j<gItemData[i].nPopMenuCount; j++)
					{
						//如果所是删除,需要改为红色背景
						if( (gItemData[i].tPopMenu[j].nOptionID == POP_OPTION_SET_READ) ||
						     (gItemData[i].tPopMenu[j].nOptionID == POP_OPTION_DELETE_ME) )
						{
							pPopBox->AddItem (gItemData[i].tPopMenu[j].nOptionID, TResource::LoadConstString(gItemData[i].tPopMenu[j].nStrID), TG3_POPUPBOX_ITEM_TYPE_WARNNING);
						}
						else
						{
							pPopBox->AddItem (gItemData[i].tPopMenu[j].nOptionID, TResource::LoadConstString(gItemData[i].tPopMenu[j].nStrID), TG3_POPUPBOX_ITEM_TYPE_NORMAL);
						}							
					}
					nRetPopBoxID = pPopBox->Popup();
					delete pPopBox;
					pPopBox = NULL;

					switch(nRetPopBoxID)
					{
						case POP_OPTION_SHARE:
							{
								Set_Url_Params(RR_SharePublish, "type", GetShareTypeStr(gItemData[i].feed_type));
								Set_Url_Params(RR_SharePublish, "share_data", "{\"link\":\"\",\"pic\":\"\",\"title\":\"\",\"summary\":\"\",\"comment\":\"\"}");
								//如果是分享照片,id要从attachement中获得
								if(strcmp(GetShareTypeStr(gItemData[i].feed_type), SHARE_TYPE_PHOTO) == 0 )
									{								
									Set_Url_Params(RR_SharePublish, "id", mediaID);
									}
								else
									{
									Set_Url_Params(RR_SharePublish, "id", szSourceId);
									}
								Set_Url_Params(RR_SharePublish, "uid", szuid);
	
								RenRenAPICommon_Download(RR_SharePublish, this->GetWindowHwndId(), 0, 0);
							}
							break;
						case POP_OPTION_TRANSMIT:
							{
								Set_Url_Params(RR_StatusSet, "status", gItemData[i].message);
								Set_Url_Params(RR_StatusSet, "forward_id", szSourceId);
								Set_Url_Params(RR_StatusSet, "forward_owner", szuid);
								RenRenAPICommon_Download(RR_StatusSet, this->GetWindowHwndId(), 0, 0);
							}
							break;
						case POP_OPTION_SET_READ:
							{
								Set_Url_Params(RR_FeedRead, "fid", szPostId);
								//0表示好友动态新鲜事，1表示当前用户动态新鲜事
								Set_Url_Params(RR_FeedRead, "type", "0");
								RenRenAPICommon_Download(RR_FeedRead, this->GetWindowHwndId(), 0, gItemData[i].RowItemValue);
							}
							break;
						case POP_OPTION_DELETE_ME:
							{
								Set_Url_Params(RR_FeedRead, "fid", szPostId);
								//0表示好友动态新鲜事，1表示当前用户动态新鲜事
								//这里有个理解误区，"当前用户"不是指me，而是个人页面
								//所以,新鲜事页面即使是me的条目也要传入0
								if(m_FeedMode == FEED_MODE_NEW)
									Set_Url_Params(RR_FeedRead, "type", "0");
								else
									Set_Url_Params(RR_FeedRead, "type", "1");
								RenRenAPICommon_Download(RR_FeedRead, this->GetWindowHwndId(), 0, gItemData[i].RowItemValue);
							}
							break;
						case POP_OPTION_REPLY_STATUS:
							{
								PostNotifyMsgDataType in_msgData = {0};

								STRCPY_Ex(in_msgData.pszReceiver, szuid);		//利用receiver传递szuid
								STRCPY_Ex(in_msgData.pszEditTitle, szSourceId);	//利用title传递status_id
								in_msgData.nCtrlId = 0;
								in_msgData.nHwndId = this->GetWindowHwndId();
								
								in_msgData.nAppTitleStrID = APP_RE_ID_STRING_WriteComment; 
								in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_Publish;
								
								in_msgData.nContentEditMaxChars = RENREN_LENGTH_BLOG_COMMENT;
								
								in_msgData.IsExpressionBtn = TRUE;
								in_msgData.nParam = RR_StatusAddComment;

								TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);			
								bHandled = TRUE;	
								break;
							}
						default:
							break;
					}
					//隐藏条目操作
					#if 0
					TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FeedGetForm_FeedCoolBarList));
					TBarRowList *lpRowList = NULL;
					TBarRow *lpRow = NULL;
					TBarListItem* lpItem = NULL;

					lpRowList = pCoolBarList->Rows();
					lpRow = lpRowList->FirstRow();
					//如果有QuickBar, 需要下移一行
					if(bHaveQuickBar)
						lpItem = lpRow->GetItem(i+1);
					else
						lpItem = lpRow->GetItem(i);
					lpItem->SetVisible(FALSE, FALSE);
					#endif
					
					//if(nRetPopBoxID == 1)				
					#if 0				
					char	srcid[64] = {0}; 			
					DoubleToChar(Response->Array[i].source_id, srcid);
					
					switch(Response->Array[i].feed_type)
					{
						case RR_FeedUpdateStatus:
						case RR_FeedUpdateStatusForPage:
							{
							Set_Url_Params(RR_StatusGetComment, "status_id", srcid);
							Set_Url_Params(RR_StatusGetComment, "owner_id", szuid);

							Set_Url_Params(RR_StatusGetComment, "order", "1");
							RenRenAPICommon_Download(RR_StatusGetComment, this->GetWindowHwndId(), 0, 0);							
							}
							break;
						case RR_FeedPostBlog:
						case RR_FeedPublicPostBlog:
							{
								//显示日志详情
								Set_Url_Params(RR_BlogGetComments, "id", srcid);	
								Set_Url_Params(RR_BlogGetComments, "uid", szuid);
								Set_Url_Params(RR_BlogGetComments, "page", "1");
								RenRenAPICommon_Download(RR_BlogGetComments, this->GetWindowHwndId(), 0, 0);
							}
							break;
						case RR_FeedShareBlog:
							{
								char mediaID[64] = {0};
								DoubleToChar(Response->Array[i].attachment[0].media_id, mediaID);
								
								sprintf(szuid, "%d", Response->Array[i].attachment[0].owner_id);									
								Set_Url_Params(RR_BlogGetComments, "id", (char*)mediaID);	
								Set_Url_Params(RR_BlogGetComments, "uid", szuid);
								Set_Url_Params(RR_BlogGetComments, "page", "1");
								RenRenAPICommon_Download(RR_BlogGetComments, this->GetWindowHwndId(), 0, 0);
							}
							break;							

						case RR_FeedUploadPhoto:
						case RR_FeedPublicUploadPhoto:
						case RR_FeedShareAlbum:
						case RR_FeedSharePhoto:
							{
								//Photo暂时没有评论
								#if 0
								Set_Url_Params(RR_PhotosGet, "uid", szuid);
								Set_Url_Params(RR_PhotosGet, "aid", srcid);
								Set_Url_Params(RR_PhotosGet, "pids", "");
								Set_Url_Params(RR_PhotosGet, "page", "1");
								RenRenAPICommon_Download(RR_PhotosGetComments, this->GetWindowHwndId(), 0, 0);
								#endif
								
							}
							break;
						
						case RR_FeedAddPublicWeb:
							{
								//暂时没有评论
								#if 0
								Set_Url_Params(RR_PagesGetInfo, "page_id", srcid);
								RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0); 								
								#endif
							}
							break;
							
						case RR_FeedLinkShared:
						case RR_FeedLinkSharedForPage:
							//显示链接对应的网页
							break;							
						default:
							//其他更多类型
							break;
							
					}
					#endif
					bHandled = TRUE;
					break;
				}				
				else
				{	
					//缩略图
					for(int j = 0; j < RR_FEED_ITEM_THUMBNAIL_COUNT_MAX; j++ )
					{
						if(gItemData[i].ThumbnailCtrlID[j] == nCtrlID)
						{
							char mediaID[64] = {0};
							DoubleToChar(gItemData[i].Thumbnail_media_id[j], mediaID);
							
							switch(gItemData[i].feed_type)
							{
								case RR_FeedUploadPhoto:
								case RR_FeedPublicUploadPhoto:
									{
										//显示图片详情数据设置
										Set_Url_Params(RR_PhotosGet, "pids", (char*)mediaID);
										Set_Url_Params(RR_PhotosGet, "uid", szuid);
										Set_Url_Params(RR_PhotosGet, "aid", "");
										Set_Url_Params(RR_PhotosGet, "password", "");
										RenRenAPICommon_Download(RR_PhotosGet, this->GetWindowHwndId(), 0, 0);				
									}
									break;
								case RR_FeedSharePhoto:
									{
										//显示图片详情数据设置
										//照片共享的uid需要传被共享人的uid
										sprintf(szuid, "%d", gItemData[i].Thumbnail_owner_id[j]);	
										Set_Url_Params(RR_PhotosGet, "pids", (char*)mediaID);
										Set_Url_Params(RR_PhotosGet, "uid", szuid);
										Set_Url_Params(RR_PhotosGet, "aid", "");
										Set_Url_Params(RR_PhotosGet, "password", "");
										RenRenAPICommon_Download(RR_PhotosGet, this->GetWindowHwndId(), 0, 0);				
									}
									break;
								case RR_FeedShareAlbum:
									{
										//显示照片专辑列表				
										sprintf(szuid, "%d", gItemData[i].Attachment0_owner_id);	
										Set_Url_Params(RR_PhotosGet, "uid", szuid);
										Set_Url_Params(RR_PhotosGet, "aid", mediaID);
										Set_Url_Params(RR_PhotosGet, "pids", "");
										Set_Url_Params(RR_PhotosGet, "password", "");
										RenRenAPICommon_Download(RR_PhotosGet, this->GetWindowHwndId(), 0, 0);
										#if 0
										char ownerID[64] = {0};
										DoubleToChar(gItemData[i].Thumbnail_owner_id[j], ownerID);
										
										Set_Url_Params(RR_PhotosGetAlbums, "uid", (char*)ownerID);
										RenRenAPICommon_Download(RR_PhotosGetAlbums, this->GetWindowHwndId(), 0, FORM_MODE_NORMAL);
										#endif
									}
									break;
									
								case RR_FeedAddPublicWeb:
									{
										//显示相与公共主页对应的个人主页				
				
										//Set_Url_Params(RR_FeedGet, "uid", srcid);//个人主页
										//RenRenAPICommon_Download(RR_FeedGet, this->GetWindowHwndId(), 0, 0);				
										//Set_Url_Params(RR_PagesGetInfo, "page_id", szSourceId);
										//RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0);
										bIsPage = TRUE;
										Set_Url_Params(RR_ProfileGetInfo, "uid", szSourceId);
										RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0);										
									}
									break;
																
								default:
									//其他更多类型
									break;
									
							}							
							bHandled = TRUE;
							break;								
						}						
					}
				}			
			}
		}
#if 0
		if(bHandled == TRUE)
		{
			//取消之前选中的
			TRichView* tPreRichView =static_cast< TRichView* >(GetControlPtr(PreSelectRichViewID));
			if(tPreRichView)
			{
				TRectangle rc;
				
				tPreRichView->GetBounds(&rc);
				tPreRichView->SetSelectionPos(0,0);
				//tPreRichView->SetFocusStatus(FALSE);
			}		

			//点击后显示选中
			TRichView* tNewRichView =static_cast< TRichView* >(GetControlPtr(nCtrlID));
			if(tNewRichView)
			{
				TRectangle rc;
				
				tNewRichView->GetBounds(&rc);
				tNewRichView->SetSelectionPos(0,rc.Width());
				PreSelectRichViewID = nCtrlID;
			}
		}
#endif		
	}

	return bHandled;
}

/**
 * 类型编码转换
 *
 * \param nShareType
 *
 * \return 
 */
char* GetShareTypeStr(int nShareType)
{
	switch(nShareType)
	{
		case RR_FeedPostBlog:
		case RR_FeedPublicPostBlog:
		case RR_FeedShareBlog:
			return SHARE_TYPE_BLOG;

		case RR_FeedUploadPhoto:
		case RR_FeedPublicUploadPhoto:
		case RR_FeedSharePhoto:
			return SHARE_TYPE_PHOTO;
				
		case RR_FeedShareAlbum:
			return SHARE_TYPE_ALBUM;
		
		case RR_FeedAddPublicWeb:
		case RR_FeedLinkShared:
		case RR_FeedLinkSharedForPage:
			return SHARE_TYPE_LINK;

		case RR_FeedUpdateStatus:
		case RR_FeedUpdateStatusForPage:
		default:
			break;
	}

	return NULL;
}

/**
 * 获取类型图标
 *
 * \param nShareType
 *
 * \return 
 */
Int32 GetShareTypeIcon(int nShareType)
{
	switch(nShareType)
	{
		case RR_FeedPostBlog:
		case RR_FeedPublicPostBlog:
		case RR_FeedShareBlog:
			return APP_RE_ID_BITMAP_FeedType_blog;

		case RR_FeedUploadPhoto:
		case RR_FeedPublicUploadPhoto:
		case RR_FeedSharePhoto:
		case RR_FeedShareAlbum:
			return APP_RE_ID_BITMAP_FeedType_photo;
				
		case RR_FeedAddPublicWeb:
		case RR_FeedLinkShared:
		case RR_FeedLinkSharedForPage:
			return APP_RE_ID_BITMAP_FeedType_share;

		case RR_FeedUpdateStatus:
		case RR_FeedUpdateStatusForPage:
			return APP_RE_ID_BITMAP_FeedType_status;

		default:
			return APP_RE_ID_BITMAP_FeedType_blog;
	}

	return 0;
}

/**
 *从profile中读取大头像, 如果本地没有则进行下载
 *
 * \param pApp
 * \param ResponseInfoPhoto
 *
 * \return 
 */
Boolean TFeedGetForm::_UpdateProfilePhoto(TApplication* pApp, tResponseUsersGetInfo* ResponseInfoPhoto)
{

	if(ResponseInfoPhoto == NULL)
		return FALSE;
	
	if(ResponseInfoPhoto->nArraySize > 0)
	{
		TBitmap* pDownLoadBitmap = NULL;
		pDownLoadBitmap = LoadImgByUrl(ResponseInfoPhoto->Array[0].headurl);						
		if(pDownLoadBitmap == NULL)
		{
			RenRenAPICommon_DownloadPhoto(ResponseInfoPhoto->Array[0].headurl, this->GetWindowHwndId(), FEED_PROFILE_IMAGE_INDEX);	
		}
		else
		{
			TMaskButton* pLogo = NULL;
			pLogo = static_cast<TMaskButton*>(GetControlPtr(m_ProfileImageID));
			if(pLogo)
			{
				TRectangle rc;
				TBitmap * pProfileImageTmp = NULL;	//Profile的头像

				pLogo->GetBounds(&rc);
				
				pProfileImageTmp = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
				pProfileImageTmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
				pLogo->SetCaption(TUSTR_Re_NULL,0,0);
				pLogo->SetImage(pProfileImageTmp, (rc.Width()-pProfileImageTmp->GetWidth())/2, (rc.Height()-pProfileImageTmp->GetHeight())/2);
				pLogo->Draw();

				//如果先Desroy,则会崩溃,很奇怪,原因不明,暂时这么处理
				if( pProfileImage != NULL)
				{
					pProfileImage->Destroy();
					pProfileImage = NULL; 							
				}
				pProfileImage = pProfileImageTmp;
				
			}

			//释放图片
			pDownLoadBitmap->Destroy();
			pDownLoadBitmap = NULL; 	
		}
	}					

	return TRUE;
}
