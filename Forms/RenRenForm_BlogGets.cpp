/*!
*@FileName: RenRenForm_BlogGets.cpp
*@Author: zengying@GoZone
*@Date: 2010-12-24
*@Brief: 日志列表Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_BlogGets.h"

#define FEED_PROFILE_IMAGE_INDEX		0xABCDEF

#if(LCD_SIZE == LCD_HVGA )
#define COOLBAR_ITEM_HEIGHT			(80)
#define RR_BLOG_ITEM_TITLE_W			(280)
#elif(LCD_SIZE == LCD_WVGA )
#define COOLBAR_ITEM_HEIGHT			(100)
#define RR_BLOG_ITEM_TITLE_W			(420)
#endif

#define RR_BLOG_ITEM_WIDGET_SPACE	(5)
#define RR_BLOG_ITEM_LINE_SPACE		(LINE_SPACE)

#define RR_BLOG_ITEM_TITLE_X			(10)
#define RR_BLOG_ITEM_TITLE_Y			(10)
#define RR_BLOG_ITEM_TITLE_H			(FONT_MIDDLE + 6)

#define RR_BLOG_ITEM_CONTENT_X		(RR_BLOG_ITEM_TITLE_X)
#define RR_BLOG_ITEM_CONTENT_Y		(RR_BLOG_ITEM_TITLE_Y + RR_BLOG_ITEM_TITLE_H + RR_BLOG_ITEM_LINE_SPACE)
#define RR_BLOG_ITEM_CONTENT_W		(RR_BLOG_ITEM_TITLE_W)
#define RR_BLOG_ITEM_CONTENT_H		(FONT_MIDDLE + 4)

#define RR_BLOG_ITEM_TIME_X			(RR_BLOG_ITEM_TITLE_X)
#define RR_BLOG_ITEM_TIME_Y			(RR_BLOG_ITEM_CONTENT_Y + RR_BLOG_ITEM_CONTENT_H + RR_BLOG_ITEM_LINE_SPACE)
#define RR_BLOG_ITEM_TIME_W			(250)
#define RR_BLOG_ITEM_TIME_H			(FONT_SMALL + 2)


//加密图标大小
#define LOCK_W		(12)
#define LOCK_H		(12)

//大头像坐标
#define RR_HEAD_X				(10)
#define RR_HEAD_Y				(10)
#define RR_HEAD_W				(100)
#define RR_HEAD_H				(100)

//姓名 坐标
#define RR_NAME_X				(RR_HEAD_X + RR_HEAD_W + 10)
#define RR_NAME_Y				(10)
#define RR_NAME_W				(SCR_W - RR_NAME_X - 10)
#define RR_NAME_H				(FONT_NORMAL + 4)

//Status 坐标
#define RR_STATUS_X				(RR_NAME_X)
#define RR_STATUS_Y				(RR_NAME_Y + RR_NAME_H + 5)
#define RR_STATUS_W			(RR_NAME_W)
#define RR_STATUS_H				(20)

//编辑框的参数
#define EDIT_PARAM_NEW_BLOG		(1)
#define EDIT_PARAM_PASSWORD	(2)
// 构造函数
TBlogGetsForm::TBlogGetsForm(TApplication* pApp, eFormMode nFormMode, Boolean bNew):TWindow(pApp)
{
	Response = NULL;
	m_uid = Get_Url_Params(RR_BlogGets, "uid");
	
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	m_ProfileImageID = -1;
	pProfileImage = NULL;
	
	m_FormMode = nFormMode;
	memset((void*)&BottomTabCtrID, 0x0, sizeof(BottomTabCtrID));
	Create(APP_RE_ID_CommonListForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);		
}

// 析构函数
TBlogGetsForm::~TBlogGetsForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	if( pProfileImage != NULL)
	{
		pProfileImage->Destroy();
		pProfileImage = NULL;								
	}
	
	if(Response)
	{
		delete Response;
	}
}

// 窗口事件处理
Boolean TBlogGetsForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);

				if(m_FormMode ==FORM_MODE_MYHOME)
					dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Bottom_btn_bg), 0, BOTTOM_TAB_Y, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);	
				
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
			
			//下载完成事件
			case MSG_DL_THREAD_NOTIFY:
				{
					NotifyMsgDataType notifyData;
					Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						
			
					bHandled = TRUE;
					switch(notifyData.nAccessType)
					{

						case RR_PhotoDownload:
						{	
							//下载完后更新对应的图片
							TBitmap* pDownLoadBitmap = NULL;
							pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);

							if(pDownLoadBitmap)
							{
								if(notifyData.nParam == FEED_PROFILE_IMAGE_INDEX)
								{
									TMaskButton* pLogo = NULL;
									pLogo = static_cast<TMaskButton*>(GetControlPtr(m_ProfileImageID));
									if(pLogo)
									{
										TRectangle rc;
										
										pLogo->GetBounds(&rc);
										if( pProfileImage != NULL)
										{
											pProfileImage->Destroy();
											pProfileImage = NULL; 							
										}
										
										pProfileImage = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
										pProfileImage->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
										pLogo->SetCaption(TUSTR_Re_NULL,0,0);
										pLogo->SetImage(pProfileImage, (rc.Width()-pProfileImage->GetWidth())/2, (rc.Height()-pProfileImage->GetHeight())/2);
										pLogo->Draw();
									}
									
								}

								//释放图片
								pDownLoadBitmap->Destroy();
								pDownLoadBitmap = NULL; 						
							}						
							break;
						}
					
						case RR_BlogAddBlog:
						{
							TUChar errorinfo[32] = {0};
							if(RenRenAPI_JsonParse_bSuccess((RR_AccessType)notifyData.nAccessType,errorinfo)==0)
							{
								pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success),TResource::LoadConstString(APP_RE_ID_STRING_Publish),WMB_OK); 	
								RenRenAPICommon_Download(RR_BlogGets, this->GetWindowHwndId(), 0, m_FormMode);	
							}					
							else
							{
								pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Fail),TResource::LoadConstString(APP_RE_ID_STRING_Publish),WMB_OK);	
							}
							break;
						}

						case RR_UsersGetInfoPhoto:
							{
								tResponseUsersGetInfo* Response = NULL;
								RenRenAPI_JsonParse(RR_UsersGetInfoPhoto, (void **)&Response);
								if(Response)
								{
									_UpdateProfilePhoto(pApp, Response);
									delete Response;
									Response = NULL;
								}
							}
						break;
						default:
							break;
					}
					break;
				}
				case MSG_POST_THREAD_NOTIFY:
				{
						PostNotifyMsgDataType notifyData;
						Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

						if(notifyData.nParam == EDIT_PARAM_NEW_BLOG)
						{
							Set_Url_Params(RR_BlogAddBlog, "title", (char*)notifyData.pszEditTitle);
							Set_Url_Params(RR_BlogAddBlog, "content", (char*)notifyData.pszEditContent);				
						
							RenRenAPICommon_Download(RR_BlogAddBlog, this->GetWindowHwndId(), 0, 0);		
						}
						else if(notifyData.nParam == EDIT_PARAM_PASSWORD)
						{
							Set_Url_Params(RR_BlogGet, "password", (char*)notifyData.pszEditContent);	
							RenRenAPICommon_Download(RR_BlogGet, this->GetWindowHwndId(), 0, 0);
						}
						bHandled = TRUE;
					break;
				}
			

		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TBlogGetsForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;	
	Int32 Height_Panel = 0;		//Panel高度

	//设置panel高度
	TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonPanel));
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));	

	//根据底部是否有tab调整panel的高度
	if(pTPanel)
	{
		TRectangle rect;
		
		Height_Panel = SCR_H - STATUSBAR_H - TITLEBAR_H;
		if(m_FormMode == FORM_MODE_MYHOME)
			Height_Panel -= BOTTOM_TAB_H;
			
		pTPanel->GetBounds(&rect);
		rect.SetHeight(Height_Panel);
		pTPanel->SetBounds(&rect);
	}
	
	if(m_FormMode == FORM_MODE_MYHOME)
		CreateProfileBottomTab(this, &BottomTabCtrID, 3);

	//显示个人信息
	if(m_FormMode == FORM_MODE_MYHOME)
	{
		Int32 Height_Top = 0;			//CoolBarList上面信息的高度
		Int32 Height_CoolBarList = 0;	//CoolBarList高度	
		tResponseProfile* ResponseProfile;
		iRet = RenRenAPI_JsonParse(RR_ProfileGetInfo, (void **)&ResponseProfile);
		if(ResponseProfile != NULL)
		{
			//头像
			TBitmap* pDownLoadBitmap = NULL;
			pDownLoadBitmap = LoadImgByUrl(ResponseProfile->headurl);			
			const TBitmap * pImageDeault = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_DefaultLarge);
			const TBitmap * pBackImage = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_headmask_large);
			if(pDownLoadBitmap != NULL)
			{
				//需要做放大
				pProfileImage = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
				pProfileImage->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));				
				m_ProfileImageID = CtrlAddItemToPanel_MaskButton(this, pTPanel, RR_HEAD_X, RR_HEAD_Y, RR_HEAD_W, RR_HEAD_H, (TBitmap*)pProfileImage, (TBitmap*)pProfileImage, (TBitmap*)pBackImage );	
				this->DisableControl(m_ProfileImageID);
				
				//释放图片
				pDownLoadBitmap->Destroy();
				pDownLoadBitmap = NULL; 						
			}
			else
			{
				//RenRenAPICommon_DownloadPhoto(ResponseProfile->headurl, this->GetWindowHwndId(), FEED_PROFILE_IMAGE_INDEX);	
				m_ProfileImageID = CtrlAddItemToPanel_MaskButton(this, pTPanel, RR_HEAD_X, RR_HEAD_Y, RR_HEAD_W, RR_HEAD_H, (TBitmap*)pImageDeault, (TBitmap*)pImageDeault, (TBitmap*)pBackImage );
				this->DisableControl(m_ProfileImageID);
			}
			//下载大头像
			tResponseUsersGetInfo* ResponseUserInfoPhoto = NULL;
			RenRenAPI_JsonParse(RR_UsersGetInfoPhoto, (void **)&ResponseUserInfoPhoto);
			if(ResponseUserInfoPhoto)
			{
				if( (ResponseUserInfoPhoto->nArraySize > 0) && (ResponseUserInfoPhoto->Array[0].uid == ResponseProfile->uid) )
				{
					_UpdateProfilePhoto(pApp, ResponseUserInfoPhoto);
				}
				else
				{
					Set_Url_Params(RR_UsersGetInfoPhoto, "uids", m_uid);
					RenRenAPICommon_Download(RR_UsersGetInfoPhoto, this->GetWindowHwndId(), 0, 0); 
				}					
							
				delete ResponseUserInfoPhoto;
				ResponseUserInfoPhoto = NULL;							
			}
			else
			{
				Set_Url_Params(RR_UsersGetInfoPhoto, "uids", m_uid);
				RenRenAPICommon_Download(RR_UsersGetInfoPhoto, this->GetWindowHwndId(), 0, 0); 
			}

			
			//姓名
			TUChar  pszFName[64] = {0};
			TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)ResponseProfile->name);
			CtrlAddItemToPanel_Label(this, pTPanel, RR_NAME_X, RR_NAME_Y, 0, FONT_NORMAL, pszFName, RGB_COLOR_BLACK);
			Height_Top += (RR_NAME_Y+RR_NAME_H);
			//状态
			TUChar  pszStatus[1024] = {0};
			Coord nHeight_RichView = 0;
			if(ResponseProfile->nSize_status>0)
			{
				TUString::StrUtf8ToStrUnicode(pszStatus, (const Char *)ResponseProfile->status[0].content);
				CtrlAddItemToPanel_RichView(this, pTPanel, RR_STATUS_X, RR_STATUS_Y, RR_STATUS_W, &nHeight_RichView, FONT_MIDDLE, pszStatus, RGB_COLOR_BLACK);
			}

			//位置容错调整
			if(nHeight_RichView > (RR_HEAD_H-RR_NAME_H) )
				Height_Top += nHeight_RichView;
			else
				Height_Top += (RR_HEAD_H- RR_NAME_H);

			//设置CoolBarList起始位置
			if(pCoolBarList)
			{
				TRectangle rect;
				Int32 nY = Height_Top;
					
				pCoolBarList->GetBounds(&rect);
				rect.SetY(nY);
				pCoolBarList->SetBounds(&rect);
			}
		
			delete ResponseProfile;
			ResponseProfile = NULL;
		}
	}
	
	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_BlogGets, (void **)&Response);	
	if(Response)
	{
		Int32 nIndex = 0;
		int nCoolMaxItem = (Response->nSize_blogs< RR_BLOG_ITEM_NUM_MAX)?Response->nSize_blogs:RR_BLOG_ITEM_NUM_MAX;	//cool最大item值
		
		TCoolBarList*	pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));
		if (pCoolBarList)
		{
			
			TBarRowList*	lpRowList = NULL;
			TBarRow*		lpRow = NULL;
			TBarListItem* lpItem = NULL;

			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();

				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();

				//数量统计
				{
					TUChar pszCount[64] = {0};
					int nTotal = 0;
					nTotal = atoi(Response->total);
					TUString::StrPrintF(pszCount, TResource::LoadConstString(APP_RE_ID_STRING_BlogCount), nTotal);
						
					TBarListItem* lpItemCount = NULL;
					lpItemCount = lpRow->AppendItem();
					lpItemCount->SetCaption(pszCount);
					lpItemCount->SetEnabled(FALSE);
				}
				
				while( nIndex < nCoolMaxItem)
				{
					if(lpRow)
					{
						lpItem = lpRow->AppendItem();
						if (lpItem)
						{
							TFont objFontType;
							TUChar pszTitle[32+256] = {0};
							TUChar pszContent[1024] = {0};
							
							TUChar pszTemp[256] = {0};	
							TUChar pszDateTime[32] = {0};

							Int32 ItemHeight = 0;
							lpItem->SetTitle(NULL);
							lpItem->SetCaption(NULL);				
							lpItem->SetIndicatorType(itDefault);

							TUString::StrUtf8ToStrUnicode(pszTitle , (const Char *)Response->blogs[nIndex].title);
							//是否加密
							if(Response->blogs[nIndex].visable == 4)
							{
								CtrlAddItemToCoolBarList_Image(this, lpItem, RR_BLOG_ITEM_TITLE_X, RR_BLOG_ITEM_TITLE_Y+(RR_BLOG_ITEM_TITLE_H - LOCK_H)/2, LOCK_W, LOCK_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_locked));
								CtrlAddItemToCoolBarList_Lable(this, lpItem, RR_BLOG_ITEM_TITLE_X+LOCK_W, RR_BLOG_ITEM_TITLE_Y, RR_BLOG_ITEM_TITLE_W-LOCK_W, FONT_MIDDLE, pszTitle, RGB_COLOR_LIGHTBLUE);
							}
							else
							{
								CtrlAddItemToCoolBarList_Lable(this, lpItem, RR_BLOG_ITEM_TITLE_X, RR_BLOG_ITEM_TITLE_Y, RR_BLOG_ITEM_TITLE_W, FONT_NORMAL, pszTitle, RGB_COLOR_LIGHTBLUE);
							}
							Int32 nContentId = 0;
							TUString::StrUtf8ToStrUnicode(pszContent , (const Char *)Response->blogs[nIndex].content);
							nContentId = CtrlAddItemToCoolBarList_Lable(this, lpItem, RR_BLOG_ITEM_CONTENT_X, RR_BLOG_ITEM_CONTENT_Y, RR_BLOG_ITEM_CONTENT_W, FONT_MIDDLE, pszContent, RGB_COLOR_BLACK);
							
							
							TUString::StrUtf8ToStrUnicode(pszDateTime , (const Char *)Response->blogs[nIndex].time);
							CtrlAddItemToCoolBarList_Lable(this, lpItem, RR_BLOG_ITEM_TIME_X, RR_BLOG_ITEM_TIME_Y, RR_BLOG_ITEM_TIME_W, FONT_SMALL, pszDateTime, RGB_COLOR_GRAY);

							//ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + RR_BLOG_ITEM_LINE_SPACE;
							//lpItem->SetHeight(ItemHeight);	// - (rect.Y() - Rc_CoolBarList.Y()) );
							lpItem->SetHeight(COOLBAR_ITEM_HEIGHT);
							lpItem->SetTagValue(nIndex);
						}
					}
					nIndex++;
				}
				lpRowList->EndUpdate();

			}
		}

	//如果是自己的Blog, 则显示写日志按钮
	if( strcmp(Response->uid, RenRenUserInfo.szuid) == 0)
		m_TitleBtnLeft = SetAppBitmapButton(this, APP_RE_ID_BITMAP_write_but, APP_RE_ID_BITMAP_write_but_over);
	}


	//显示不同的title
	if(m_FormMode == FORM_MODE_NORMAL)
	{
		SetAppTilte(this, APP_RE_ID_STRING_Blog);
		m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
	}
	else if(m_FormMode == FORM_MODE_MYHOME)
	{
		if(Response)
		{
			if(strcmp(Response->uid, RenRenUserInfo.szuid) == 0)
			{
				SetAppTilte(this, APP_RE_ID_STRING_MyNews);
				m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Home,TITLE_BUTTON_RIGHT);
			}
			else
			{
				tResponseProfile* ResponseProfile = NULL;
				iRet = RenRenAPI_JsonParse(RR_ProfileGetInfo, (void **)&ResponseProfile);
				if(ResponseProfile != NULL)
				{
					TUChar  pszFName[64] = {0};
					TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)ResponseProfile->name);			
					SetAppTilte(this, 0, pszFName);
					delete ResponseProfile;
					ResponseProfile = NULL;
				}
				m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
			}
		}
	}
	
	//:TODO:

	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TBlogGetsForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TBlogGetsForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);
	
	if(m_TitleBtnRight == nCtrlID)
	{
		if(m_FormMode == FORM_MODE_NORMAL)
			this->CloseWindow();
		else			
			App_PostMessageEx(&gtidMain, MSG_BACKTO_HOME, NULL, 0, 0, 0);	
		bHandled = TRUE; 
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		PostNotifyMsgDataType in_msgData = {0};
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nParam = EDIT_PARAM_NEW_BLOG;
			
		in_msgData.nAppTitleStrID = APP_RE_ID_STRING_WriteBlog; 
		in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_Publish;
		
		in_msgData.nTitleEditMaxChars = RENREN_LENGTH_BLOG_TITLE;
		in_msgData.nContentEditMaxChars = RENREN_LENGTH_BLOG_CONTENT;
		
		in_msgData.IsExpressionBtn = FALSE;
		in_msgData.IsPhotoBtn = TRUE;
		in_msgData.IsLocationBtn = TRUE;
		in_msgData.IsTitleEdit = TRUE;

		TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);	
		bHandled = TRUE; 		
		return bHandled;
	}
	//获取用户信息及新鲜事
	else if(BottomTabCtrID.nCtrID[0] == nCtrlID)
	{
		Set_Url_Params(RR_ProfileGetInfo, "uid", m_uid);
		RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 				
		bHandled = TRUE;		
		return bHandled;
	}
	//相册
	else if(BottomTabCtrID.nCtrID[1] == nCtrlID)
	{
		Set_Url_Params(RR_PhotosGetAlbums, "uid", m_uid);
		RenRenAPICommon_Download(RR_PhotosGetAlbums, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME); 				
		bHandled = TRUE;		
		return bHandled;
	}
	//日记
	else if(BottomTabCtrID.nCtrID[2] == nCtrlID)
	{
		//Set_Url_Params(RR_BlogGets, "uid", m_uid);
		//RenRenAPICommon_Download(RR_BlogGets, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME);			
		bHandled = TRUE;
		return bHandled;
	}
	//留言本
	else if(BottomTabCtrID.nCtrID[3] == nCtrlID)
	{
		Set_Url_Params(RR_GuestbookGet, "uid", m_uid);
		RenRenAPICommon_Download(RR_GuestbookGet, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME); 			
		bHandled = TRUE;		
		return bHandled;
	}
	//资料
	else if(BottomTabCtrID.nCtrID[4] == nCtrlID)
	{
		if(bIsPage == TRUE)
			{
			Set_Url_Params(RR_PagesGetInfo, "page_id", m_uid);
			RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0); 				
			}
		else
			{
			Set_Url_Params(RR_UsersGetInfo, "uids", m_uid);
			RenRenAPICommon_Download(RR_UsersGetInfo, this->GetWindowHwndId(), 0, 0); 				
			}
		bHandled = TRUE;		
		return bHandled;
	}
	switch(nCtrlID)
	{
		case APP_RE_ID_CommonListForm_CommonCoolBarList:
			{
				TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
				if( pRow->GetIndex() == 0 ) //First Row
				{					
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					//int ItemIndex = pItem->GetIndex();
					Int32 ItemIndex = 0;
					ItemIndex = pItem->GetTagValue();

					if(Response)
					{
						if(ItemIndex < Response->nSize_blogs)
						{
							Char BlogId[32] = {0};		
							TUChar szBlogId[32] = {0};
							TUString::StrIToA(szBlogId,Response->blogs[ItemIndex].id);
							TUString::StrUnicodeToStrUtf8(BlogId,szBlogId);
							Set_Url_Params(RR_BlogGet, "id", (char *)BlogId);
							Set_Url_Params(RR_BlogGet, "uid", Response->uid);
							//如果加密弹出密码输入框
							if( (strcmp(Response->uid, RenRenUserInfo.szuid) != 0) && (Response->blogs[ItemIndex].visable == 4) )
								{
								PostNotifyMsgDataType in_msgData = {0};
								MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

								in_msgData.nHwndId = this->GetWindowHwndId();
								in_msgData.nCtrlId = 0;
								in_msgData.nParam = EDIT_PARAM_PASSWORD;
								in_msgData.nAppTitleStrID = APP_RE_ID_STRING_PleaseInputPWD; 
								in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_OK;
								
								in_msgData.nTitleEditMaxChars = RENREN_LENGTH_PASSWORD;
								in_msgData.nContentEditMaxChars = RENREN_LENGTH_PASSWORD;
								
								in_msgData.IsExpressionBtn = FALSE;
								in_msgData.IsPhotoBtn = FALSE;
								in_msgData.IsLocationBtn = FALSE;
								in_msgData.IsPrivacyCtl = TRUE;
								in_msgData.IsTitleEdit = FALSE;
								in_msgData.IsPopEdit = TRUE;
								in_msgData.IsPwdInput = TRUE;
										
								TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);									
								}
							else
								{
								RenRenAPICommon_Download(RR_BlogGet, this->GetWindowHwndId(), 0, 0);	
								}
							bHandled = TRUE;
						}
					}
				}						
			}
			break;
		default:
			break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TBlogGetsForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;	
}

//控件丢失焦点
Boolean TBlogGetsForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TBlogGetsForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}

/**
 * 从profile中读取大头像, 如果本地没有则进行下载
 *
 * \param pApp
 * \param ResponseInfoPhoto
 *
 * \return 
 */
Boolean TBlogGetsForm::_UpdateProfilePhoto(TApplication* pApp, tResponseUsersGetInfo* ResponseInfoPhoto)
{

	if(ResponseInfoPhoto == NULL)
		return FALSE;
	

	if(ResponseInfoPhoto->nArraySize > 0)
	{
		TBitmap* pDownLoadBitmap = NULL;
		pDownLoadBitmap = LoadImgByUrl(ResponseInfoPhoto->Array[0].headurl);						
		if(pDownLoadBitmap == NULL)
		{
			RenRenAPICommon_DownloadPhoto(ResponseInfoPhoto->Array[0].headurl, this->GetWindowHwndId(), FEED_PROFILE_IMAGE_INDEX);	
		}
		else
		{
			TMaskButton* pLogo = NULL;
			pLogo = static_cast<TMaskButton*>(GetControlPtr(m_ProfileImageID));
			if(pLogo)
			{
				TRectangle rc;
				TBitmap * pProfileImageTmp = NULL;	//Profile的头像

				pLogo->GetBounds(&rc);
				
				pProfileImageTmp = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
				pProfileImageTmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
				pLogo->SetCaption(TUSTR_Re_NULL,0,0);
				pLogo->SetImage(pProfileImageTmp, (rc.Width()-pProfileImageTmp->GetWidth())/2, (rc.Height()-pProfileImageTmp->GetHeight())/2);
				pLogo->Draw();

				//如果先Desroy,则会崩溃,很奇怪,原因不明,暂时这么处理
				if( pProfileImage != NULL)
				{
					pProfileImage->Destroy();
					pProfileImage = NULL; 							
				}
				pProfileImage = pProfileImageTmp;
				
			}

			//释放图片
			pDownLoadBitmap->Destroy();
			pDownLoadBitmap = NULL; 	
		}
	}

	return TRUE;
}

