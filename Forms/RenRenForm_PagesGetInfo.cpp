/*!
*@FileName: RenRenForm_PagesGetInfo.cpp
*@Author: zengying@GoZone
*@Date: 2010-12-23
*@Brief: 公共主页详情Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_PagesGetInfo.h"

//大头像坐标
#define RR_HEAD_X				(10)
#define RR_HEAD_Y				(10)
#define RR_HEAD_W				(100)
#define RR_HEAD_H				(100)

//姓名 坐标
#define RR_NAME_X				(RR_HEAD_X + RR_HEAD_W + 10)
#define RR_NAME_Y				(10)
#define RR_NAME_W				(SCR_W - RR_NAME_X - 10)
#define RR_NAME_H				(FONT_NORMAL + 4)

//Status 坐标
#define RR_STATUS_X				(RR_NAME_X)
#define RR_STATUS_Y				(RR_NAME_Y + RR_NAME_H + 5)
#define RR_STATUS_W			(RR_NAME_W)
#define RR_STATUS_H				(20)


#define LABEL_X			(40)//根据内容有所变化
#define LABEL_Y			(10)
#define LABEL_H			(20)

#define RICHVIEW_X		(10)
#define RICHVIEW_Y		(10)
#define RICHVIEW_W		(SCR_W - RICHVIEW_X - 20)

#if(LCD_SIZE == LCD_HVGA )
#define ItemDefaultHeight	(40)
#elif(LCD_SIZE == LCD_WVGA )
#define ItemDefaultHeight	(50)
#endif

#define ItemHSpace			(10)
#define FirstItemRightX		(80)//第一项label右坐标X值									


// 构造函数
TPagesGetInfoForm::TPagesGetInfoForm(TApplication* pApp):TWindow(pApp)
{
	Response = NULL;
	pUserImageBmp = NULL;
	m_uid = Get_Url_Params(RR_PagesGetInfo, "page_id");
	
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	m_ProfileImageID = -1;
	memset((void*)&BottomTabCtrID, 0x0, sizeof(BottomTabCtrID));	
	Create(APP_RE_ID_CommonListForm);
	
}

// 析构函数
TPagesGetInfoForm::~TPagesGetInfoForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());
	if( Response )
	{
		delete Response;	
		Response = NULL;
	}

	if( pUserImageBmp != NULL)
	{
		pUserImageBmp->Destroy();
		pUserImageBmp = NULL;								
	}

}

// 窗口事件处理
Boolean TPagesGetInfoForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Bottom_btn_bg), 0, BOTTOM_TAB_Y, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);					
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
			
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
				case RR_PhotoDownload:
				{	
					//下载完后跟新缩略图图标
					//下载完后更新对应的图片
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);
					if(pDownLoadBitmap)
					{
						if(notifyData.nParam == 0)
						{
							TMaskButton* pLogo = NULL;
							pLogo = static_cast<TMaskButton*>(GetControlPtr(m_ProfileImageID));
							if(pLogo)
							{
								TRectangle rc;
								
								pLogo->GetBounds(&rc);
								if( pUserImageBmp != NULL)
								{
									pUserImageBmp->Destroy();
									pUserImageBmp = NULL;								
								}
								
								pUserImageBmp = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
								pUserImageBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
								pLogo->SetCaption(TUSTR_Re_NULL,0,0);
								pLogo->SetImage(pUserImageBmp, (rc.Width()-pUserImageBmp->GetWidth())/2, (rc.Height()-pUserImageBmp->GetHeight())/2);
								pLogo->Draw();
							}				
						}

						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 							
					}					
					break;
				}
				case RR_StatusGet:						
				{
					//更新状态显示	
					break;
				}
				default:
					break;
			}
			break;
		}
			break;

		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TPagesGetInfoForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;	
	//m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_OK,TITLE_BUTTON_LEFT);
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);

	CreateProfileBottomTab(this, &BottomTabCtrID, 5);

	TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonPanel));

	//设置panel高度
	if(pTPanel)
	{
		TRectangle rect;
		Int32 Height_Panel = 0;		//Panel高度		
		
		Height_Panel = SCR_H - STATUSBAR_H - TITLEBAR_H;
		Height_Panel -= BOTTOM_TAB_H;
			
		pTPanel->GetBounds(&rect);
		rect.SetHeight(Height_Panel);
		pTPanel->SetBounds(&rect);
	}
	
	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_PagesGetInfo, (void **)&Response);
	
	//显示不同的title
	if(Response)
	{
		TUChar  pszFName[64] = {0};
		TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)Response->name);			
		SetAppTilte(this, 0, pszFName);

		_SetDataToCtrls(pApp);
		_SetCoolBarList(pApp);
	}
	//:TODO:

	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TPagesGetInfoForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TPagesGetInfoForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);
	
	if(m_TitleBtnRight == nCtrlID)
	{
		App_PostMessageEx(&gtidMain, MSG_BACKTO_HOME, NULL, 0, 0, 0);	
		bHandled = TRUE; 
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		bHandled = TRUE; 		
		return bHandled;
	}
	//获取用户信息及新鲜事
	else if(BottomTabCtrID.nCtrID[0] == nCtrlID)
	{
		Set_Url_Params(RR_ProfileGetInfo, "uid", m_uid);
		RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 				
		bHandled = TRUE;		
		return bHandled;
	}
	//相册
	else if(BottomTabCtrID.nCtrID[1] == nCtrlID)
	{
		Set_Url_Params(RR_PhotosGetAlbums, "uid", m_uid);
		RenRenAPICommon_Download(RR_PhotosGetAlbums, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME); 				
		bHandled = TRUE;		
		return bHandled;
	}
	//日记
	else if(BottomTabCtrID.nCtrID[2] == nCtrlID)
	{
		Set_Url_Params(RR_BlogGets, "uid", m_uid);
		RenRenAPICommon_Download(RR_BlogGets, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME);			
		bHandled = TRUE;
		return bHandled;
	}
	//留言本
	else if(BottomTabCtrID.nCtrID[3] == nCtrlID)
	{
		Set_Url_Params(RR_GuestbookGet, "uid", m_uid);
		RenRenAPICommon_Download(RR_GuestbookGet, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME); 			
		bHandled = TRUE;		
		return bHandled;
	}
	//资料
	else if(BottomTabCtrID.nCtrID[4] == nCtrlID)
	{
		//Set_Url_Params(RR_PagesGetInfo, "uids", m_uid);
		//RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0); 				
		bHandled = TRUE;		
		return bHandled;
	}
	switch(nCtrlID)
	{
		case APP_RE_ID_TestForm_Test01:
			{
				bHandled = TRUE; 	
			}
			break;
		default:
			break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TPagesGetInfoForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;	
}

//控件丢失焦点
Boolean TPagesGetInfoForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TPagesGetInfoForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}

/**
 * 初始化控件显示
 *
 * \param pApp
 *
 * \return 
 */
void TPagesGetInfoForm::_SetDataToCtrls(TApplication* pApp)
{
	if(this->Response)
	{
		TFont objFontType;				
		TUChar pszState[1024] = {0};
		TUChar pszStateTime[32] = {0};	
		TUChar pszLogoPath[256] = {0};	
		TUChar pszUserName[32] = {0};	
		TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonPanel));
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));	

		Int32 Height_Panel = 0;		//Panel高度
		Int32 Height_Top = 0;			//CoolBarList上面信息的高度
		
		//用户头像
		//Photo, 先读取磁盘cache
		TBitmap* pDownLoadBitmap = NULL;
		const TBitmap * pImageDeault = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_DefaultLarge);
		const TBitmap * pBackImage = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_headmask_large);
		
		 pDownLoadBitmap = LoadImgByUrl(Response->headurl);
		//磁盘cache无文件,再下载
		if( pDownLoadBitmap == NULL)
		{
			RenRenAPICommon_DownloadPhoto(Response->headurl, this->GetWindowHwndId(), 0 ); 
			m_ProfileImageID = CtrlAddItemToPanel_MaskButton(this, pTPanel, RR_HEAD_X, RR_HEAD_Y, RR_HEAD_W, RR_HEAD_H, (TBitmap*)pImageDeault, (TBitmap*)pImageDeault, (TBitmap*)pBackImage );	
		}
		else
		{
			//需要做放大
			pUserImageBmp = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
			pUserImageBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));				
			m_ProfileImageID = CtrlAddItemToPanel_MaskButton(this, pTPanel, RR_HEAD_X, RR_HEAD_Y, RR_HEAD_W, RR_HEAD_H, (TBitmap*)pUserImageBmp, (TBitmap*)pUserImageBmp, (TBitmap*)pBackImage );	

			//释放图片
			pDownLoadBitmap->Destroy();
			pDownLoadBitmap = NULL; 				
		}
		
		//用户名
		TUString::StrUtf8ToStrUnicode(pszUserName , (const Char *)Response->name);	
		CtrlAddItemToPanel_Label(this, pTPanel, RR_NAME_X, RR_NAME_Y, 0, FONT_NORMAL, pszUserName, RGB_COLOR_BLACK);

		Height_Top += (RR_NAME_Y+RR_NAME_H);

		//状态
		Coord nHeight_RichView = 0;
		TUChar  pszStatus[1024] = {0};
		if(Response->nSize_status>0)
		{
			TUString::StrUtf8ToStrUnicode(pszStatus, (const Char *)Response->status[0].content);
			CtrlAddItemToPanel_RichView(this, pTPanel, RR_STATUS_X, RR_STATUS_Y, RR_STATUS_W, &nHeight_RichView, FONT_MIDDLE, pszStatus, RGB_COLOR_BLACK);
		}
		//位置容错调整
		if(nHeight_RichView > (RR_HEAD_H-RR_NAME_H) )
			Height_Top += nHeight_RichView;
		else
			Height_Top += (RR_HEAD_H- RR_NAME_H);

		//调整间隔
		Height_Top += 4;

		//设置CoolBarList高度
		if(pCoolBarList)
		{
			TRectangle rect;
			Int32 nY = Height_Top;

			pCoolBarList->GetBounds(&rect);
			rect.SetY(nY);
			pCoolBarList->SetBounds(&rect);
		}
			
	}
}

/**
 * 设置列表显示
 *
 * \param pApp
 *
 * \return 
 */
Int32 TPagesGetInfoForm::_SetCoolBarList(TApplication* pApp)
{
	//画CoolBarList
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));
	if (pCoolBarList)
	{
		TBarRowList *lpRowList = NULL;
		TBarRow *lpRow = NULL;
		TBarListItem* lpItem = NULL;
		lpRowList = pCoolBarList->Rows();
		//add row
		if (lpRowList)
		{
			//首先清空一下
			lpRowList->BeginUpdate();
			lpRowList->Clear();
			lpRow = lpRowList->AppendRow();
			if(lpRow)
			{
				TUChar pszRowCaption[32] = {0};
				TUString::StrCat(pszRowCaption, TResource::LoadConstString(APP_RE_ID_STRING_BaseInfo));
				lpRow->SetCaption(pszRowCaption);

				//简介
				lpItem = lpRow->AppendItem();
				if(lpItem)
				{
					//属性设置
					lpItem->SetTitle(NULL);
					lpItem->SetCaption(NULL);	   
					lpItem->SetIndicatorType(itNone);
					lpItem->SetEnabled(FALSE);
					
					TUChar pszString[128] = {0};
					Coord nHeigh = 0;
					Int32 nX = LABEL_X;
					TFont tFont;
					
					TUString::StrUtf8ToStrUnicode(pszString, (Char*)Response->desc);
					if(TUString::StrLen(pszString) > 0)
					{
						CtrlAddItemToCoolBarList_RichView(this, lpItem, RICHVIEW_X, RICHVIEW_Y, RICHVIEW_W, &nHeigh, FONT_NORMAL, pszString);
						lpItem->SetHeight(nHeigh + ItemHSpace * 2); //值一行显示不了,调整合适高度
					}
					else
					{
						lpItem->SetHeight(ItemDefaultHeight);
					}
				}				

				//好友数
				lpItem = lpRow->AppendItem();
				if(lpItem)
				{
					//属性设置
					lpItem->SetTitle(NULL);
					lpItem->SetCaption(NULL);	   
					lpItem->SetIndicatorType(itNone);
					lpItem->SetEnabled(FALSE);
					
					TUChar pszString[128] = {0};
					Coord nHeigh = 0;
					Int32 nX = LABEL_X;
					TFont tFont;
					
					TUString::StrPrintF(pszString, TResource::LoadConstString(APP_RE_ID_STRING_FriendNumFormat), Response->fans_count);
					if(TUString::StrLen(pszString) > 0)
					{
						CtrlAddItemToCoolBarList_RichView(this, lpItem, RICHVIEW_X, RICHVIEW_Y, RICHVIEW_W, &nHeigh, FONT_NORMAL, pszString);
						lpItem->SetHeight(nHeigh + ItemHSpace * 2); //值一行显示不了,调整合适高度
					}
					else
					{
						lpItem->SetHeight(ItemDefaultHeight);
					}
				}							
			}
			lpRowList->EndUpdate();
#if 0			
			//:TODO:Add Rows and Items
			for(int i = 0; i< ARR_SIZE(UsersInfoRows); i++)
			{
				if(UsersInfoRows[i].IsShow)
				{
					lpRowList->BeginUpdate();
					lpRow = lpRowList->AppendRow();
					if(lpRow)
					{						
						TUChar pszRowCaption[32] = {0};
						TUString::StrCat(pszRowCaption, TResource::LoadConstString(UsersInfoRows[i].RowCaptionStingID));
						lpRow->SetCaption(pszRowCaption);	

						for(int j=0; j < UsersInfoRows[i].nItemsNum; j++)
						{
							if(UsersInfoRows[i].Items[j].IsShow)
							{			
								//Add Item
								lpItem = lpRow->AppendItem();
								if(lpItem)
								{
									//属性设置
									lpItem->SetTitle(NULL);
									lpItem->SetCaption(NULL);	   
									lpItem->SetIndicatorType(itNone);
									
									TUChar pszString[128] = {0};
									Coord nHeigh = 0;
									Int32 nX = LABEL_X;
									TFont tFont;
									
									//标签
									TUString::StrCat(pszString, TResource::LoadConstString(UsersInfoRows[i].Items[j].LabelStingID));
									tFont.Create(FONT_TITLE,FONT_NORMAL);
									nX = GetShowAllStringWidth(pszString,tFont);
									CtrlAddItemToCoolBarList_Lable(this, lpItem, FirstItemRightX-nX, LABEL_Y, 0, FONT_NORMAL, pszString, RGB_COLOR_GRAY);

									//值
									TUString::StrCopy(pszString, UsersInfoRows[i].Items[j].ValueString);
									if(TUString::StrLen(pszString) > 0)
									{
										CtrlAddItemToCoolBarList_RichView(this, lpItem, RICHVIEW_X, RICHVIEW_Y, RICHVIEW_W, &nHeigh, FONT_NORMAL, pszString);
										lpItem->SetHeight(nHeigh + ItemHSpace * 2); //值一行显示不了,调整合适高度
									}
									else
									{
										lpItem->SetHeight(ItemDefaultHeight);
									}
								}
								
							}
						}
					}				
					lpRowList->EndUpdate();
				}
			}		

#endif

			
		}
	}
	return TRUE;
}


