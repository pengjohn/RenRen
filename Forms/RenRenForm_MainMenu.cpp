/*!
*@FileName: RenRenForm_MainMenu.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2011-1-17
*@Brief: 主菜单Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_MainMenu.h"

#include "TCOM_FileBrowser_Interface.h"
//#include "TCOM_FileBrowser_IIDs.h"     // 此头文件整个项目中仅能包含一次
#include "TCOM_DigitalCamera_DataType.h"
//#include "TCOM_DigitalCamera_IIDs.h"	// 此头文件整个项目中仅能包含一次
#include "ImageToolKit/IT_ImageSaver.h"

//QuickBar坐标
#define MAINMENU_QUICK_BAR_X			(0)
#define MAINMENU_QUICK_BAR_Y			(TITLEBAR_H)
#define MAINMENU_QUICK_BAR_W			(SCR_W)
#define MAINMENU_QUICK_BAR_H			(TITLEBAR_H)


#if(LCD_SIZE == LCD_HVGA )
#define FUNCTION_CAPTION_Y		(80)
#define FUNCTION_BUTTON_X		(0)
#define FUNCTION_BUTTON_Y		(100)
#define FUNCTION_BUTTON_W		(107)
#define FUNCTION_BUTTON_H		(110)
#elif(LCD_SIZE == LCD_WVGA )
#define FUNCTION_CAPTION_Y		(120)
#define FUNCTION_BUTTON_X		(0)
#define FUNCTION_BUTTON_Y		(160)
#define FUNCTION_BUTTON_W		(160)
#define FUNCTION_BUTTON_H		(160)
#endif

#define MAINMENU_QUICK_BAR_CAMERA_W		(MAINMENU_QUICK_BAR_H)
#define MAINMENU_QUICK_BAR_STATUS_W		(SCR_W - MAINMENU_QUICK_BAR_H)


typedef struct
{
	int 			nNmIconID;//funciton menu item normal icon
	int 			nHLIconID;//funciton menu item highlight icon
	int 			nStrID;//funciton menu item string
	TUChar		pszTitle[64];
}sMainMenuItem;

// 0: 新鲜事	1: 个人主页	2: 好友
// 3: 站内信	4: 地点		5: 相册
// 6: 应用		7: 公共主页	8: 日志
	
sMainMenuItem MainMenuItems[] =
{
		{APP_RE_ID_BITMAP_mainmenu_feed, APP_RE_ID_BITMAP_mainmenu_feed_hl, APP_RE_ID_STRING_Feed},
		{APP_RE_ID_BITMAP_mainmenu_profile,APP_RE_ID_BITMAP_mainmenu_profile_hl,APP_RE_ID_STRING_MyNews}, 
		{APP_RE_ID_BITMAP_mainmenu_friendlist, APP_RE_ID_BITMAP_mainmenu_friendlist_hl,APP_RE_ID_STRING_FriendsList},

		{APP_RE_ID_BITMAP_mainmenu_message,APP_RE_ID_BITMAP_mainmenu_message_hl,APP_RE_ID_STRING_Message},
		{APP_RE_ID_BITMAP_mainmenu_notify, APP_RE_ID_BITMAP_mainmenu_notify_hl,APP_RE_ID_STRING_MessageCenter},
		{APP_RE_ID_BITMAP_mainmenu_photo, APP_RE_ID_BITMAP_mainmenu_photo_hl, APP_RE_ID_STRING_Album},

		{APP_RE_ID_BITMAP_mainmenu_applications, APP_RE_ID_BITMAP_mainmenu_applications_hl, APP_RE_ID_STRING_Applications},
		{APP_RE_ID_BITMAP_mainmenu_pages,APP_RE_ID_BITMAP_mainmenu_pages_hl,APP_RE_ID_STRING_Pages},
		{APP_RE_ID_BITMAP_mainmenu_blog,APP_RE_ID_BITMAP_mainmenu_blog_hl,APP_RE_ID_STRING_Blog},
};

// 构造函数
TMainMenuForm::TMainMenuForm(TApplication* pApp, Boolean bNew):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	m_QuickBarTakePhotoID = -1;
	m_QuickBarStatusID = -1;
	
	memset(m_nFunMenuBtnID, 0x0, sizeof(m_nFunMenuBtnID) );
	
	Create(APP_RE_ID_MainMenuForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);
}

// 析构函数
TMainMenuForm::~TMainMenuForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());
}

// 窗口事件处理
Boolean TMainMenuForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg_with_logo), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);

				//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_QuickBar), 0, 44, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
			
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
			{
				NotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						
		
				bHandled = TRUE;
				switch(notifyData.nAccessType)
				{
					case RR_BlogAddBlog:
					case RR_StatusSet:
					{
						TUChar errorinfo[32] = {0};
						if(RenRenAPI_JsonParse_bSuccess((RR_AccessType)notifyData.nAccessType,errorinfo)==0)
						{
							if(notifyData.nAccessType == RR_StatusSet)
							{
								//更新状态显示  
								//Set_Url_Params(RR_ProfileGetInfo, "uid", RenRenUserInfo.szuid);
								//RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 				
								//Set_Url_Params(RR_StatusGet, "uid", RenRenUserInfo.szuid);
								//RenRenAPICommon_Download(RR_StatusGet, this->GetWindowHwndId(), 0, 0);
							}
							pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success),TResource::LoadConstString(APP_RE_ID_STRING_Publish),WMB_OK); 
						}					
						else
						{
							pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Fail),TResource::LoadConstString(APP_RE_ID_STRING_Publish),WMB_OK);	
						}
						break;
					}

					case RR_PhotosUpload:
					{
						if(pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_PhotoUploadContinue),TResource::LoadConstString(APP_RE_ID_STRING_PhotoUploadSuccess),WMB_YESNO) ==0 )
							{
							HitControl(m_QuickBarTakePhotoID); 
							}						
						break;
					}
					default:
						break;
				}
				break;
			}
			break;

		case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));
		
			if(notifyData.nParam == RR_StatusSet)
			{
				Set_Url_Params(RR_StatusSet, "status", (char*)notifyData.pszEditContent);
				Set_Url_Params(RR_StatusSet, "forward_id", "");
				Set_Url_Params(RR_StatusSet, "forward_owner", "");
				RenRenAPICommon_Download(RR_StatusSet, this->GetWindowHwndId(), 0, 0);
			}
			else if(notifyData.nParam == RR_PhotosUpload)
			{
				Set_Url_Params(RR_PhotosUpload, "caption", (char*)notifyData.pszEditContent);
				RenRenAPICommon_Download(RR_PhotosUpload,  this->GetWindowHwndId(), 0, 0);
			}
		
			bHandled = TRUE;
			break;
		}

		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TMainMenuForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	
	//m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_OK,TITLE_BUTTON_LEFT);
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Logout,TITLE_BUTTON_RIGHT);
	//SetAppTilte(this, APP_RE_ID_STRING_RenRen);

	//m_TakePhotoID = CtrlAddItemToWin_MaskButton(this, 5, 50, 35, 30, (TBitmap*)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_take_photo), (TBitmap*)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_take_photo) );
	//m_EditID = CtrlAddItemToWin_Edit(this, 50, 50, 200, 30 );

	m_QuickBarTakePhotoID = CtrlAddItemToWin_Image(this, MAINMENU_QUICK_BAR_X,  MAINMENU_QUICK_BAR_Y, MAINMENU_QUICK_BAR_CAMERA_W, MAINMENU_QUICK_BAR_H, (TBitmap *)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_QuickBar_TakePhoto));
	m_QuickBarStatusID = CtrlAddItemToWin_Image(this, MAINMENU_QUICK_BAR_X+MAINMENU_QUICK_BAR_CAMERA_W,  MAINMENU_QUICK_BAR_Y, MAINMENU_QUICK_BAR_STATUS_W, MAINMENU_QUICK_BAR_H, (TBitmap *)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_QuickBar_Status));

	_CreateFunctionButtons(pApp);
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TMainMenuForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
	// 0: 新鲜事	1: 个人主页	2: 好友
	// 3: 站内信	4: 地点		5: 相册
	// 6: 应用		7: 公共主页	8: 日志
Boolean TMainMenuForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);
	Int32 nCtrlID = pEvent->sParam1;

	if(m_TitleBtnRight == nCtrlID)
	{
		App_PostMessageEx(&gtidMain, MSG_LOGOUT, NULL, 0, 0, 0);	
		bHandled = TRUE; 
		//this->CloseWindow();
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_QuickBarTakePhotoID == nCtrlID)
	{
		if( PopBox_UploadPhoto(pApp, this->GetWindowHwndId()) == 1)
		{
		}
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_QuickBarStatusID == nCtrlID)
	{
		PostNotifyMsgDataType in_msgData = {0};
		TUChar pszStateContent[1024];
		
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));
		memset(pszStateContent, 0, sizeof(pszStateContent));		
		
		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		
		in_msgData.nAppTitleStrID = APP_RE_ID_STRING_Status; 
		in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_Publish;
		
		in_msgData.nContentEditMaxChars = RENREN_LENGTH_STATUS;
		
		in_msgData.IsExpressionBtn = TRUE;
		in_msgData.nParam = RR_StatusSet;

		TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);
		bHandled = TRUE;		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[0] == nCtrlID)
	{
		Set_Url_Params(RR_FeedGet, "uid", "");
		Set_Url_Params(RR_FeedGet, "page", "1");
		RenRenAPICommon_Download(RR_FeedGet, this->GetWindowHwndId(), 0, FEED_MODE_NEW); 		
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[1] == nCtrlID)
	{
		bIsPage = FALSE;
		Set_Url_Params(RR_ProfileGetInfo, "uid", RenRenUserInfo.szuid);
		RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, FEED_MODE_MYHOME);			
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[2] == nCtrlID)
	{
		RenRenAPICommon_Download(RR_FriendsGetFriends, this->GetWindowHwndId(), 0, 0);	
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[3] == nCtrlID)
	{
		Set_Url_Params(RR_MessageGets, "box", RENREN_PARAM_INBOX);
		RenRenAPICommon_Download(RR_MessageGets, this->GetWindowHwndId(), 0, 0); 		
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[4] == nCtrlID)
	{
		//RenRenAPICommon_Download(RR_UsersGetEvent, this->GetWindowHwndId(), 0, 0);
		App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_USEREVENT, NULL, 0, 0, 0);
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[5] == nCtrlID)
	{
		Set_Url_Params(RR_PhotosGetAlbums, "uid", RenRenUserInfo.szuid);
		RenRenAPICommon_Download(RR_PhotosGetAlbums, this->GetWindowHwndId(), 0, FORM_MODE_NORMAL); 			
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[6] == nCtrlID)
	{
		char url[256] = {0};
		sprintf(url, "http://3g.renren.com/ep.do?c=1100502&sid=%s", RenRenUserInfo.ticket);
		TWebPanelForm *pWin = new TWebPanelForm( pApp, TResource::LoadConstString(APP_RE_ID_STRING_RenRen),  url);	
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[7] == nCtrlID)
	{
		Set_Url_Params(RR_PagesGetList, "uid", RenRenUserInfo.szuid);
		RenRenAPICommon_Download(RR_PagesGetList, this->GetWindowHwndId(), 0, PAGESLIST_MODE_NORMAL); 		
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_nFunMenuBtnID[8] == nCtrlID)
	{
		Set_Url_Params(RR_BlogGets, "uid", RenRenUserInfo.szuid);
		RenRenAPICommon_Download(RR_BlogGets, this->GetWindowHwndId(), 0, 0);		
		bHandled = TRUE; 		
		return bHandled;
	}


	switch(nCtrlID)
	{
		case APP_RE_ID_TestForm_Test01:
			{
				bHandled = TRUE; 	
			}
			break;
		default:
			break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TMainMenuForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;	
}

//控件丢失焦点
Boolean TMainMenuForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TMainMenuForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}


/**
 * 创建功能按键
 *
 * \param pApp
 *
 * \return 
 */
Int32 TMainMenuForm::_CreateFunctionButtons(TApplication* pApp)
{
	Int32 bnRetCod = 0; 
	TRectangle obBtnRec(0,0,0,0); //初始(left, top, w, h)
	TFont tFont;	

	tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
	
	//use to function buttons ID
	for(int i=0; i<ARR_SIZE(m_nFunMenuBtnID); i++)
	{
		m_nFunMenuBtnID[i] = 0;

		const TBitmap * pImgNormal = TResource::LoadConstBitmap(MainMenuItems[i].nNmIconID);
		const TBitmap * pImgDown = TResource::LoadConstBitmap(MainMenuItems[i].nHLIconID);
		obBtnRec.SetRect(FUNCTION_BUTTON_X + (FUNCTION_BUTTON_W *(i%3)) , FUNCTION_BUTTON_Y + (FUNCTION_BUTTON_H *(i/3)), FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
		TMaskButton* pFunMenuBtn =new TMaskButton;
		if(pFunMenuBtn->Create(this))
		{
			Int32 CaptionX = 0;
			TFont tFont;	

			tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
			pFunMenuBtn->SetBounds(&obBtnRec); 	
			m_nFunMenuBtnID[i] = pFunMenuBtn->GetId();
			pFunMenuBtn->SetImage(pImgNormal,(FUNCTION_BUTTON_W-pImgNormal->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal->GetHeight())/2 - 10); 
			pFunMenuBtn->SetSelImage(pImgDown,(FUNCTION_BUTTON_W-pImgDown->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown->GetHeight())/2 - 10);	
			if(TUString::StrLen(MainMenuItems[i].pszTitle) == 0)
			{
				CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar *)TResource::LoadConstString(MainMenuItems[i].nStrID), tFont))/2;			
				pFunMenuBtn->SetCaption(TResource::LoadConstString(MainMenuItems[i].nStrID), CaptionX, FUNCTION_CAPTION_Y);
			}
			else
			{
				CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar *)MainMenuItems[i].pszTitle, tFont))/2;			
				pFunMenuBtn->SetCaption(MainMenuItems[i].pszTitle, CaptionX, FUNCTION_CAPTION_Y);			
			}
			pFunMenuBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
			pFunMenuBtn->SetFont(tFont);
			pFunMenuBtn->SetEnabled(TRUE);
		}
		else
		{
			bnRetCod ++;
		}
	}
			
	return bnRetCod;
}


