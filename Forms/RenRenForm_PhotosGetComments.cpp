/*!
*@FileName: RenRenForm_PhotosGetComments.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2011-1-7
*@Brief: 照片评论Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_PhotosGetComments.h"


// 构造函数
TPhotosGetCommentsForm::TPhotosGetCommentsForm(TApplication* pApp, Boolean bNew):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	m_MoreBtn = -1;
	memset(gItemData, 0x0, sizeof(gItemData));
	m_ItemCount = 0;
	m_OffsetY = 10;
	
	Create(APP_RE_ID_CommentsCommonForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);
}

// 析构函数
TPhotosGetCommentsForm::~TPhotosGetCommentsForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0;i<PHOTOSGETCOMMENTS_MAXITEM;i++)
	{
		if( gItemData[i].pBmp != NULL)
		{
			gItemData[i].pBmp->Destroy();
			gItemData[i].pBmp = NULL;									
		}	
	}
}

// 窗口事件处理
Boolean TPhotosGetCommentsForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
			
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
			{
				NotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));				
				bHandled = TRUE;
				switch(notifyData.nAccessType)
				{
					case RR_PhotoDownload:
					{
						if( gItemData[notifyData.nParam].pBmp != NULL)
						{
							gItemData[notifyData.nParam].pBmp->Destroy();
							gItemData[notifyData.nParam].pBmp = NULL;									
						}
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);						
						if(pDownLoadBitmap != NULL)
						{
							TMaskButton* pMyHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(gItemData[notifyData.nParam].HeadMaskButtonID));
							if(pMyHeadMBtn != NULL)
							{
								gItemData[notifyData.nParam].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
								gItemData[notifyData.nParam].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
								
								pMyHeadMBtn->SetImage(gItemData[notifyData.nParam].pBmp, (HEADMASKBUTTON_W - gItemData[notifyData.nParam].pBmp->GetWidth())/2, (HEADMASKBUTTON_H - gItemData[notifyData.nParam].pBmp->GetHeight())/2 );
								pMyHeadMBtn->Draw();
							}

							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 								
						}
						break;
					}

					case RR_PhotosAddComment:
					{
						pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success), TResource::LoadConstString(APP_RE_ID_STRING_Publish), WMB_OK);
						Set_Url_Params(RR_PhotosGetComments, "page", "1");
						RenRenAPICommon_Download(RR_PhotosGetComments, this->GetWindowHwndId(), 0, 0);

						break;
					}

					case RR_PhotosGetCommentsMore:
					{
						tResponsePhotosGetComments* Response = NULL;
						RenRenAPI_JsonParse(RR_PhotosGetCommentsMore, (void **)&Response);
						if(Response != NULL)
						{
							_UpdateList(pApp, Response);

							delete Response;
							Response = NULL;
						}
						break;
					}					
					default:
						break;
				}
			}
			break;

		case MSG_POST_THREAD_NOTIFY:
		{
			
				PostNotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

				char* pid = Get_Url_Params(RR_PhotosGetComments, "pid");
				char* aid = Get_Url_Params(RR_PhotosGetComments, "aid");
				char* uid = Get_Url_Params(RR_PhotosGetComments, "uid");
				
				Set_Url_Params(RR_PhotosAddComment, "pid", pid);
				Set_Url_Params(RR_PhotosAddComment, "aid", aid);
				Set_Url_Params(RR_PhotosAddComment, "uid", uid);
					//notifyData.nParam = -1表示发起新评论
				if(notifyData.nParam == -1)
					Set_Url_Params(RR_PhotosAddComment, "rid", "");
				else
				{
					char rid[32] = {0};
					sprintf(rid, "%d", gItemData[notifyData.nParam].uid);
					Set_Url_Params(RR_PhotosAddComment, "rid", rid);
				}
				
				if(notifyData.bPrivacy == TRUE)
					Set_Url_Params(RR_PhotosAddComment, "type", "1");
				else
					Set_Url_Params(RR_PhotosAddComment, "type", "0");
				
				Set_Url_Params(RR_PhotosAddComment, "content", (char*)notifyData.pszEditContent);			

				RenRenAPICommon_Download(RR_PhotosAddComment, this->GetWindowHwndId(), 0, 0);		
				bHandled = TRUE;
			break;
		}
		
		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TPhotosGetCommentsForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	tResponsePhotosGetComments* Response = NULL;
	
	m_TitleBtnLeft = SetAppBitmapButton(this, APP_RE_ID_BITMAP_write_but, APP_RE_ID_BITMAP_write_but_over);	
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
	SetAppTilte(this, APP_RE_ID_STRING_Album);

	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_PhotosGetComments, (void **)&Response);	
	if( Response == NULL || iRet != 0 )
	{
		return FALSE;
	}

	//:TODO:
	TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_CommentsCommonForm_CommentsCommonPanel));

	if(Response->nArraySize == 0)
	{
		CtrlAddItemToPanel_Image(this, pPanel, 8, 10, 50, 50, (TBitmap *)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_comment_img_with_frame));
		CtrlAddItemToPanel_Label(this, pPanel, 58, 24, 200, FONT_NORMAL, (TUChar *)TResource::LoadConstString(APP_RE_ID_STRING_NoComment));	
	}
	else
	{	
		_UpdateList(pApp, Response);
	}
	if( Response )
	{
		delete Response;
		Response = NULL;
	}
	return TRUE;
}


// 关闭窗口时，保存设置信息
Boolean TPhotosGetCommentsForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TPhotosGetCommentsForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;

	if(m_TitleBtnRight == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		PostNotifyMsgDataType in_msgData = {0};
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nParam = -1;
		//in_msgData.nEditType = NewBlogEdit;
		in_msgData.nAppTitleStrID = APP_RE_ID_STRING_WriteComment; 
		in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_Publish;
		
		in_msgData.nContentEditMaxChars = RENREN_LENGTH_PHOTO_COMMENT;
		
		in_msgData.IsExpressionBtn = FALSE;
		in_msgData.IsPhotoBtn = FALSE;
		in_msgData.IsLocationBtn = FALSE;
		in_msgData.IsPrivacyCtl = TRUE;
		in_msgData.IsTitleEdit = FALSE;
		
		TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);		
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(m_MoreBtn== nCtrlID)
	{
		char* szPage = Get_Url_Params(RR_PhotosGetCommentsMore, "page");
		char szPageParams[16] = {0};
		int nPage = 0;
		nPage = atoi(szPage);
		nPage ++;
		sprintf(szPageParams, "%d", nPage);
		Set_Url_Params(RR_PhotosGetCommentsMore, "page", szPageParams);
		RenRenAPICommon_Download(RR_PhotosGetCommentsMore, this->GetWindowHwndId(), 0, 0);
		bHandled = TRUE; 
		return bHandled;			
	}
		//判断回复按钮
	for(int i=0;i<ARR_SIZE(gItemData); i++)
	{
		if(gItemData[i].OptionButtonID == nCtrlID)
		{
			PostNotifyMsgDataType in_msgData = {0};
			MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

			in_msgData.nHwndId = this->GetWindowHwndId();
			in_msgData.nCtrlId = 0;
			in_msgData.nParam = i;
			in_msgData.nAppTitleStrID = APP_RE_ID_STRING_Album; 
			in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_OK;
			
			in_msgData.nContentEditMaxChars = RENREN_LENGTH_PHOTO_COMMENT;
			in_msgData.bPrivacy = gItemData[i].bWhisper;	//回复悄悄话,默认也要是悄悄话
			
			in_msgData.IsExpressionBtn = FALSE;
			in_msgData.IsPhotoBtn = FALSE;
			in_msgData.IsLocationBtn = FALSE;
			in_msgData.IsPrivacyCtl = TRUE;
			in_msgData.IsTitleEdit = FALSE;
			
			TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);	
			bHandled = TRUE; 		
			return bHandled;
		}
		else if(gItemData[i].NameID== nCtrlID)
		{
			char	szuid[64] = "";				
			sprintf(szuid, "%d", gItemData[i].uid);		
			Set_Url_Params(RR_ProfileGetInfo, "uid", szuid);
			RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0);
			bHandled = TRUE;		
			return bHandled;			
		}		
	}

	switch(nCtrlID)
	{
		case APP_RE_ID_TestForm_Test01:
			{
				bHandled = TRUE; 	
			}
			break;
		default:
			break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TPhotosGetCommentsForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1; 

	//:TODO:
	for(int i=0;i<ARR_SIZE(gItemData); i++)
	{
		if(gItemData[i].NameID== nCtrlID)
		{
			this->SetFocus(m_TitleBtnRight);
		}
	}
	return bHandled;	
}

//控件丢失焦点
Boolean TPhotosGetCommentsForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TPhotosGetCommentsForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}

/**
 * 更新列表显示
 *
 * \param pApp
 * \param Response
 *
 * \return 
 */
Boolean TPhotosGetCommentsForm::_UpdateList(TApplication * pApp, tResponsePhotosGetComments* Response)
{

	if(Response == NULL)
		return FALSE;

	TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_CommentsCommonForm_CommentsCommonPanel));

	if(m_MoreBtn != -1)
		{
		TButton* pButton = static_cast<TButton*>(GetControlPtr(m_MoreBtn));
		pButton->Hide(TRUE);
		}
	
	for(int i=0; i<Response->nArraySize; i++)
	{

		//如果个数超过这直接返回
		if(m_ItemCount >= PHOTOSGETCOMMENTS_MAXITEM)
			break;
		
		tBubbleDialogItemData  BubbleItemData = {0};
		Coord nHeight = 0;
		TUString::StrUtf8ToStrUnicode(BubbleItemData.pszName , (const Char *)Response->Array[i].name);
		//内容,去掉html格式化内容
		StrRemoveAtoB(Response->Array[i].text, strlen(Response->Array[i].text), "<", ">");						
		TUString::StrUtf8ToStrUnicode(BubbleItemData.pszContent , (const Char *)Response->Array[i].text);
		TUString::StrUtf8ToStrUnicode(BubbleItemData.pszTime , (const Char *)Response->Array[i].time);

		//自己在左边,其他人在右边
		if(Response->Array[i].uid == RenRenUserInfo.uid)
		{
			BubbleItemData.bLeft = FALSE;
			BubbleItemData.OptionButtonResID = NULL;
		}
		else
		{
			BubbleItemData.bLeft = TRUE;
			BubbleItemData.OptionButtonResID = APP_RE_ID_STRING_Reply;
		}
		
		BubbleItemData.nY = m_OffsetY;


		if(Response->Array[i].is_whisper != 0)
		{
			gItemData[m_ItemCount].bWhisper = TRUE;	
			BubbleItemData.FlagIconResID = APP_RE_ID_BITMAP_whisper;
		}
		//头像,先读取磁盘cache, 无文件再下载
		TBitmap* pDownLoadBitmap = NULL;
		pDownLoadBitmap = LoadImgByUrl(Response->Array[i].headurl);
		if(  pDownLoadBitmap != NULL)
		{
			gItemData[m_ItemCount].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
			gItemData[m_ItemCount].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);

			BubbleItemData.pImage = gItemData[m_ItemCount].pBmp;
			gItemData[m_ItemCount].NameID = CtrlCreateToPanel_BubbleDialog(this, pPanel, BubbleItemData, &nHeight, &gItemData[m_ItemCount].OptionButtonID, &gItemData[m_ItemCount].HeadMaskButtonID);

			//释放图片
			pDownLoadBitmap->Destroy();
			pDownLoadBitmap = NULL; 						
		}
		else
		{
			TBitmap * pImage = (TBitmap*)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Default);
			BubbleItemData.pImage = pImage;
			gItemData[m_ItemCount].NameID = CtrlCreateToPanel_BubbleDialog(this, pPanel,  BubbleItemData, &nHeight, &gItemData[m_ItemCount].OptionButtonID, &gItemData[m_ItemCount].HeadMaskButtonID);
			RenRenAPICommon_DownloadPhoto(Response->Array[i].headurl, this->GetWindowHwndId(), m_ItemCount );
		}
		
		m_OffsetY = m_OffsetY + nHeight + 15;
		gItemData[m_ItemCount].uid = Response->Array[i].uid;

		m_ItemCount ++;
	}	

	//如果还有,显示更多
	char*  szCount = Get_Url_Params(RR_PhotosGetComments, "count");
	int nCount = 0;
	nCount = atoi(szCount);
	if(Response->nArraySize >= nCount)
	{
		m_MoreBtn = CtrlAddItemToPanel_Button(this, pPanel, 10, m_OffsetY+ 10, TITLE_BUTTON_W, TITLE_BUTTON_H, (TUChar *)TResource::LoadConstString(APP_RE_ID_STRING_More) );
	}

	this->UpdateWindow(0);
	
	return TRUE;
}