/*!
*@FileName: RenRenForm_FriendsGetFriends.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2010-12-21
*@Brief: 好友列表Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_FriendsGetFriends.h"

#define HEADMASK_X		(3)
#define HEADMASK_Y		(3)

#define NAME_X			(HEADMASKBUTTON_W + 10)
#define NAME_Y			(25)


#define LINE1_X		(HEADMASKBUTTON_W + 10)
#define LINE1_Y		(10)
#define LINE1_H		(HEADMASKBUTTON_H/2)


#define LINE2_X		(HEADMASKBUTTON_W + 10)
#define LINE2_Y		(LINE1_Y+LINE1_H)

#if(LCD_SIZE == LCD_HVGA )
#define BUTTON_W		(80)
#elif(LCD_SIZE == LCD_WVGA )
#define BUTTON_W		(120)
#endif
#define BUTTON_H		(TITLE_BUTTON_H)
#define BUTTON_X		(SCR_W - BUTTON_W - 20)
#define BUTTON_Y		((COOLBAR_ITEM_HEIGHT - BUTTON_H)/2)

#define COOLBAR_ITEM_HEIGHT			(HEADMASKBUTTON_H + HEADMASK_Y*2)


Boolean MatchInput(TUChar* pszName, TUChar* pszInput);

// 构造函数
TFriendsGetFriendsForm::TFriendsGetFriendsForm(TApplication* pApp,  int nListMode, Boolean bNew):TWindow(pApp)
{
	m_nListMode = nListMode;
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	memset((void*)&BottomTabCtrID, 0, sizeof(BottomTabCtrID));
	memset(gItemData, 0, sizeof(gItemData));
	memset(m_SearchInput, 0x0, sizeof(m_SearchInput) );
	
	Create(APP_RE_ID_FriendsGetFriendsForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);
}	

// 析构函数
TFriendsGetFriendsForm::~TFriendsGetFriendsForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0; i<FRIENDLIST_MAXITEM; i++)
	{
		if( gItemData[i].pBmp != NULL)
		{
			gItemData[i].pBmp->Destroy();
			gItemData[i].pBmp = NULL;									
		}
	}
}

// 窗口事件处理
Boolean TFriendsGetFriendsForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);	

				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_searchbar), 0, TITLEBAR_H, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);	

				if(m_nListMode != FRIENDLSIT_MODE_MESSAGE)
					dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Bottom_btn_bg), 0, BOTTOM_TAB_Y, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);	
				
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;

						
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
			{
				NotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));				
				bHandled = TRUE;
				switch(notifyData.nAccessType)
				{
					case RR_PhotoDownload:
					{						
						TBitmap* pHeadBmp = NULL;
						pHeadBmp = LoadImgByPath(notifyData.pszFilePath);
						if(pHeadBmp != NULL)
						{
							if( gItemData[notifyData.nParam].pBmp != NULL)
							{
								gItemData[notifyData.nParam].pBmp->Destroy();
								gItemData[notifyData.nParam].pBmp = NULL;									
							}		
							gItemData[notifyData.nParam].pBmp = TBitmap::Create(HEADPHOTO_W, HEADPHOTO_H, pHeadBmp->GetDepth());
							gItemData[notifyData.nParam].pBmp->QuickZoom(pHeadBmp, TRUE, TRUE,RGBA(0,0,0,255));						
							pHeadBmp->Destroy();
							pHeadBmp = NULL; 
						
							TMaskButton* pMyHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(gItemData[notifyData.nParam].HeadMaskButtonID));
							if(pMyHeadMBtn != NULL)
							{
								//公共主页的需要缩放, TODO
								pMyHeadMBtn->SetImage(gItemData[notifyData.nParam].pBmp, (HEADMASKBUTTON_W - gItemData[notifyData.nParam].pBmp->GetWidth())/2, (HEADMASKBUTTON_H - gItemData[notifyData.nParam].pBmp->GetHeight())/2 );
								pMyHeadMBtn->Draw();
							}
						}
						break;
					}

					case RR_MessageSent:
						{
							pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success),TResource::LoadConstString(APP_RE_ID_STRING_Send),WMB_OK); 
							this->CloseWindow(); 
						}
						break;

					case RR_FriendsAreFriends:
						{
							int iRet = 0;
							tResponseFriendsAreFriends* Response = NULL;
						
							iRet = RenRenAPI_JsonParse(RR_FriendsAreFriends, (void **)&Response);	
							if(Response)
							{
								for(int i=0; i<Response->nArraySize; i++)
								{
									if(Response->Array[i].are_friends == 0)
									{
										this->ShowControl(gItemData[i].nOptionButtonID);
									}
								}
								delete Response;
							}
						}
						break;
					case RR_RequestsSendFriendRequest:
						{
						pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_SendRequestSuccess), TResource::LoadConstString(APP_RE_ID_STRING_Success), WMB_OK);
						}
						break;						
					default:
						break;
				}
			}
			break;

		case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			char m_uid[32] = {0};
			sprintf(m_uid, "%d", notifyData.nParam);
			Set_Url_Params(RR_MessageSent, "rid", "");
			Set_Url_Params(RR_MessageSent, "box", "");
			Set_Url_Params(RR_MessageSent, "uid", m_uid);
			
			Set_Url_Params(RR_MessageSent, "title", (char*)notifyData.pszEditTitle);					
			Set_Url_Params(RR_MessageSent, "content", (char*)notifyData.pszEditContent);
			
			RenRenAPICommon_Download(RR_MessageSent, this->GetWindowHwndId(), 0, 0);	

			bHandled = TRUE;
			break;
		}
		
		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}


// 窗口初始化
Boolean TFriendsGetFriendsForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_Refresh,TITLE_BUTTON_LEFT);
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);

	if(m_nListMode == FRIENDLSIT_MODE_VISITOR)
	{
		SetAppTilte(this, APP_RE_ID_STRING_MyFriends);
		CreateFriendListBottomTab(this, &BottomTabCtrID, 3);
		_CreateListVisitor(pApp);
	}
	else if(m_nListMode == FRIENDLSIT_MODE_PAGES)
	{
		SetAppTilte(this, APP_RE_ID_STRING_MyFriends);
		CreateFriendListBottomTab(this, &BottomTabCtrID, 2);
		_CreateListPages(pApp);
	}
	else if(m_nListMode == FRIENDLSIT_MODE_MESSAGE)
	{
		SetAppTilte(this, APP_RE_ID_STRING_PleaseSelectReceiver);
		//Panel高度到底
		TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_FriendsGetFriendsForm_FriendsListPanel));	
		TRectangle rect;
		Int32 Height_Panel = 0;		//Panel高度	
		pTPanel->GetBounds(&rect);
		Height_Panel = rect.Height() + BOTTOM_TAB_H;
		rect.SetHeight(Height_Panel);
		
		pTPanel->SetBounds(&rect);
		
		//隐藏搜索网络
		TButton* pButton = static_cast<TButton*>(GetControlPtr(APP_RE_ID_FriendsGetFriendsForm_SearchFormNet));	
		pButton->Hide(TRUE);		

		//隐藏刷新按钮
		TButton* pButtonTitleLeft = static_cast<TButton*>(GetControlPtr(m_TitleBtnLeft));	
		pButtonTitleLeft->Hide(TRUE);	

		//搜索框提示
		TEdit* pEdit = static_cast<TEdit*>(GetControlPtr(APP_RE_ID_FriendsGetFriendsForm_SearchInput));
		pEdit->SetTipText(TResource::LoadConstString(APP_RE_ID_STRING_SearchInputName));
		
		_CreateListAll(pApp);
	}	
	else
	{
		SetAppTilte(this, APP_RE_ID_STRING_MyFriends);
		CreateFriendListBottomTab(this, &BottomTabCtrID, 1);
		_CreateListAll(pApp);
	}	
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TFriendsGetFriendsForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TFriendsGetFriendsForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);
	
	//返回
	if(m_TitleBtnRight == nCtrlID)
	{
		this->CloseWindow();
		//App_PostMessageEx(&gtidMain, MSG_EXIT, NULL, 0, 0, 0);	
		bHandled = TRUE; 
		return bHandled;
	}
	//刷新
	else if(m_TitleBtnLeft == nCtrlID)
	{
		if(m_nListMode == FRIENDLSIT_MODE_VISITOR)
			RenRenAPICommon_Download(RR_UsersGetVisitors, this->GetWindowHwndId(), 0, 0);
		else if(m_nListMode == FRIENDLSIT_MODE_PAGES)
			RenRenAPICommon_Download(RR_PagesGetList, this->GetWindowHwndId(), 0, PAGESLIST_MODE_MYHOME);		
		else
			RenRenAPICommon_Download(RR_FriendsGetFriends, this->GetWindowHwndId(), 0, 0);
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(BottomTabCtrID.nCtrID[0] == nCtrlID)
	{
		if(m_nListMode != FRIENDLSIT_MODE_ALL)
			RenRenAPICommon_Download(RR_FriendsGetFriends, this->GetWindowHwndId(), 0, 0);
		bHandled = TRUE; 		
		return bHandled;
	}	
	else if(BottomTabCtrID.nCtrID[1] == nCtrlID)
	{
		Set_Url_Params(RR_PagesGetList, "uid", RenRenUserInfo.szuid);
		RenRenAPICommon_Download(RR_PagesGetList, this->GetWindowHwndId(), 0, PAGESLIST_MODE_MYHOME);		
		bHandled = TRUE; 		
		return bHandled;
	}	
	else if(BottomTabCtrID.nCtrID[2] == nCtrlID)
	{
		if(m_nListMode != FRIENDLSIT_MODE_VISITOR)
			RenRenAPICommon_Download(RR_UsersGetVisitors, this->GetWindowHwndId(), 0, 0);
		bHandled = TRUE; 		
		return bHandled;
	}
	else
	{
		for(int i = 0;i < FRIENDLIST_MAXITEM; i++)
		{
			if(gItemData[i].nOptionButtonID == nCtrlID)
			{
				char  szId[64] = {0};
				sprintf(szId, "%d", gItemData[i].id);
				Set_Url_Params(RR_RequestsSendFriendRequest, "uid", (char*)szId);	
				RenRenAPICommon_Download(RR_RequestsSendFriendRequest, this->GetWindowHwndId(), 0, 0); 			
				bHandled = TRUE;
				return bHandled;
			}
		}
	}
	
	switch(nCtrlID)
	{
		case APP_RE_ID_FriendsGetFriendsForm_FriendsListCoolBarList:
		{
			TBarListItem *lpItem;
			Int32        nIndex;
			char 	szuids[64] = "";
			char* 	szbox = NULL;
			lpItem = (TBarListItem *)(pEvent->lParam3);
			nIndex = lpItem->GetIndex();

			if(m_nListMode == FRIENDLSIT_MODE_MESSAGE)
			{
				//return App_PostMessageEx(&gtidMain, MSG_POST_THREAD_NOTIFY, &m_msgData, sizeof(PostNotifyMsgDataType) ,m_msgData.nHwndId, m_msgData.nCtrlId);
				//发送站内信
				PostNotifyMsgDataType in_msgData = {0};
				MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

				TUString::StrUnicodeToStrUtf8((Char*)in_msgData.pszReceiver, gItemData[nIndex].pszName);
				
				in_msgData.nCtrlId = 0;
				in_msgData.nHwndId = this->GetWindowHwndId();

				in_msgData.nAppTitleStrID = APP_RE_ID_STRING_Message; 
				in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_Send;
				
				in_msgData.nTitleEditMaxChars = RENREN_LENGTH_BLOG_TITLE;
				in_msgData.nContentEditMaxChars = RENREN_LENGTH_MESSAGE;
				
				in_msgData.IsReceiverEdit = TRUE;
				in_msgData.IsExpressionBtn = FALSE;
				in_msgData.IsTitleEdit = TRUE;
				in_msgData.IsPrivacyCtl= FALSE;
				in_msgData.nParam = gItemData[nIndex].id;

				TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);
			}
			else
			{
				if(m_nListMode == FRIENDLSIT_MODE_PAGES)
					bIsPage = TRUE;
				else
					bIsPage = FALSE;
				sprintf(szuids, "%d", gItemData[nIndex].id);
				Set_Url_Params(RR_ProfileGetInfo, "uid", szuids);
				RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 	
			}
			break;
		}

		case APP_RE_ID_FriendsGetFriendsForm_SearchFormNet:
			{
			Char pszInput[64] = {0};
			TUString::StrUnicodeToStrUtf8(pszInput,(const TUChar*)m_SearchInput);
			if(strlen((char*)pszInput) > 0)
			{
				Set_Url_Params(RR_FriendsSearch, "page", "1");
				Set_Url_Params(RR_FriendsSearch, "name", (char*)pszInput);	
				RenRenAPICommon_Download(RR_FriendsSearch, this->GetWindowHwndId(), 0, 0); 		
			}
			}
			break;
		default:
			break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TFriendsGetFriendsForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:
	if(CtrlID == APP_RE_ID_FriendsGetFriendsForm_SearchInput)
	{	
		//open input method
		ImeOpenIme( IME_MODE_VOLITANT,  IME_CLASS_ENGLISH);
		bHandled = TRUE;
	}
	
	return bHandled;	
}

//控件丢失焦点
Boolean TFriendsGetFriendsForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:
	if(CtrlID == APP_RE_ID_FriendsGetFriendsForm_SearchInput)
	{
		//close input method
		ImeCloseIme();
		bHandled = TRUE;
	}
	return bHandled;
}

// 文本框输入处理事件
Boolean TFriendsGetFriendsForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:
	switch(CtrlID)
	{
	case APP_RE_ID_FriendsGetFriendsForm_SearchInput:
		{
			TEdit* pEdit = static_cast<TEdit*>(GetControlPtr(APP_RE_ID_FriendsGetFriendsForm_SearchInput));

			const TUChar *content = pEdit->GetCaption();
			TUString::StrNCopy(m_SearchInput, content, FRIENDLIST_MAXINPUT);
			//TUString::StrUnicodeToStrUtf8((Char*)sFpyInput, content);
			//SetFriendListType(pApp, iListType, FALSE);
			_UpdateListByInput(pApp);
			bHandle = TRUE;
		}
		break;		
	}
	return bHandle;
}

/**
 * 根据输入更新列表 
 *
 * \param pApp
 *
 * \return 
 */
Boolean TFriendsGetFriendsForm::_UpdateListByInput(TApplication * pApp)
{
	Boolean bHandle = FALSE;
	int i = 0;
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FriendsGetFriendsForm_FriendsListCoolBarList));
	TBarRowList* pRowList = NULL;
	TBarRow* pBarRow = NULL;
	TBarListItem* pListItem = NULL;
	pRowList = pCoolBarList->Rows();
	if (pRowList)
	{
		pRowList->BeginUpdate();
		pBarRow = pRowList->FirstRow();
		if(pBarRow)
		{
			pListItem = pBarRow->FirstItem();
			if(pListItem)
			{
				if(MatchInput(gItemData[i].pszName,  m_SearchInput) == FALSE)
				{
					pListItem->SetVisible(FALSE, FALSE);
				}
				else
				{
					pListItem->SetVisible(TRUE, FALSE);
				}
					
				i++;
				do
				{
					pListItem = pBarRow->NextItem();
					if(pListItem  == NULL)
						break;

					if(MatchInput(gItemData[i].pszName,  m_SearchInput) == FALSE)
					{
						pListItem->SetVisible(FALSE, FALSE);
					}
					else
					{
						pListItem->SetVisible(TRUE, FALSE);
					}

					i++;
				}while(1);
			}
		}
		pRowList->EndUpdate();
	}
	return bHandle;
}

/**
 * 创建全部好友列表
 *
 * \param pApp
 *
 * \return 
 */
Boolean TFriendsGetFriendsForm::_CreateListAll(TApplication * pApp)
{
	int iRet = eFailed;
	int i = 0;
	tResponseFriendsGetFriends* Response = NULL;
	
	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_FriendsGetFriends, (void **)&Response);	

	//Bmp需要先Destroy
	for(i=0;i <ARR_SIZE(gItemData); i++)
	{
		gItemData[i].id =  0;
		if(  gItemData[i].pBmp!= NULL)
		{
			 gItemData[i].pBmp->Destroy();
			 gItemData[i].pBmp = NULL;									
		}			
	}

	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FriendsGetFriendsForm_FriendsListCoolBarList));
	if (pCoolBarList)
	{
		TBarRowList* pRowList = NULL;
		TBarRow* pBarRow = NULL;
		TBarListItem* pListItem = NULL;
		//背景设置为白色底色
		pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);

		pRowList = pCoolBarList->Rows();
		if (pRowList)
		{
			pRowList->BeginUpdate();
			pRowList->Clear();
			pBarRow = pRowList->AppendRow();

			for (i = 0; i < Response->nArraySize; i++)
			{
				TUChar pszString[64] = {0};

				//添加列表项
				pListItem = pBarRow->AppendItem();
				if (pListItem)
				{
					//设置属性
					pListItem->SetHeight(COOLBAR_ITEM_HEIGHT);
					pListItem->SetCaption(NULL);                       
					pListItem->SetTitle(NULL);
					pListItem->SetIndicatorType(itNone);


					//头像, 先读取磁盘cache,无文件,再下载
					TBitmap* pDownLoadBitmap = NULL;
					 pDownLoadBitmap = LoadImgByUrl(Response->Array[i].tinyurl);
					if(  pDownLoadBitmap != NULL)
					{
						gItemData[i].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
						gItemData[i].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);					
						gItemData[i].HeadMaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem, HEADMASK_X, HEADMASK_Y, HEADMASKBUTTON_W, HEADMASKBUTTON_H, gItemData[i].pBmp, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));					

						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 							
					}
					else
					{
						gItemData[i].HeadMaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem, HEADMASK_X, HEADMASK_Y, HEADMASKBUTTON_W, HEADMASKBUTTON_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default), (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));						
						RenRenAPICommon_DownloadPhoto(Response->Array[i].tinyurl, this->GetWindowHwndId(), i );
					}

					//姓名
					TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->Array[i].name);
					TUString::StrCopy(gItemData[i].pszName, pszString);
					CtrlAddItemToCoolBarList_Lable(this, pListItem, NAME_X, NAME_Y, 0, FONT_NORMAL, pszString, RGB_COLOR_BLACK);

					//在线图标
					
				}

				gItemData[i].id = Response->Array[i].id;
			}
			pRowList->EndUpdate();
		}
	}

	if( Response )
	{
		delete Response;	
	}

	return TRUE;
}

/**
 * 创建来访者列表
 *
 * \param pApp
 *
 * \return 
 */
Boolean TFriendsGetFriendsForm::_CreateListVisitor(TApplication * pApp)
{
	int iRet = eFailed;
	int i = 0;
	tResponseUsersGetVisitors* Response = NULL;
	
	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_UsersGetVisitors, (void **)&Response);	

	//Bmp需要先Destroy
	for(i=0;i <ARR_SIZE(gItemData); i++)
	{
		gItemData[i].id =  0;
		if(  gItemData[i].pBmp!= NULL)
		{
			 gItemData[i].pBmp->Destroy();
			 gItemData[i].pBmp = NULL;									
		}			
	}

	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FriendsGetFriendsForm_FriendsListCoolBarList));
	if (pCoolBarList)
	{
		TBarRowList* pRowList = NULL;
		TBarRow* pBarRow = NULL;
		TBarListItem* pListItem = NULL;
		//背景设置为白色底色
		pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);

		pRowList = pCoolBarList->Rows();
		if (pRowList)
		{
			pRowList->BeginUpdate();
			pRowList->Clear();
			pBarRow = pRowList->AppendRow();

			char uids1[1024]={0};
			char uids2[1024]={0};
			for (i = 0; i < Response->nSize_visitors; i++)
			{
				TUChar pszString[64] = {0};

				//添加列表项
				pListItem = pBarRow->AppendItem();
				if (pListItem)
				{
					//设置属性
					pListItem->SetHeight(COOLBAR_ITEM_HEIGHT);
					pListItem->SetCaption(NULL);                       
					pListItem->SetTitle(NULL);
					pListItem->SetIndicatorType(itNone);


					//头像, 先读取磁盘cache,无文件,再下载
					TBitmap* pDownLoadBitmap = NULL;
					 pDownLoadBitmap = LoadImgByUrl(Response->visitors[i].headurl);
					if(  pDownLoadBitmap != NULL)
					{
						gItemData[i].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
						gItemData[i].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);					
						gItemData[i].HeadMaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem, HEADMASK_X, HEADMASK_Y, HEADMASKBUTTON_W, HEADMASKBUTTON_H, gItemData[i].pBmp, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));					

						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 							
					}
					else
					{
						gItemData[i].HeadMaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem, HEADMASK_X, HEADMASK_Y, HEADMASKBUTTON_W, HEADMASKBUTTON_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default), (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));						
						RenRenAPICommon_DownloadPhoto(Response->visitors[i].headurl, this->GetWindowHwndId(), i );
					}
				}
				
				//姓名
				TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->visitors[i].name);
				TUString::StrCopy(gItemData[i].pszName, pszString);
				CtrlAddItemToCoolBarList_Lable(this, pListItem, LINE1_X, LINE1_Y, 0, FONT_NORMAL, pszString, RGB_COLOR_BLACK);

				//来访时间
				TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->visitors[i].time);
				CtrlAddItemToCoolBarList_Lable(this, pListItem, LINE2_X, LINE2_Y, 0, FONT_SMALL, pszString, RGB_COLOR_GRAY);

				//是否加为好友按钮
				gItemData[i].nOptionButtonID = CtrlAddItemToCoolBarList_Button(this, pListItem, BUTTON_X, BUTTON_Y, BUTTON_W, BUTTON_H, (TUChar*)TResource::LoadConstString(APP_RE_ID_STRING_RequestAddFriend));
				this->HideControl(gItemData[i].nOptionButtonID);
				
				gItemData[i].id = Response->visitors[i].uid;

				//拼接RR_FriendsAreFriends所需参数
				strcat(uids1, RenRenUserInfo.szuid);
				strcat(uids1, ",");
				char tmp[32] = {0};
				sprintf(tmp, "%d,", Response->visitors[i].uid);
				strcat(uids2, tmp);
			}

			//比较是否是好友
			if(Response->nSize_visitors > 0)
			{
				Set_Url_Params(RR_FriendsAreFriends, "uids1", (char*)uids1);	
				Set_Url_Params(RR_FriendsAreFriends, "uids2", (char*)uids2);	
				RenRenAPICommon_Download(RR_FriendsAreFriends, this->GetWindowHwndId(), 0, 0); 				
			}
			pRowList->EndUpdate();
		}
	}

	if( Response )
	{
		delete Response;	
	}

	return TRUE;
}

/**
 * 创建明星机构列表
 *
 * \param pApp
 *
 * \return 
 */
Boolean TFriendsGetFriendsForm::_CreateListPages(TApplication * pApp)
{
	int iRet = eFailed;
	int i = 0;
	tResponsePagesGetList* Response = NULL;
	
	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_PagesGetList, (void **)&Response);	

	//Bmp需要先Destroy
	for(i=0;i <ARR_SIZE(gItemData); i++)
	{
		gItemData[i].id =  0;
		if(  gItemData[i].pBmp!= NULL)
		{
			 gItemData[i].pBmp->Destroy();
			 gItemData[i].pBmp = NULL;									
		}			
	}

	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_FriendsGetFriendsForm_FriendsListCoolBarList));
	if (pCoolBarList)
	{
		TBarRowList* pRowList = NULL;
		TBarRow* pBarRow = NULL;
		TBarListItem* pListItem = NULL;
		//背景设置为白色底色
		pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);

		pRowList = pCoolBarList->Rows();
		if (pRowList)
		{
			pRowList->BeginUpdate();
			pRowList->Clear();
			pBarRow = pRowList->AppendRow();

			for (i = 0; i < Response->nArraySize; i++)
			{
				TUChar pszString[64] = {0};

				//添加列表项
				pListItem = pBarRow->AppendItem();
				if (pListItem)
				{
					//设置属性
					pListItem->SetHeight(COOLBAR_ITEM_HEIGHT);
					pListItem->SetCaption(NULL);                       
					pListItem->SetTitle(NULL);
					pListItem->SetIndicatorType(itNone);

					//姓名
					TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->Array[i].name);
					TUString::StrCopy(gItemData[i].pszName, pszString);
					CtrlAddItemToCoolBarList_Lable(this, pListItem, NAME_X, NAME_Y, 0, FONT_NORMAL, pszString, RGB_COLOR_BLACK);

					//头像, 先读取磁盘cache,无文件,再下载
					TBitmap* pHeadBmp = NULL;
					 pHeadBmp = LoadImgByUrl(Response->Array[i].headurl);
					if(  pHeadBmp != NULL)
					{	
						//公共主页的需要缩放
						gItemData[i].pBmp = TBitmap::Create(HEADPHOTO_W, HEADPHOTO_H, pHeadBmp->GetDepth());
						gItemData[i].pBmp->QuickZoom(pHeadBmp, TRUE, TRUE,RGBA(0,0,0,255));		
						
						pHeadBmp->Destroy();
						pHeadBmp = NULL; 										
						gItemData[i].HeadMaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem, HEADMASK_X, HEADMASK_Y, HEADMASKBUTTON_W, HEADMASKBUTTON_H, gItemData[i].pBmp, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));					
						
					}
					else
					{
						gItemData[i].HeadMaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem, HEADMASK_X, HEADMASK_Y, HEADMASKBUTTON_W, HEADMASKBUTTON_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default), (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));						
						RenRenAPICommon_DownloadPhoto(Response->Array[i].headurl, this->GetWindowHwndId(), i );
					}
				}

				gItemData[i].id = Response->Array[i].page_id;
			}
			
			pRowList->EndUpdate();
		}
	}

	if( Response )
	{
		delete Response;	
	}

	return TRUE;
}

/**
 * 创建全部好友列表
 *
 * \param pszName
 * \param pszName 
 *
 * \return 
 */
//匹配输入
Boolean MatchInput(TUChar* pszName, TUChar* pszInput)
{
	//如果输入为空,则认为是匹配的
	if(pszInput == NULL || *pszInput ==0)
		return TRUE;

	//若首字母串为空,则认为不匹配
	if(pszName == NULL || *pszName == 0)
		return FALSE;

	Int32 nLenName = TUString::StrLen(pszName);
	Int32 nLenInput = TUString::StrLen(pszInput);
	
	//若输入长度大于首字母串长度,则认为不匹配
	if(nLenInput > nLenName)
		return FALSE;

	for(Int32 i=0; i<=nLenName-nLenInput; i++)
	{
		if(TUString::StrNCompare(pszName+i, pszInput, TUString::StrLen(pszInput)) == 0)
			return TRUE;
	}

	return FALSE;
}

