/*!
*@FileName: RenRenForm_Edit.cpp
*@Author: zengying@GoZone
*@Date: 2010-12-28
*@Brief: 编辑界面
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/


#include "RenRenForm_Edit.h"

#include  "TDownload.h"
#include "RenRenAPICommon.h"
#include  "App_RenRenUnicodeScript_str.h"
#include  "ControlBaseTypes.h"

#define TITLE_H	(FONT_NORMAL+12)
#define FOR_H	(FONT_NORMAL+12)
#define EMOTION_BUTTON_H	(40)
#define INPUT_H		(SCR_H - STATUSBAR_H - TITLEBAR_H - KEYBOARD_H - EMOTION_BUTTON_H)		//扣除标题栏,输入框,表情按钮后的区域高度

#define EMOTION_COLUMN		(8)

//表情结构体
tExpression	KxExpression[] =
{
		{APP_RE_ID_BITMAP_laugh,APP_RE_ID_STRING_Laugh},
#if 0
		//第一页
		{APP_RE_ID_BITMAP_e2_i,":)"},
		{APP_RE_ID_BITMAP_e3_i,":*"},
		{APP_RE_ID_BITMAP_e4_i,"^o^"},
		{APP_RE_ID_BITMAP_e5_i,"*o*"},
		{APP_RE_ID_BITMAP_e6_i,":|"},
		{APP_RE_ID_BITMAP_e7_i,":-|"},
		{APP_RE_ID_BITMAP_e8_i,"-_-"},
			
		{APP_RE_ID_BITMAP_e9_i,"B-)"},
		{APP_RE_ID_BITMAP_e10_i,"@_@"},
		{APP_RE_ID_BITMAP_e11_i,";)"},
		{APP_RE_ID_BITMAP_e12_i,":P"},
		{APP_RE_ID_BITMAP_e13_i,":-*"},
		{APP_RE_ID_BITMAP_e14_i,":-O"},
		{APP_RE_ID_BITMAP_e15_i,"8-)"},
		{APP_RE_ID_BITMAP_e16_i,"(^_^)~UU~(^_^)"},

		{APP_RE_ID_BITMAP_e17_i,":S"},
		{APP_RE_ID_BITMAP_e18_i,"?o?"},
		{APP_RE_ID_BITMAP_e19_i,"-_-Zz"},
		{APP_RE_ID_BITMAP_e20_i,"88"},
		{APP_RE_ID_BITMAP_e21_i,"T_T"},
		{APP_RE_ID_BITMAP_e22_i,"8o|"},
		{APP_RE_ID_BITMAP_e23_i,"xc=="},
		{APP_RE_ID_BITMAP_e24_i,">_<#"},
			
		{APP_RE_ID_BITMAP_e25_i,":-x"},
		{APP_RE_ID_BITMAP_e26_i,"@x@"},
		{APP_RE_ID_BITMAP_e27_i,":@"},
		{APP_RE_ID_BITMAP_e28_i,"b(^_^)d"},
		{APP_RE_ID_BITMAP_e29_i,"p(-_-)q"},
		{APP_RE_ID_BITMAP_e30_i,"(^_^)"},
		{APP_RE_ID_BITMAP_e31_i,">_<"},
		{APP_RE_ID_BITMAP_e32_i,">O-"},	

		//第二页
		{APP_RE_ID_BITMAP_e33_i,"(*^o^*)"},
		{APP_RE_ID_BITMAP_e34_i,"orz"},
		{APP_RE_ID_BITMAP_e35_i,"-<-<@"},
		{APP_RE_ID_BITMAP_e36_i,"^v^"},
		{APP_RE_ID_BITMAP_e37_i,"*^_^*"},
		{APP_RE_ID_BITMAP_e38_i,"=^_^="},
		{APP_RE_ID_BITMAP_e39_i,"\\^_^/"},
		{APP_RE_ID_BITMAP_e40_i,"~@^_^@~"},
			
		{APP_RE_ID_BITMAP_e41_i,"Y(^_^)Y"},
		{APP_RE_ID_BITMAP_e42_i,"(^_^)><(^_^)"},
		{APP_RE_ID_BITMAP_e43_i,"/(*w*)\\"},
		{APP_RE_ID_BITMAP_e44_i,"\\^V^/"},
		{APP_RE_ID_BITMAP_e45_i,":-@"},
		{APP_RE_ID_BITMAP_e46_i,"(T_T)"},
		{APP_RE_ID_BITMAP_e47_i,":oo"},
		{APP_RE_ID_BITMAP_e48_i,":-@"},

		{APP_RE_ID_BITMAP_e49_i,":q"},
		{APP_RE_ID_BITMAP_e50_i,"->_->"},
		{APP_RE_ID_BITMAP_e51_i,">'<||||"},
		{APP_RE_ID_BITMAP_e52_i,"=>_<="},
		{APP_RE_ID_BITMAP_e53_i,":("},
		{APP_RE_ID_BITMAP_e54_i,"-_-b"},
		{APP_RE_ID_BITMAP_e55_i,"*-)"},
		{APP_RE_ID_BITMAP_e56_i,"$_$"},
			
		{APP_RE_ID_BITMAP_e57_i,"^_^"},
		{APP_RE_ID_BITMAP_e58_i,"@-_-@"},
		{APP_RE_ID_BITMAP_e59_i,"o(^_^)o"},
		{APP_RE_ID_BITMAP_e60_i,"(^w^)"},
		{APP_RE_ID_BITMAP_e61_i,"\\shit/"},
		{APP_RE_ID_BITMAP_e62_i,"~^o^~"},
		{APP_RE_ID_BITMAP_e63_i,"<(^_^)>"},
		{APP_RE_ID_BITMAP_e64_i,"o(*^_^*)o"},

		//第三页
		{APP_RE_ID_BITMAP_e65_i,"(*+_+*)!!"},
		{APP_RE_ID_BITMAP_e66_i,"*(^o^)*"},
		{APP_RE_ID_BITMAP_e67_i,"T_T"},
		{APP_RE_ID_BITMAP_e68_i,"(=^ ^=)"},
		{APP_RE_ID_BITMAP_e69_i,"U^o^U"},
		{APP_RE_ID_BITMAP_e70_i,"\\ghost/"},
		{APP_RE_ID_BITMAP_e71_i,"8:|"},
		{APP_RE_ID_BITMAP_e72_i,"~^o^~=>'"},
			
		{APP_RE_ID_BITMAP_e73_i,"\\*^o^*/"},
		{APP_RE_ID_BITMAP_e74_i,"O+"},
		{APP_RE_ID_BITMAP_e75_i,"O->"},
		{APP_RE_ID_BITMAP_e76_i,"~~>_<+"},
		{APP_RE_ID_BITMAP_e77_i,"\\BS/"},
		{APP_RE_ID_BITMAP_e78_i,"m(_ _)m"},
		{APP_RE_ID_BITMAP_e79_i,":B"},
		{APP_RE_ID_BITMAP_e80_i,"8^_^"},

		{APP_RE_ID_BITMAP_e81_i,"^_<~"},
		{APP_RE_ID_BITMAP_e82_i,"~_~"},
		{APP_RE_ID_BITMAP_e83_i,"\\VV/"},
		{APP_RE_ID_BITMAP_e84_i,"\\oV"},
		{APP_RE_ID_BITMAP_e85_i,"\\OK/"},
		{APP_RE_ID_BITMAP_e86_i,"\\ZD/"},
		{APP_RE_ID_BITMAP_e87_i,"\\knife/"},
		{APP_RE_ID_BITMAP_e88_i,"\\GZ/"},
			
		{APP_RE_ID_BITMAP_e89_i,"\\MS/"},
		{APP_RE_ID_BITMAP_e90_i,"\\KL/"},
		{APP_RE_ID_BITMAP_e91_i,"(=..=)"},
		{APP_RE_ID_BITMAP_e92_i,"\\QG/"},
		{APP_RE_ID_BITMAP_e93_i,"\\JX/"},
#endif
};

//状态的表情结构体
tExpression	KxStateExpression[] =
{
		{APP_RE_ID_BITMAP_laugh,APP_RE_ID_STRING_Laugh},
		{APP_RE_ID_BITMAP_smile,APP_RE_ID_STRING_Smile},
		{APP_RE_ID_BITMAP_cry,APP_RE_ID_STRING_Cry},
		{APP_RE_ID_BITMAP_amaze,APP_RE_ID_STRING_Amaze},
		{APP_RE_ID_BITMAP_angry,APP_RE_ID_STRING_Angry},
		{APP_RE_ID_BITMAP_sorrow,APP_RE_ID_STRING_Sorrow},
		{APP_RE_ID_BITMAP_shy,APP_RE_ID_STRING_Shy},
		{APP_RE_ID_BITMAP_sleepy,APP_RE_ID_STRING_Sleepy},
			
		{APP_RE_ID_BITMAP_bookworm,APP_RE_ID_STRING_Bookworm},
		{APP_RE_ID_BITMAP_tiaopi,APP_RE_ID_STRING_TiaoPi},
		{APP_RE_ID_BITMAP_xianxiao,APP_RE_ID_STRING_XianXiao},
		{APP_RE_ID_BITMAP_sick,APP_RE_ID_STRING_Sick},
		{APP_RE_ID_BITMAP_ganga,APP_RE_ID_STRING_GanGa},
		{APP_RE_ID_BITMAP_han,APP_RE_ID_STRING_Han},
		{APP_RE_ID_BITMAP_jingkong,APP_RE_ID_STRING_JingKong},
		{APP_RE_ID_BITMAP_jiong,APP_RE_ID_STRING_Jiong},

		{APP_RE_ID_BITMAP_cool,APP_RE_ID_STRING_Cool},
		{APP_RE_ID_BITMAP_liukoushui,APP_RE_ID_STRING_LiuKouShui},
		{APP_RE_ID_BITMAP_maomaoxiao,APP_RE_ID_STRING_MaoMaoXiao},
		{APP_RE_ID_BITMAP_yun,APP_RE_ID_STRING_Yun},
		{APP_RE_ID_BITMAP_se,APP_RE_ID_STRING_Se},
		{APP_RE_ID_BITMAP_keai,APP_RE_ID_STRING_KeAi},
		{APP_RE_ID_BITMAP_chifan,APP_RE_ID_STRING_ChiFan},
		{APP_RE_ID_BITMAP_kouzhao,APP_RE_ID_STRING_KouZhao},
			
		{APP_RE_ID_BITMAP_taoqi,APP_RE_ID_STRING_TaoQi},
		{APP_RE_ID_BITMAP_shutup,APP_RE_ID_STRING_Shutup},
		{APP_RE_ID_BITMAP_koubi,APP_RE_ID_STRING_Kb},
		{APP_RE_ID_BITMAP_sx,APP_RE_ID_STRING_Sx},
		{APP_RE_ID_BITMAP_zmx,APP_RE_ID_STRING_Zmy},
		{APP_RE_ID_BITMAP_jh,APP_RE_ID_STRING_Jh},
		{APP_RE_ID_BITMAP_cold,APP_RE_ID_STRING_Cold},
		{APP_RE_ID_BITMAP_bw,APP_RE_ID_STRING_Bw},	

		{APP_RE_ID_BITMAP_gl,APP_RE_ID_STRING_Gl},
		{APP_RE_ID_BITMAP_bgl,APP_RE_ID_STRING_Bgl},
		{APP_RE_ID_BITMAP_yl,APP_RE_ID_STRING_Yl},
		{APP_RE_ID_BITMAP_hua,APP_RE_ID_STRING_Hua},
		{APP_RE_ID_BITMAP_mifeng,APP_RE_ID_STRING_MiFeng},
		{APP_RE_ID_BITMAP_sn,APP_RE_ID_STRING_Sn},
		{APP_RE_ID_BITMAP_nuomi,APP_RE_ID_STRING_NuoMi},
		{APP_RE_ID_BITMAP_qingt,APP_RE_ID_STRING_Qt},
			
		{APP_RE_ID_BITMAP_laba,APP_RE_ID_STRING_Lb},
};

TAppEditForm::TAppEditForm(TApplication * pApp):TWindow(pApp)
{	
	//Save special control ID
	m_TitleBtnLeft = 0;//发表按钮
	m_TitleBtnRight= 0;//返回按钮

	m_nExpressionBtnID = 0;//表情按钮
	m_nPhotoBtnID = 0;//照片按钮
	
	m_nLocationBtnID = 0;//位置按钮
	m_nLocationLblID = 0;//位置文字标签

	m_nTitleEditID = 0;//标题或收件人编辑控件
	m_nContentEditID = 0;//内容编辑控件

	m_nExpressionTPanelID = 0;//表情TPanel编辑控件
	m_bShowExpress = FALSE;
	
	memset(m_nExpCtrlID, 0, sizeof(m_nExpCtrlID) );
	
	Create(APP_RE_ID_EditForm);
}

TAppEditForm::TAppEditForm( TApplication *pApp,PostNotifyMsgDataType in_msgData):TWindow(pApp)
{
	bModified = FALSE;

	//Save special control ID
	m_TitleBtnLeft = 0;//发表按钮
	m_TitleBtnRight= 0;//返回按钮
	
	m_nExpressionBtnID = 0;//表情按钮
	m_nPhotoBtnID = 0;//照片按钮
	
	m_nLocationBtnID = 0;//位置按钮
	m_nLocationLblID = 0;//位置文字标签

	m_nTitleEditID = 0;//标题或收件人编辑控件	
	m_nContentEditID = 0;//内容编辑控件

	m_nExpressionTPanelID = 0;//表情TPanel编辑控件
	m_bShowExpress = FALSE;
	
	memset(m_nExpCtrlID, 0, sizeof(m_nExpCtrlID) );
	
	m_msgData = in_msgData;

	//获得主进程GTID
	SS_GetCurrentGTID(&gtidMain);

	if(m_msgData.IsPopEdit)
	{
		Create(APP_RE_ID_PopEditForm);
	}
	else
	{	
		Create(APP_RE_ID_EditForm);
	}
}

// 析构函数
TAppEditForm::~TAppEditForm(void)
{

}

// 窗口事件处理
Boolean TAppEditForm::EventHandler( TApplication * pApp, EventType *pEvent )
{
	Boolean bHandled = FALSE;
	switch( pEvent->eType )
	{
		case EVENT_WinInit:
		{
			// Do initialization here
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
		}
		break;
 		case EVENT_FieldChanged:
		{
			bModified = TRUE;
		}		
		case EVENT_CtrlSelect:
		{
			// 处理控件点击事件或响应事件
			bHandled = _OnCtlSelectEvent( pApp, pEvent );
		}
		break;
		case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
		}
		break;			
		case EVENT_CtrlKillFocus:
		{
			bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
		}
		break;			
		case EVENT_WinClose:
		{
			// Do uninitialization here
		}
		break;
	case EVENT_WinEraseClient:
		{
			if(pEvent->sParam1 == 0)
			{							
				if(m_msgData.IsPopEdit == TRUE)
				{
						WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );

						TDC 	   dc(this);
						TRectangle rc(pEraseEvent->rc);
						TRectangle rcBack;
						this->GetBounds(&rcBack);
						
						// 擦除
						dc.EraseRectangle(&rc, 0);
						
						dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Frame_Bg_Top), rc.X(), rc.Y(), rc.Width(),GUI_API_STYLE_ALIGNMENT_CENTER);
						dc.DrawBitmapsV(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Frame_Bg_Mid), rc.X(), rc.Y() + 24, rc.Height() - 31, GUI_API_STYLE_ALIGNMENT_CENTER);
						dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Frame_Bg_Bottom), rc.X(), rc.Y()+rc.Height() - 7, rc.Width(), GUI_API_STYLE_ALIGNMENT_CENTER); 
							
						pEraseEvent->result = 1;
				}
				else
				{

					TDC 	   dc(this);
					WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
					TRectangle rc(pEraseEvent->rc);
					TRectangle rcBack;
					this->GetBounds(&rcBack);
					
					// 擦除
					dc.EraseRectangle(&rc, 0);
					
					dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
									
					pEraseEvent->result = 1;
				}
			}
			bHandled = TRUE;
		}
		break;		
		case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
			break;
		}

		//下载完成消息
		case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			
			bHandled = TRUE;
			break;
		}
		case EVENT_KeyCommand: 
				{ 
					// 抓取右软键事件 
					if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
						|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
					{ 
						// 模拟退出按钮选中消息 
						HitControl(m_TitleBtnRight); 
						bHandled = TRUE; 
					} 
				} 
				break;	
	}
	return bHandled;

}

// 窗口初始化
Boolean TAppEditForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//Open Input Method
	ImeOpenIme( IME_MODE_STATIC,	IME_CLASS_CHINESE);
	if(m_msgData.IsPopEdit)
	{
		m_TitleBtnLeft = APP_RE_ID_PopEditForm_ComfirmBtn;
		m_TitleBtnRight = APP_RE_ID_PopEditForm_CancelBtn;
		m_nContentEditID = APP_RE_ID_PopEditForm_EditField;
		this->SetFocus(APP_RE_ID_PopEditForm_EditField);
		//设置按钮显示
		TButton* pButton = static_cast<TButton*>(GetControlPtr(m_TitleBtnLeft));
		pButton->SetCaption(TResource::LoadConstString(this->m_msgData.nPublicBtnCaptionStrID), FALSE);
		//设置标题
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_PopEditForm_EditCoolBarList));
		//大行类，它管理 N个TBarRow对象
		TBarRowList* pRowList = NULL;
		//小行类，管理N个TBarListItem 对象
		TBarRow* pBarRow = NULL;
		pRowList = pCoolBarList->Rows();
		//add row
		if (pRowList)
		{
			pBarRow = pRowList->FirstRow();
			if(pBarRow)
			{
				pBarRow->SetCaption(TResource::LoadConstString(this->m_msgData.nAppTitleStrID));
			}
		}

		TEdit* tContentEdit = reinterpret_cast<TEdit*>(this->GetControlPtr(this->m_nContentEditID));
		if(tContentEdit)
		{		
			tContentEdit->SetMaxChars(this->m_msgData.nTitleEditMaxChars);//最大数

			if(m_msgData.IsPwdInput)
			{
				TUChar MaskChar[1] = {'*'};
				tContentEdit->SetMaskChar(MaskChar[0]);
				tContentEdit->Draw();
			}				
		}
	}
	else
	{		
		//创建标题标签 for Title
		SetAppTilte(this,this->m_msgData.nAppTitleStrID);
		m_TitleBtnLeft = SetAppTitleButton(this, this->m_msgData.nPublicBtnCaptionStrID,TITLE_BUTTON_LEFT);
		m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
		_OnCreateEditInterface(pApp);
	}
	return TRUE;
}

// 控件点击事件处理
Boolean TAppEditForm::_OnCtlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;

	if((pEvent->sParam1) == m_TitleBtnRight)//退出之前确认内容是否为空
	{
		TEdit* tTitleEdit =static_cast< TEdit* >(GetControlPtr(this->m_nTitleEditID));
		TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
		if(bModified == TRUE)
		{
			if(pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_AreYouSureToBack),TResource::LoadConstString(APP_RE_ID_STRING_Back),WMB_OKCANCEL) == 0)
			{
				this->CloseWindow();
				bHandled = TRUE;
			}
			else
			{
				bHandled = TRUE;//不退出
			}
		}
		else
		{
			//不提示直接退出
			this->CloseWindow();
			bHandled = TRUE;			
		}
	}
	else if((pEvent->sParam1) == this->m_TitleBtnLeft)
	{
		if(m_msgData.IsAllowsNull)
		{
			this->_OnSetMsgData();
			this->_OnNotifyToMain();
			this->CloseWindow(); 		
		}
		else
		{
			TEdit* tTitleEdit =static_cast< TEdit* >(GetControlPtr(this->m_nTitleEditID));
			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
			if(tTitleEdit&&(TUString::StrCompare(tTitleEdit->GetCaption(),TUSTR_Re_NULL)==0))
			{
				pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_TitleShouldNotBeEmpty),TResource::LoadConstString(APP_RE_ID_STRING_Publish),WMB_OK);
				this->SetFocus(m_nTitleEditID);
			}
			else if(tContentEdit&&(TUString::StrCompare(tContentEdit->GetCaption(),TUSTR_Re_NULL)==0))
			{
				pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_ContentShouldNotBeEmpty),TResource::LoadConstString(APP_RE_ID_STRING_Publish),WMB_OK);
				this->SetFocus(m_nContentEditID);
			}
			else
			{
				this->_OnSetMsgData();
				this->_OnNotifyToMain();
				this->CloseWindow(); 
			}
		}
		bHandled = TRUE;
	}
	else if((pEvent->sParam1) == this->m_nExpressionBtnID)
	{
		if(m_bShowExpress)		
		{
			TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
			if(tExpressionBtn)
			{
				tExpressionBtn->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_Expression), FALSE);
			}
			m_bShowExpress = FALSE;
			ImeOpenIme( IME_MODE_STATIC,  IME_CLASS_CHINESE);

			TEdit* pContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
			if(pContentEdit)
			{
				//Int32 InPos = GetShowAllStringWidth((TUChar*)pContentEdit->GetCaption(),pContentEdit->GetFont());
				//pContentEdit->SetInsPtPosition(InPos);
				this->SetFocus(m_nContentEditID);//设置content为focus
			}
		}
		else
		{
			TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
			if(tExpressionBtn)
			{
				tExpressionBtn->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_KeyPad), FALSE);
			}
			ImeCloseIme();
			m_bShowExpress = TRUE;
		}
		bHandled = TRUE;
	}
	else
	{
		if(m_msgData.IsExpressionBtn)
		{
			for(int i = 0; i < ARR_SIZE(KxStateExpression); i++)
			{
				if(m_nExpCtrlID[i] == pEvent->sParam1)
				{
					TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
					
					if(tContentEdit)
					{
						TUChar pCaption[EDIT_MAX_LENGTH_CONTENT*3+1]={0};
						TUChar* pExpString = (TUChar *)TResource::LoadConstString(KxStateExpression[i].nExpStringId);
						
						TUString::StrCat(pCaption, tContentEdit->GetCaption());
						//表情输入控制，确保表情字串整体输入
						if( TUString::StrLen((const TUChar *)pCaption) + TUString::StrLen(pExpString) <= tContentEdit->GetMaxChars())
						{
							tContentEdit->Insert(pExpString, TUString::StrLen(pExpString));
							//TUString::StrCat(pCaption, TResource::LoadConstString(KxStateExpression[i].nExpStringId));
							//tContentEdit->SetCaption(pCaption, FALSE);
							bModified = TRUE;
						}
						else
						{
							//插入表情字串后，编辑框将超过最大长度
							pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_InsertExpressionWarning),NULL,WMB_OK); 							
						}					
						bHandled = TRUE;
					}
				}
			}
		}
		else
		{
			for(int i = 0; i < ARR_SIZE(KxExpression); i++)
			{
				if(m_nExpCtrlID[i] == pEvent->sParam1)
				{
					TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
					
					if(tContentEdit)
					{
						TUChar pCaption[EDIT_MAX_LENGTH_CONTENT*3+1]={0};
						TUChar* pExpString = (TUChar *)TResource::LoadConstString(KxExpression[i].nExpStringId);

						TUString::StrCat(pCaption, tContentEdit->GetCaption());

						//表情输入控制，确保表情字串整体输入
						if( TUString::StrLen((const TUChar *)pCaption) + TUString::StrLen(pExpString) <= tContentEdit->GetMaxChars())
						{
							//TUString::StrCat(pCaption, TResource::LoadConstString(KxExpression[i].nExpStringId));
							//tContentEdit->SetCaption(pCaption, FALSE);
							tContentEdit->Insert(pExpString, TUString::StrLen(pExpString));
							bModified = TRUE;
						}						
						else
						{
							//插入表情字串后，编辑框将超过最大长度
							pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_InsertExpressionWarning),NULL,WMB_OK); 							
						}
						bHandled = TRUE;
					}
				}
			}
		}
	}	
	return bHandled;
}
//控件获取焦点
Boolean TAppEditForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 
	if(CtrlID == this->m_nTitleEditID)
	{	
		TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
		if(tExpressionBtn)
		{
			tExpressionBtn->SetEnabled(FALSE);
			tExpressionBtn->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_Expression), FALSE);
			m_bShowExpress = FALSE;
			ImeOpenIme( IME_MODE_STATIC, IME_CLASS_CHINESE);			
		}		

		bHandled = TRUE;
	}	
	else if(CtrlID == m_nContentEditID)
	{
		TEdit* pContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
		if(pContentEdit)
		{
			//Int32 InPos = GetShowAllStringWidth((TUChar*)pContentEdit->GetCaption(),pContentEdit->GetFont());
			//pContentEdit->SetInsPtPosition(InPos);
		}
		
		TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
		if(tExpressionBtn)
		{
			tExpressionBtn->SetEnabled(TRUE);
			tExpressionBtn->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_Expression), FALSE);
			m_bShowExpress = FALSE;
			ImeOpenIme( IME_MODE_STATIC,	IME_CLASS_CHINESE);			
		}
		
		bHandled = TRUE;
	}	
#if 0
	else if((pEvent->sParam1) == this->m_nExpressionBtnID)
	{
		TPanel* tExpressionTPanel =static_cast< TPanel* >(GetControlPtr(this->m_nExpressionTPanelID));
		if(tExpressionTPanel)
		{
			if(tExpressionTPanel->IsVisible()==FALSE)
			{
				tExpressionTPanel->Show(TRUE);
			}

			bHandled = TRUE;
		}
	}
	#endif
		
	return bHandled;	

}
//控件丢失焦点
Boolean TAppEditForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	return bHandled;
}

/**
 * 创建编辑主界面
 *
 * \param pApp
 *
 * \return 
 */
Int32 TAppEditForm::_OnCreateEditInterface(TApplication * pApp)
{
	Int32 bnRetCod = 0;
	TPanel* pTPanelEditContent = NULL;
	TRectangle obBtnRec;
	TFont tFont;
	
	TUChar ReceiverCaption[128] = {0};
	TUChar TitleEditCaption[128] = {0};
	TUChar ContentEditCaption[1024] = {0};
	
	TUString::StrUtf8ToStrUnicode(ReceiverCaption, (const Char*)m_msgData.pszReceiver);
	TUString::StrUtf8ToStrUnicode(TitleEditCaption, (const Char*)m_msgData.pszEditTitle);
	TUString::StrUtf8ToStrUnicode(ContentEditCaption, (const Char*)m_msgData.pszEditContent);

	//创建TPanel: content Edit TPanel
	obBtnRec.SetRect(0,TITLEBAR_H, SCR_W, INPUT_H); 
	pTPanelEditContent =new TPanel;
	if(pTPanelEditContent->Create(this))
	{	
		Int32 SpaceH = 5;
		Int32 SpaceW = 5;
		Int32 Height = SpaceH;//用来记录控件高度，以便计算下个控件应设置在哪个高度上
		TRectangle TRC;
		
		pTPanelEditContent->SetBounds(&obBtnRec);
		pTPanelEditContent->SetFrameWidth(0);
		pTPanelEditContent->Show(TRUE);
		pTPanelEditContent->SetVerticalDragMode(cdmDisable);

		if(this->m_msgData.IsReceiverEdit)
		{			
			//创建TEdit  : for  收件人
			TEdit* pReceiverEdit =new TEdit;	
			obBtnRec.SetRect(SpaceW, Height, SCR_W-SpaceW*2, FOR_H);
				
			if(pReceiverEdit->Create(pTPanelEditContent))
			{		
				pReceiverEdit->SetBounds(&obBtnRec);	 
				tFont = pReceiverEdit->GetFont();
				tFont.Create(FONT_NORMAL, FONT_NORMAL);
				pReceiverEdit->SetFont(tFont);
				pReceiverEdit->SetFrameWidth(0);

				pReceiverEdit->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
				pReceiverEdit->SetColor(CTL_COLOR_TYPE_SELECTED_BACK, RGB_COLOR_WHITE);
				pReceiverEdit->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_WHITE);			
				pReceiverEdit->SetCaption(ReceiverCaption,FALSE);
				pReceiverEdit->SetTitleFont(tFont);
				// 设置edit不可编辑
				Boolean  bRead = pReceiverEdit->SetModify(FALSE);			
				pReceiverEdit->SetWordWrap(TRUE);
				pReceiverEdit->SetEnabled(FALSE);
				pReceiverEdit->SetUnderline(TRUE);
				pReceiverEdit->SetScrollMode(CTL_SCL_MODE_VERTICAL);				
				pReceiverEdit->SetTitle(TResource::LoadConstString(APP_RE_ID_STRING_Receiver),FALSE);
				pReceiverEdit->Show(TRUE);
				
				pReceiverEdit->GetBounds(&TRC);				
				Height = Height + TRC.Height()+ SpaceH;
			}
			else
			{
				bnRetCod++;
			}
						
		}


		if(this->m_msgData.IsTitleEdit)
		{			
			//创建TEdit  : for 标题 
			TEdit* pTitleEdit =new TEdit;	
			obBtnRec.SetRect(SpaceW,Height,SCR_W-SpaceW*2, TITLE_H);
				
			if(pTitleEdit->Create(pTPanelEditContent))
			{		
				pTitleEdit->SetBounds(&obBtnRec);	 
				this->m_nTitleEditID = pTitleEdit->GetId(); //save TitleEdit ID				
				tFont = pTitleEdit->GetFont();
				tFont.Create(FONT_NORMAL, FONT_NORMAL);
				pTitleEdit->SetFont(tFont);
				pTitleEdit->SetFrameWidth(0);

				pTitleEdit->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
				pTitleEdit->SetColor(CTL_COLOR_TYPE_SELECTED_BACK, RGB_COLOR_WHITE);
				pTitleEdit->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_WHITE);			
				pTitleEdit->SetCaption(TitleEditCaption,FALSE);
				pTitleEdit->SetTitleFont(tFont);
				// 设置edit可编辑
				Boolean  bRead = pTitleEdit->SetModify(TRUE);			
				pTitleEdit->SetWordWrap(TRUE);
				pTitleEdit->SetEnabled(TRUE);
				pTitleEdit->SetUnderline(TRUE);
				pTitleEdit->SetScrollMode(CTL_SCL_MODE_VERTICAL);
				
				pTitleEdit->SetMaxChars(this->m_msgData.nTitleEditMaxChars);//最大数
				pTitleEdit->SetTitle(TResource::LoadConstString(APP_RE_ID_STRING_Title),FALSE);
				pTitleEdit->SetImeClass(0);	
				pTitleEdit->Show(TRUE);
				
				pTitleEdit->GetBounds(&TRC);				
				Height = Height + TRC.Height()+ SpaceH;
				
				Int32 InPos = GetShowAllStringWidth((TUChar*)pTitleEdit->GetCaption(),tFont);
				pTitleEdit->SetInsPtPosition(InPos);
				this->SetFocus(m_nTitleEditID);//设置title为focus
			}
			else
			{
				bnRetCod++;
			}
			
			//创建标题标签 for content title
			TLabel* pContentTitleLable =new TLabel; 	
			obBtnRec.SetRect(SpaceW,Height,10,30);
			
			if(pContentTitleLable->Create(pTPanelEditContent))
			{		
				pContentTitleLable->SetBounds(&obBtnRec);		
				pContentTitleLable->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_Content),FALSE);
				pContentTitleLable->SetFrameWidth(1);
			
				//自适应文字大小
				pContentTitleLable->SetAutoSize(TRUE);
			
				tFont = pContentTitleLable->GetFont();
				tFont.Create(FONT_NORMAL, FONT_NORMAL);
				pContentTitleLable->SetFont(tFont); 		
				pContentTitleLable->Show(TRUE);
				pContentTitleLable->GetBounds(&TRC);				
				Height = Height + TRC.Height();//+ SpaceH
			}
			else
			{
				bnRetCod++;
			}
		}

		//创建TEdit  :content
#if 0		
		if(this->m_msgData.IsTitleEdit && this->m_msgData.IsReceiverEdit)
		{
			obBtnRec.SetRect(SpaceW,Height,SCR_W-2*SpaceW,INPUT_H - TITLE_H - FOR_H);
		}
		else if(this->m_msgData.IsTitleEdit && !this->m_msgData.IsReceiverEdit)
		{
			obBtnRec.SetRect(SpaceW,Height,SCR_W-2*SpaceW,INPUT_H - TITLE_H);
		}
		else
		{
			obBtnRec.SetRect(SpaceW,Height,SCR_W-2*SpaceW, INPUT_H);//整个TPanel都是TEdit
		}
#endif
		Int32 ContentHeight = 0;	//需要取整
		ContentHeight = ((INPUT_H - Height)/FONT_NORMAL)*FONT_NORMAL;
		obBtnRec.SetRect(SpaceW,Height,SCR_W-2*SpaceW, ContentHeight);
		TEdit* pContentEdit =new TEdit;
		if(pContentEdit->Create(pTPanelEditContent))
		{		
			pContentEdit->SetBounds(&obBtnRec);		
			this->m_nContentEditID = pContentEdit->GetId(); 
			
			tFont = pContentEdit->GetFont();
			tFont.Create(FONT_NORMAL, FONT_NORMAL);
			pContentEdit->SetFont(tFont);
			pContentEdit->SetFrameWidth(1);

			pContentEdit->SetCaption(ContentEditCaption,FALSE);
			// 设置edit可编辑
			Boolean  bRead = pContentEdit->SetModify(TRUE);	
			//自适应文字大小
//				pContentEdit->SetAutoSize(FALSE);
			pContentEdit->SetMultiline(TRUE);//设置多行
			pContentEdit->SetWordWrap(TRUE);
			pContentEdit->SetEnabled(TRUE);
			pContentEdit->SetMaxChars(this->m_msgData.nContentEditMaxChars);//最大数
			pContentEdit->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
			pContentEdit->SetColor(CTL_COLOR_TYPE_SELECTED_BACK, RGB_COLOR_WHITE);
			pContentEdit->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_WHITE);	
			
		/*	Coord RowWidth =10;
			TRectangle*   pRc;

			pRc = &obBtnRec;			
			Int32 VisibleLines = 4;		
			if(pRc)
			{
				VisibleLines = (Int32)(pRc->Height())/(Int32)(RowWidth)/2;
				pContentEdit->SetRowSpace(RowWidth,TRUE);
			}
			
			pContentEdit->SetMaxVisibleLines(VisibleLines);//最多能看见几行
			*/
			Coord ContentHeight = obBtnRec.Height();
			Coord ContentLineHeight = pContentEdit->GetLineHeight();
			pContentEdit->SetMaxVisibleLines(ContentHeight/ContentLineHeight );
			pContentEdit->SetUnderline(TRUE);
				
			//怎么设定边框呢
			pContentEdit->SetTitle(NULL,FALSE);
			pContentEdit->SetImeClass(0);		
			pContentEdit->Show(TRUE);

			if(!m_msgData.IsTitleEdit)//如果没有标题则设content为focus
			{	
				this->SetFocus(m_nContentEditID);
			}
		}
		else
		{
			bnRetCod++;
		}		

		if(this->m_msgData.IsExpressionBtn)
		{
			//创建表情按钮
			TButton* pExpressionBtn=new TButton ;
			//obBtnRec.SetRect(SpaceW,Height,53,35);		
			obBtnRec.SetRect(10,SCR_H-STATUSBAR_H - KEYBOARD_H - EMOTION_BUTTON_H, 90, EMOTION_BUTTON_H); 
			if(pExpressionBtn->Create(this))
			{
				pExpressionBtn->SetBounds(&obBtnRec);	
				this->m_nExpressionBtnID = pExpressionBtn->GetId();//Save Expression Button ID.
				pExpressionBtn->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_Expression),TRUE);
				tFont = pExpressionBtn->GetFont();
				tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
				pExpressionBtn->SetFont(tFont);
				pExpressionBtn->SetEnabled(TRUE);
				pExpressionBtn->Show(TRUE);
			}
			else
			{
				bnRetCod++;
			}

		}
		else
		{
			bnRetCod++;
		}

#if 0
		if(this->m_msgData.IsPhotoBtn)
		{
			//创建照片按钮
			TButton* pPhotoBtn=new TButton ;
			if(this->m_msgData.IsExpressionBtn)
			{
				obBtnRec.SetRect(SpaceW + 60 + SpaceW, Height, 53, 35);
			}
			else
			{
				obBtnRec.SetRect(SpaceW, Height, 53, 35);
			}				
			
			if(pPhotoBtn->Create(pTPanelEditContent))
			{
				pPhotoBtn->SetBounds(&obBtnRec);	
				m_nPhotoBtnID = pPhotoBtn->GetId();//Save Photo Button ID.
				pPhotoBtn->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_Photo),TRUE);
				tFont = pPhotoBtn->GetFont();
				tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
				pPhotoBtn->SetFont(tFont);
				pPhotoBtn->Hide(TRUE);//暂时设成不可视		
			}
			else
			{
				bnRetCod++;
			}			
		}

		if(this->m_msgData.IsLocationBtn)
		{
			//创建位置按钮
			TButton* pLocationBtn =new TButton ;
			obBtnRec.SetRect(250,Height,53,35); 			
			
			if(pLocationBtn->Create(pTPanelEditContent))
			{
				pLocationBtn->SetBounds(&obBtnRec);	
				m_nLocationBtnID = pLocationBtn->GetId();//Save location Button ID.
				pLocationBtn->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_Location),TRUE);
				tFont = pLocationBtn->GetFont();
				tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
				pLocationBtn->SetFont(tFont);
				pLocationBtn->Hide(TRUE);//暂时设成不可视				
			}
			else
			{
				bnRetCod++;
			}

			//需要再创建一个Image，还有一个位置标签并且设成Hide(TRUE), 当位置标签被点击时，才显示，

			
		}
#endif
		//创建私密设置Checkbox
		if(this->m_msgData.IsPrivacyCtl)
		{
			TCheckBox* pPrivacyCtl =new TCheckBox;		
			//obBtnRec.SetRect(250-30,Height + 10,90,35);
			obBtnRec.SetRect(SCR_W*2/3,SCR_H-STATUSBAR_H - KEYBOARD_H - EMOTION_BUTTON_H, SCR_W/4, EMOTION_BUTTON_H);
			if(pPrivacyCtl->Create(this))
			{		
				pPrivacyCtl->SetBounds(&obBtnRec);	
				m_nPrivacyCtlID = pPrivacyCtl->GetId();//Save control ID

				tFont = pPrivacyCtl->GetFont();
				tFont.Create(FONT_MIDDLE, FONT_MIDDLE);
				pPrivacyCtl->SetFont(tFont);

				pPrivacyCtl->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_Whisper),FALSE);
				
				pPrivacyCtl->SetValue(m_msgData.bPrivacy);
				pPrivacyCtl->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
		}
	}
	else
	{
		bnRetCod++;
	}

	//这里还要补充一个TPanel，用于显示当前有多少个表情的
	if(m_msgData.IsExpressionBtn)
	{
		obBtnRec.SetRect(0, SCR_H-STATUSBAR_H - KEYBOARD_H, SCR_W, KEYBOARD_H);
		TPanel* pTPanelEditExpression =new TPanel;
		if(pTPanelEditExpression->Create(this))
		{
			pTPanelEditExpression->SetBounds(&obBtnRec);
			pTPanelEditExpression->SetTransparent(FALSE);
			pTPanelEditExpression->SetColor(CTL_COLOR_TYPE_BACK, WHITE);
			m_nExpressionTPanelID = pTPanelEditExpression->GetId();//保存表情TPanel ID
			pTPanelEditExpression->SetFrameWidth(0);
			//pTPanelEditExpression->Hide(TRUE);//初始应该为不可见
		
			//增加表情icons image
			if(m_msgData.IsExpressionBtn == TRUE)
			{
				for(int i = 0; i < ARR_SIZE(KxStateExpression); i++)
				{			
					TMaskButton* pExpImageBtn =new TMaskButton; 	
					obBtnRec.SetRect((SCR_W/EMOTION_COLUMN) * (i%EMOTION_COLUMN), (SCR_W/EMOTION_COLUMN)*(i/EMOTION_COLUMN),40,40);//暂定每行8个 每个表情Image（40*40）
					if(pExpImageBtn->Create(pTPanelEditExpression))
					{
						this->m_nExpCtrlID[i]= pExpImageBtn->GetId();//save TImage ID
						const TBitmap * pBackBmp = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_smalllogoborder);
						const TBitmap * pBmp = TResource::LoadConstBitmap(KxStateExpression[i].nExpIcon);
						pExpImageBtn->SetBounds(&obBtnRec);
						pExpImageBtn->SetSelImage(pBmp,(40-pBmp->GetWidth())/2, (40-pBmp->GetHeight())/2);
						//pExpImageBtn->SetBackImage(pBackBmp,0,0);
						pExpImageBtn->SetMaskImage(pBmp, pBackBmp, pBmp);
						pExpImageBtn->SetColor(GRAY,GRAY,BLUE,BLUE,PURPLE,PURPLE);
						pExpImageBtn->SetBounds(&obBtnRec);   
					}
				}
			}
			else
			{
				for(int i = 0; i < ARR_SIZE(KxExpression); i++)
				{			
					TMaskButton* pExpImageBtn =new TMaskButton; 	
					obBtnRec.SetRect((SCR_W/EMOTION_COLUMN) * (i%EMOTION_COLUMN), (SCR_W/EMOTION_COLUMN)*(i/EMOTION_COLUMN),40,40);//暂定每行8个 每个表情Image（40*40）
					if(pExpImageBtn->Create(pTPanelEditExpression))
					{
						this->m_nExpCtrlID[i]= pExpImageBtn->GetId();//save TImage ID
						const TBitmap * pBackBmp = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_smalllogoborder);
						const TBitmap * pBmp = TResource::LoadConstBitmap(KxExpression[i].nExpIcon);
						pExpImageBtn->SetBounds(&obBtnRec);
						pExpImageBtn->SetSelImage(pBmp,(40-pBmp->GetWidth())/2, (40-pBmp->GetHeight())/2);
						//pExpImageBtn->SetBackImage(pBackBmp,0,0);
						pExpImageBtn->SetMaskImage(pBmp, pBackBmp, pBmp);
						pExpImageBtn->SetColor(GRAY,GRAY,BLUE,BLUE,PURPLE,PURPLE);
						pExpImageBtn->SetBounds(&obBtnRec);   
					}
				}
			}	
		}
		else
		{
			bnRetCod++;
		}			
	}
	return bnRetCod;
}

/**
 * 通过Message方式传递输入数据
 *
 *
 * \return 
 */
Int32 TAppEditForm::_OnNotifyToMain()
{
	return App_PostMessageEx(&gtidMain, MSG_POST_THREAD_NOTIFY, &m_msgData, sizeof(PostNotifyMsgDataType) ,m_msgData.nHwndId, m_msgData.nCtrlId);
}

/**
 * 设置要传递的数据结构
 *
 *
 * \return 
 */
Int32 TAppEditForm::_OnSetMsgData()
{
	TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
	if(tContentEdit)
	{
		const TUChar *pCaption;
		Char pszCaption[RENREN_LENGTH_BLOG_CONTENT*3+1];		
		
		pCaption = tContentEdit->GetCaption();//获取正文内容
		TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);				
		STRCPY_Ex(m_msgData.pszEditContent, (char*)pszCaption); 		
	}

	if(m_msgData.IsTitleEdit)
	{
		TEdit* tTitleEdit =static_cast< TEdit* >(GetControlPtr(this->m_nTitleEditID));
		if(tTitleEdit)
		{
			const TUChar *pCaption;
			Char pszCaption[RENREN_LENGTH_BLOG_TITLE*3+1];
			
			pCaption = tTitleEdit->GetCaption();//获取标题内容
			TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);
			STRCPY_Ex(m_msgData.pszEditTitle, (char*)pszCaption);				
		}
	}
	
	if(m_msgData.IsPrivacyCtl)
	{
		TCheckBox* tPrivacyCheckBox =static_cast< TCheckBox* >(GetControlPtr(this->m_nPrivacyCtlID));
		if(tPrivacyCheckBox)
		{
			m_msgData.bPrivacy = tPrivacyCheckBox->GetValue();
		}
	}			
	return 0;
}	
