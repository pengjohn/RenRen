/*!
*@FileName: RenRenForm_PagesGetList.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2010-12-28
*@Brief: 公共主页列表Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_PagesGetList.h"

#define HEADMASK_X		(3)
#define HEADMASK_Y		(3)

#define NAME_X			(HEADMASKBUTTON_W + 10)
#define NAME_Y			(5)
#define NAME_H			(FONT_NORMAL+LINE_SPACE)

#define COUNT_INFO_X			(NAME_X)
#define COUNT_INFO_Y			(NAME_Y + NAME_H)
#define COUNT_INFO_H		(FONT_SMALL+LINE_SPACE)

#define COOLBARLIST_HEIGHT		(HEADMASKBUTTON_H + HEADMASK_Y*2)
// 构造函数
TPagesGetListForm::TPagesGetListForm(TApplication* pApp):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	memset(gItemData, 0x0, sizeof(gItemData));
	Create(APP_RE_ID_CommonListForm);
}

// 析构函数
TPagesGetListForm::~TPagesGetListForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());
	for(int i=0;i<PAGESLIST_MAXITEM;i++)
	{
		if( gItemData[i].pBmp != NULL)
		{
			gItemData[i].pBmp->Destroy();
			gItemData[i].pBmp = NULL;									
		}
	}
}

// 窗口事件处理
Boolean TPagesGetListForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
			
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
			{
				NotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));				
				bHandled = TRUE;
				switch(notifyData.nAccessType)
				{
					case RR_PhotoDownload:
					{
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);
						if(pDownLoadBitmap != NULL)
						{
							TMaskButton* pMyHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(gItemData[notifyData.nParam].MaskButtonID));
							if(pMyHeadMBtn != NULL)
							{
								if( gItemData[notifyData.nParam].pBmp != NULL)
								{
									gItemData[notifyData.nParam].pBmp->Destroy();
									gItemData[notifyData.nParam].pBmp = NULL;									
								}
								
								gItemData[notifyData.nParam].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
								gItemData[notifyData.nParam].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
						
								pMyHeadMBtn->SetImage(gItemData[notifyData.nParam].pBmp, (HEADMASKBUTTON_W - gItemData[notifyData.nParam].pBmp->GetWidth())/2, (HEADMASKBUTTON_H - gItemData[notifyData.nParam].pBmp->GetHeight())/2 );
								pMyHeadMBtn->Draw();
							}

							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 								
						}
					}
						break;
					default:
						break;
				}
			}
			break;

		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化



Boolean TPagesGetListForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	tResponsePagesGetList* Response = NULL;
	
	//m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_Refresh,TITLE_BUTTON_LEFT);
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
	SetAppTilte(this, APP_RE_ID_STRING_Pages);

	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_PagesGetList, (void **)&Response);	

	//:TODO:
	//Panel -> CoolBarList->pRowList->pBarRow->pListItem

	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));
	if (pCoolBarList)
	{
		TBarRowList* pRowList = NULL;
		TBarRow* pBarRow = NULL;
		TBarListItem* pListItem = NULL;
		//背景设置为白色底色
		pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);

		pRowList = pCoolBarList->Rows();
		if (pRowList)
		{
			pRowList->BeginUpdate();
			pRowList->Clear();
			pBarRow = pRowList->AppendRow();

			//数量统计
			{
				TBarListItem* lpItem = NULL;
				TUChar pszTitle[64] = {0};
				lpItem = pBarRow->AppendItem();
				if (lpItem)
				{
					Int32 StringWidth = 0;
					TUString::StrPrintF(pszTitle, TResource::LoadConstString(APP_RE_ID_STRING_PagesCount), Response->nArraySize);
					StringWidth = GetShowAllStringWidth(pszTitle, FONT_MIDDLE) + 5;	//多预留一些
					CtrlAddItemToCoolBarList_Lable(this, lpItem, (COOLBARLIST_WIDTH-StringWidth)/2, 10, StringWidth, FONT_MIDDLE, pszTitle);
					lpItem->SetHeight(10*2+FONT_MIDDLE);
					lpItem->SetEnabled(FALSE);
				}
			}
				
			//以下为增加列表项
			for (int i = 0; i < Response->nArraySize; i++)
			{
				TUChar pszString[4096] = {0};
				Coord nHeight = 0;
				Int32 nItemHeight = 0;
				
				pListItem = pBarRow->AppendItem();
				if (pListItem)
				{
					//属性设置
					pListItem->SetTitle(NULL);
					pListItem->SetCaption(NULL);       
					pListItem->SetIndicatorType(itNone);

					//头像,需要做缩放
					//先读取磁盘cache, 无文件再下载
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByUrl(Response->Array[i].headurl);
					if(  pDownLoadBitmap != NULL)
					{
						gItemData[i].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
						gItemData[i].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
						gItemData[i].MaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem,  HEADMASK_X,  HEADMASK_Y,  HEADMASKBUTTON_W, HEADMASKBUTTON_H, gItemData[i].pBmp,(TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));

						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL;
					}
					else
					{
						gItemData[i].MaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, pListItem,  HEADMASK_X,  HEADMASK_Y,  HEADMASKBUTTON_W,  HEADMASKBUTTON_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default),(TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));
						//因为第一项为数据统计, 所以参数需要+1
						RenRenAPICommon_DownloadPhoto(Response->Array[i].headurl, this->GetWindowHwndId(), i );
					}


					#if 1
					TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->Array[i].name);
					CtrlAddItemToCoolBarList_Lable(this , pListItem ,  NAME_X, NAME_Y, 0, FONT_NORMAL,pszString, RGB_COLOR_LIGHTBLUE);

					TUString::StrPrintF(pszString , TResource::LoadConstString(APP_RE_ID_STRING_FriendNumFormat), Response->Array[i].fans_count);
					CtrlAddItemToCoolBarList_Lable(this, pListItem, COUNT_INFO_X,  COUNT_INFO_Y, 0, FONT_SMALL, pszString, RGB_COLOR_GRAY);	
				
					pListItem->SetHeight(COOLBARLIST_HEIGHT);
					#else	//带描述的布局
					//姓名
					TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->Array[i].name);
					CtrlAddItemToCoolBarList_RichView(this , pListItem ,  65, 5, 240, &nHeight, FONT_NORMAL,pszString, RGB_COLOR_LIGHTBLUE);
					nItemHeight = 5 + nHeight;
			
					//描述
					TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->Array[i].desc);
					CtrlAddItemToCoolBarList_RichView(this , pListItem ,  65, nHeight + 5, 240, &nHeight, FONT_NORMAL,pszString, RGB_COLOR_BLACK);
					
					//成员个数
					TUString::StrPrintF(pszString , TResource::LoadConstString(APP_RE_ID_STRING_FriendNumFormat), Response->Array[i].fans_count);
					CtrlAddItemToCoolBarList_Lable(this, pListItem, 65, (nItemHeight + nHeight + 10), 0, FONT_SMALL, pszString, RGB_COLOR_GRAY);	
					nItemHeight = nItemHeight + nHeight + 25 + FONT_SMALL;
					
					pListItem->SetHeight(nItemHeight);
					#endif

					pListItem->SetTagValue(i);
					gItemData[i].id = Response->Array[i].page_id;
				}
			}
			
			pRowList->EndUpdate();
		}
	}

	if( Response )
	{
		delete Response;	
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TPagesGetListForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TPagesGetListForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;

	if(m_TitleBtnRight == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		bHandled = TRUE; 		
		return bHandled;
	}
	
	switch(nCtrlID)
	{
		case APP_RE_ID_CommonListForm_CommonCoolBarList:
		{
			TBarListItem *lpItem;
			Int32        nIndex;
			char 	szuids[64] = {0};
			
			lpItem = (TBarListItem *)(pEvent->lParam3);
			//nIndex = lpItem->GetIndex();
			nIndex = lpItem->GetTagValue();

			sprintf(szuids, "%d", gItemData[nIndex].id);
			//Set_Url_Params(RR_PagesGetInfo, "page_id", szuids);
			//RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0);
			bIsPage = TRUE;
			Set_Url_Params(RR_ProfileGetInfo, "uid", szuids);
			RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0);			
		}
			break;
		default:
			break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TPagesGetListForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;	
}

//控件丢失焦点
Boolean TPagesGetListForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TPagesGetListForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}
