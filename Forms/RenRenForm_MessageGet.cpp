/*!
*@FileName: RenRenForm_MessageGet.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2010-12-24
*@Brief: 站内信详情Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_MessageGet.h"


// 构造函数
TMessageGetForm::TMessageGetForm(TApplication* pApp, Boolean bNew):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	memset(m_uid, 0x0, sizeof(m_uid));
	memset(gItemData, 0x0, sizeof(gItemData));
	m_pWebPanel = NULL;	
	Create(APP_RE_ID_MessageGetForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);	
}

// 析构函数
TMessageGetForm::~TMessageGetForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());	
	if (m_pWebPanel)
	{
		//m_pWebPanel->stopLoad();
		m_pWebPanel->close();
		m_pWebPanel = NULL;
	}	

	for(int i=0; i<MESSAGEGET_MAXITEM; i++)
	{
		if( gItemData[i].pBmp != NULL)
		{
			gItemData[i].pBmp->Destroy();
			gItemData[i].pBmp = NULL;									
		}
	}
}

// 窗口事件处理
Boolean TMessageGetForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
			
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
			{
				NotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));				
				bHandled = TRUE;
				switch(notifyData.nAccessType)
				{
					case RR_PhotoDownload:
					{
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap= LoadImgByPath(notifyData.pszFilePath);
						if(pDownLoadBitmap != NULL)
						{
							TMaskButton* pMyHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(gItemData[notifyData.nParam].HeadMaskButtonID));
							if(pMyHeadMBtn != NULL)
							{
								if( gItemData[notifyData.nParam].pBmp != NULL)
								{
									gItemData[notifyData.nParam].pBmp->Destroy();
									gItemData[notifyData.nParam].pBmp = NULL;
								}
						
								gItemData[notifyData.nParam].pBmp = TBitmap::Create(HEADPHOTO_W, HEADPHOTO_H, pDownLoadBitmap->GetDepth());
								gItemData[notifyData.nParam].pBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));								
								pMyHeadMBtn->SetImage(gItemData[notifyData.nParam].pBmp, (HEADMASKBUTTON_W - gItemData[notifyData.nParam].pBmp->GetWidth())/2, (HEADMASKBUTTON_H - gItemData[notifyData.nParam].pBmp->GetHeight())/2 );
								pMyHeadMBtn->Draw();
							}

							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 								
						}
						break;
					}

					case RR_MessageSent:
					{
						pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_Success), TResource::LoadConstString(APP_RE_ID_STRING_Send), WMB_OK);
						RenRenAPICommon_Download(RR_MessageGet, this->GetWindowHwndId(), 0, 0);

						break;
					}					
					default:
						break;
				}
			}
			break;

		case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			char* rid = Get_Url_Params(RR_MessageGet, "id");
			char* box = Get_Url_Params(RR_MessageGet, "box");
			
			Set_Url_Params(RR_MessageSent, "rid", rid);
			Set_Url_Params(RR_MessageSent, "box", box);
			Set_Url_Params(RR_MessageSent, "uid", "");
			
			Set_Url_Params(RR_MessageSent, "title", "");					
			Set_Url_Params(RR_MessageSent, "content", (char*)notifyData.pszEditContent);
			
			RenRenAPICommon_Download(RR_MessageSent, this->GetWindowHwndId(), 0, 0);	

			bHandled = TRUE;
			break;
		}
		
		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
static sBottomOptionItem	 BottomOptionBtn_MessageGet[] = 
{
	{APP_RE_ID_BITMAP_button98, APP_RE_ID_BITMAP_button98_over, APP_RE_ID_BITMAP_hudong_btn, APP_RE_ID_BITMAP_hudong_btn_hl,APP_RE_ID_STRING_Friends},
	{APP_RE_ID_BITMAP_button98, APP_RE_ID_BITMAP_button98_over, APP_RE_ID_BITMAP_repaste_btn, APP_RE_ID_BITMAP_repaste_btn_hl,APP_RE_ID_STRING_Visitors},
	{APP_RE_ID_BITMAP_button98, APP_RE_ID_BITMAP_button98_over, APP_RE_ID_BITMAP_comment_btn, APP_RE_ID_BITMAP_comment_btn_hl,APP_RE_ID_STRING_OK},
};

Boolean TMessageGetForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	tResponseMessageGet* Response = NULL;
	
	//m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_Reply,TITLE_BUTTON_LEFT);
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
	SetAppTilte(this, APP_RE_ID_STRING_Message);
	//CreateBottomOption(this, &BottomOptionCtrID, BottomOptionBtn_MessageGet, ARR_SIZE(BottomOptionBtn_MessageGet) );
	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_MessageGet, (void **)&Response);	


	//:TODO:
	TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_MessageGetForm_MessageGetPanel));
	Coord nY = 10;
	for(int i=0; i<Response->nSize_message ; i++)
	{
		tBubbleDialogItemData  BubbleItemData = {0};
		Coord nHeight = 0;
		TUString::StrUtf8ToStrUnicode(BubbleItemData.pszName , (const Char *)Response->message[i].name);

		//内容先去掉,  <style type="text/css"> 和</style>这件的内容,针对人人网的系统邮件
		StrRemoveAtoB(Response->message[i].content, strlen(Response->message[i].content), "<style type=", "</style>");	
		//内容,去掉html格式化内容
		StrRemoveAtoB(Response->message[i].content, strlen(Response->message[i].content), "<", ">");						
		TUString::StrUtf8ToStrUnicode(BubbleItemData.pszContent , (const Char *)Response->message[i].content);
		TUString::StrUtf8ToStrUnicode(BubbleItemData.pszTime , (const Char *)Response->message[i].time);

		//自己在右边,其他人在左边
		if(Response->message[i].uid == RenRenUserInfo.uid)
		{
			BubbleItemData.bLeft = FALSE;
		}
		else
		{
			BubbleItemData.bLeft = TRUE;
			BubbleItemData.OptionButtonResID = APP_RE_ID_STRING_Reply;
		}

		BubbleItemData.nY = nY;
		
		//头像,先读取磁盘cache, 无文件再下载
		TBitmap* pDownLoadBitmap = NULL;
		 pDownLoadBitmap = LoadImgByUrl(Response->message[i].head_url);
		if(  pDownLoadBitmap != NULL)
		{
			gItemData[i].pBmp = TBitmap::Create(HEADPHOTO_W, HEADPHOTO_H, pDownLoadBitmap->GetDepth());
			gItemData[i].pBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));				
			BubbleItemData.pImage = gItemData[i].pBmp;
			gItemData[i].NameID = CtrlCreateToPanel_BubbleDialog(this, pPanel, BubbleItemData, &nHeight, &gItemData[i].OptionButtonID, &gItemData[i].HeadMaskButtonID);

			pDownLoadBitmap->Destroy();
			pDownLoadBitmap = NULL; 	
		}
		else
		{
			TBitmap * pImage = (TBitmap*)TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Default);
			BubbleItemData.pImage = pImage;
			gItemData[i].NameID = CtrlCreateToPanel_BubbleDialog(this, pPanel, BubbleItemData, &nHeight, &gItemData[i].OptionButtonID, &gItemData[i].HeadMaskButtonID);
			RenRenAPICommon_DownloadPhoto(Response->message[i].head_url, this->GetWindowHwndId(), i );
		}
		
		nY = nY + nHeight + 15;
		gItemData[i].uid = Response->message[i].uid;
		STRCPY_Ex(gItemData[i].name ,Response->message[i].name);
	}

	//设置为已读消息
	char* ids = Get_Url_Params(RR_MessageGet, "id");
	Set_Url_Params(RR_MessageMark, "ids", ids);		
	RenRenAPICommon_Download(RR_MessageMark, this->GetWindowHwndId(), 0, 0);	
	
//Webpanel方式,不适合多条	
#if 0
	if(Response->nSize_message > 0)
	{
		sprintf(m_uid, "%d", Response->message[0].uid);
		
		RR_MakeHtmlFile(RR_MessageGet, Response->message[0].content);

		TRectangle WebRet;
		GetBounds( &WebRet);
		Int32 TopLeftX = 5;
		Int32 TopLeftY = 50;
		Int32 TopHeigh = 360;
		Int32 TopWidth = 310;
		WebRet.SetX(TopLeftX);
		WebRet.SetY(TopLeftY);
		WebRet.SetHeight(TopHeigh);
		WebRet.SetWidth(TopWidth);

	    	m_pWebPanel = TBrowser::TWebPanel::create(this, WebRet, NULL);

		TUChar* pszFilePath = RR_GetHtmlFileUrl(RR_MessageGet);
		if(pszFilePath != NULL)
		{
			m_pWebPanel->loadUrl(pszFilePath);

			delete pszFilePath;
			pszFilePath = NULL;
		}
	}
#endif	
	if( Response )
	{
		delete Response;	
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TMessageGetForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TMessageGetForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;

	if(m_TitleBtnRight == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		bHandled = TRUE; 		
		return bHandled;
	}

	//判断回复按钮
	for(int i=0;i<ARR_SIZE(gItemData); i++)
	{
		if(gItemData[i].OptionButtonID == nCtrlID)
		{
			PostNotifyMsgDataType in_msgData = {0};
			MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

			STRCPY_Ex(in_msgData.pszReceiver,gItemData[i].name);
			
			in_msgData.nCtrlId = 0;
			in_msgData.nHwndId = this->GetWindowHwndId();

			in_msgData.nAppTitleStrID = APP_RE_ID_STRING_Reply; 
			in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_Send;
			
			in_msgData.nTitleEditMaxChars = RENREN_LENGTH_BLOG_TITLE;
			in_msgData.nContentEditMaxChars = RENREN_LENGTH_MESSAGE;
			
			in_msgData.IsReceiverEdit = TRUE;
			in_msgData.IsExpressionBtn = FALSE;
			in_msgData.IsTitleEdit = FALSE;
			in_msgData.nParam = i;

			TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);	
			bHandled = TRUE; 		
	
			return bHandled;			
		}
		else if(gItemData[i].NameID== nCtrlID)
		{
			char	szuid[64] = "";				
			sprintf(szuid, "%d", gItemData[i].uid);		
			Set_Url_Params(RR_ProfileGetInfo, "uid", szuid);
			RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0);
			bHandled = TRUE;		
			return bHandled;			
		}		
	}

	switch(nCtrlID)
	{
		case APP_RE_ID_TestForm_Test01:
			{
				bHandled = TRUE; 	
			}
			break;
		default:
			break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TMessageGetForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1; 

	//:TODO:
	for(int i=0;i<ARR_SIZE(gItemData); i++)
	{
		if(gItemData[i].NameID== nCtrlID)
		{
			this->SetFocus(m_TitleBtnRight);
		}
	}
	return bHandled;	
}

//控件丢失焦点
Boolean TMessageGetForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TMessageGetForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}
