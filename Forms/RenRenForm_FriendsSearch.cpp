/*!
*@FileName: RenRenForm_FriendsSearch.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2011-2-25
*@Brief: 搜索好友Form
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_FriendsSearch.h"

#define HEADMASK_X		(3)
#define HEADMASK_Y		(3)

#define NAME_X			(HEADMASKBUTTON_W + 10)
#define NAME_Y			(5)
#define NAME_H			(FONT_NORMAL + LINE_SPACE)

#if(LCD_SIZE == LCD_HVGA )
#define BUTTON_W		(80)
#elif(LCD_SIZE == LCD_WVGA )
#define BUTTON_W		(120)
#endif
#define BUTTON_H		(TITLE_BUTTON_H)
#define BUTTON_X		(SCR_W - BUTTON_W - 20)
#define BUTTON_Y		(INFO_Y)

#define INFO_X			(NAME_X)
#define INFO_Y			(NAME_Y + NAME_H)
#define INFO_W			(BUTTON_X - INFO_X)
#define INFO_H			(FONT_SMALL+LINE_SPACE)

#define COOLBARLIST_HEIGHT		(HEADMASKBUTTON_H + HEADMASK_Y*2)

#define RR_FRIENDSEARCH_MORE_TAGVALUE (0xabcd)
// 构造函数
TFriendsSearchForm::TFriendsSearchForm(TApplication* pApp, Boolean bNew):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	m_ItemCount = 0;
	memset(gItemData, 0x0, sizeof(gItemData));
	
	Create(APP_RE_ID_CommonListForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);
}

// 析构函数
TFriendsSearchForm::~TFriendsSearchForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());
	for(int i=0;i<FRIENDSSEARCH_MAXITEM;i++)
	{
		if( gItemData[i].pBmp != NULL)
		{
			gItemData[i].pBmp->Destroy();
			gItemData[i].pBmp = NULL;									
		}
	}
}

// 窗口事件处理
Boolean TFriendsSearchForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
			//窗口创建
		case EVENT_WinInit:
			{
				_OnWinInitEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
		
			//窗口关闭
		case EVENT_WinClose:
			{
				_OnWinClose(pApp, pEvent);
			}
			break;
		
			//点击控件
		case EVENT_CtrlSelect:
			{
				bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			}
			break;
		
			//控件获取焦点
		case EVENT_CtrlSetFocus:
			{
				bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
			}
			break;
			
			//控件丢失焦点
		case EVENT_CtrlKillFocus :
			{
				bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
			}
			break;
			
			//输入框内容变化
		case EVENT_FieldChanged:
			{
				_OnFldChangedEvent(pApp, pEvent);
				bHandled = TRUE;
			}
			break;
			
			//窗口的背景
		case EVENT_WinEraseClient:
			{
				TDC dc(this);
				WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
				TRectangle rc(pEraseEvent->rc);
				dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
				dc.EraseRectangle(&rc, 0);
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);
				pEraseEvent->result = 1;				
				bHandled = TRUE;
			}
			break;

			// 右软键事件 
		case EVENT_KeyCommand: 
			{ 
				if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
				{ 
					// 模拟标题栏右按钮选中消息 
					HitControl(m_TitleBtnRight); 
					bHandled = TRUE; 
				} 
			} 
			break;
			
			//下载完成事件
		case MSG_DL_THREAD_NOTIFY:
			{
				NotifyMsgDataType notifyData;
				Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));				
				bHandled = TRUE;
				switch(notifyData.nAccessType)
				{
					case RR_PhotoDownload:
					{
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);
						if(pDownLoadBitmap != NULL)
						{
							TMaskButton* pMyHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(gItemData[notifyData.nParam].MaskButtonID));
							if(pMyHeadMBtn != NULL)
							{
								if(gItemData[notifyData.nParam].pBmp != NULL)
								{
									gItemData[notifyData.nParam].pBmp->Destroy();
									gItemData[notifyData.nParam].pBmp = NULL;
								}
								gItemData[notifyData.nParam].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
								gItemData[notifyData.nParam].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
						
								pMyHeadMBtn->SetImage(gItemData[notifyData.nParam].pBmp, (HEADMASKBUTTON_W - gItemData[notifyData.nParam].pBmp->GetWidth())/2, (HEADMASKBUTTON_H - gItemData[notifyData.nParam].pBmp->GetHeight())/2 );
								pMyHeadMBtn->Draw();
							}

							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 								
						}
					}
						break;

					case RR_RequestsSendFriendRequest:
						{
						pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_SendRequestSuccess), TResource::LoadConstString(APP_RE_ID_STRING_Success), WMB_OK);
						}
						break;

					case RR_FriendsSearchMore:
					{
						tResponseFriendsSearch* Response = NULL;
						RenRenAPI_JsonParse(RR_FriendsSearchMore, (void **)&Response);
						if(Response != NULL)
						{
							_UpdateList(pApp, Response);

							delete Response;
							Response = NULL;
						}
						break;
					}						
					default:
						break;
				}
			}
			break;

		default:
			break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TFriendsSearchForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	tResponseFriendsSearch* Response = NULL;
	
	//m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_OK,TITLE_BUTTON_LEFT);
	m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
	SetAppTilte(this, APP_RE_ID_STRING_RenRen);

	//从对应Json中获取数据,用于更新UI
	iRet = RenRenAPI_JsonParse(RR_FriendsSearch, (void **)&Response);	
	if( Response == NULL || iRet != 0 )
	{
		return FALSE;
	}

	//:TODO:
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	TBarRow *lpRow = NULL;
	
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));//ShowCoolList(ShowType)
	if (pCoolBarList)
	{
		pCoolBarList->GetBounds(&Rc_CoolBarList);
		lpRowList = pCoolBarList->Rows();
		//add row
		if (lpRowList)
		{
			lpRowList->BeginUpdate();
			lpRowList->Clear();
			lpRow = lpRowList->AppendRow();
			lpRowList->EndUpdate(); 
		}
	}
	
	_UpdateList(pApp, Response);
	
	if( Response )
	{
		delete Response;	
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TFriendsSearchForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TFriendsSearchForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;

	if(m_TitleBtnRight == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		bHandled = TRUE; 		
		return bHandled;
	}
	else if( nCtrlID == APP_RE_ID_CommonListForm_CommonCoolBarList)
	{
		TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
		if( pRow->GetIndex() == 0 )	//First Row
		{
			char szFuid[32] = {0};		

			TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
			Int32 ItemIndex = 0;
			ItemIndex = pItem->GetTagValue();
			if(ItemIndex == RR_FRIENDSEARCH_MORE_TAGVALUE)
			{
				char* szPage = Get_Url_Params(RR_FriendsSearch, "page");
				char szPageParams[16] = {0};
				int nPage = 0;
				nPage = atoi(szPage);
				nPage ++;
				sprintf(szPageParams, "%d", nPage);
				Set_Url_Params(RR_FriendsSearch, "page", szPageParams);
				RenRenAPICommon_Download(RR_FriendsSearch, this->GetWindowHwndId(), 0, 0);			
			}
			else
			{
				sprintf(szFuid, "%d", gItemData[ItemIndex].id);
				Set_Url_Params(RR_ProfileGetInfo, "uid", szFuid);
				RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 				
			}
			bHandled = TRUE;
		}						
	}
	else
	{
		for(int i = 0;i < FRIENDSSEARCH_MAXITEM;++i)
		{
			if(gItemData[i].ButtonId== nCtrlID)
			{
				char  szId[64] = {0};
				sprintf(szId, "%d", gItemData[i].id);
				Set_Url_Params(RR_RequestsSendFriendRequest, "uid", (char*)szId);	
				RenRenAPICommon_Download(RR_RequestsSendFriendRequest, this->GetWindowHwndId(), 0, 0); 			
				bHandled = TRUE;
				return bHandled;
			}
		}
	}
	
	return bHandled;
}

//控件获取焦点
Boolean TFriendsSearchForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;	
}

//控件丢失焦点
Boolean TFriendsSearchForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TFriendsSearchForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}

/**
 * 更新列表显示
 *
 * \param pApp
 * \param Response
 *
 * \return 
 */
Boolean TFriendsSearchForm::_UpdateList(TApplication * pApp, tResponseFriendsSearch* Response)
{

	if( Response == NULL)
	{
		return FALSE;
	}

	//:TODO:

	TBarRowList *lpRowList = NULL;
	TBarRow *lpRow = NULL;
	TBarListItem* lpItem = NULL;
		
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));//ShowCoolList(ShowType)
	if(pCoolBarList == NULL)
		{
		return FALSE;
		}
	//背景设置为白色底色
	pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
	
	lpRowList = pCoolBarList->Rows();
	if (lpRowList == NULL)
		{
		return FALSE;
		}
	
	lpRowList->BeginUpdate();
	lpRow = lpRowList->FirstRow();
	if(lpRow == NULL)
	{
	return FALSE;
	}

	//如果列表不为空,则说明更新更多,先删除上一个更多按钮
	{
		TBarListItem* lpItem = NULL;
		lpItem = lpRow->LastItem();
		if(lpItem)
		{
			lpItem->Delete(FALSE);
		}
	}
	
	//以下为增加列表项
	for (int i = 0; i < Response->nSize_friends;i++)
	{
		//如果个数超过这直接返回
		if(m_ItemCount >= BLOGGETCOMMENTS_MAXITEM)
			break;
	
		TUChar pszString[4096] = {0};
		Int32 nItemHeight = 0;
			
		lpItem = lpRow->AppendItem();
		if (lpItem)
		{
			//属性设置
			lpItem->SetTitle(NULL);
			lpItem->SetCaption(NULL);       
			lpItem->SetIndicatorType(itNone);

			//头像,需要做缩放
			//先读取磁盘cache, 无文件再下载
			TBitmap* pDownLoadBitmap = NULL;
			pDownLoadBitmap = LoadImgByUrl(Response->friends[i].tinyurl);
			if(  pDownLoadBitmap != NULL)
			{
				gItemData[m_ItemCount].pBmp = pDownLoadBitmap->Create(HEADPHOTO_W, HEADPHOTO_H, 32);
				gItemData[m_ItemCount].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
				gItemData[m_ItemCount].MaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, lpItem,  HEADMASK_X,  HEADMASK_Y,  HEADMASKBUTTON_W, HEADMASKBUTTON_H, gItemData[m_ItemCount].pBmp,(TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));

				//释放图片
				pDownLoadBitmap->Destroy();
				pDownLoadBitmap = NULL; 						
			}
			else
			{
				gItemData[m_ItemCount].MaskButtonID = CtrlAddItemToCoolBarList_MaskButton(this, lpItem,  HEADMASK_X,  HEADMASK_Y,  HEADMASKBUTTON_W,  HEADMASKBUTTON_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default),(TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_head1));
				RenRenAPICommon_DownloadPhoto(Response->friends[i].tinyurl, this->GetWindowHwndId(), m_ItemCount );
			}

			TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->friends[i].name);
			CtrlAddItemToCoolBarList_Lable(this , lpItem ,  NAME_X, NAME_Y, 0, FONT_NORMAL,pszString, RGB_COLOR_LIGHTBLUE);

			TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->friends[i].info);
			//CtrlAddItemToCoolBarList_Lable(this, lpItem, INFO_X,  INFO_Y, 0, FONT_SMALL, pszString, RGB_COLOR_GRAY);	
			Coord nHeight = 0;
			CtrlAddItemToCoolBarList_RichView(this, lpItem, INFO_X,  INFO_Y, INFO_W, &nHeight, FONT_SMALL, pszString, RGB_COLOR_GRAY);	
			
			if(Response->friends[i].isFriend == 0)
			{
				gItemData[m_ItemCount].ButtonId = CtrlAddItemToCoolBarList_Button(this, lpItem, BUTTON_X, BUTTON_Y, BUTTON_W, BUTTON_H, (TUChar*)TResource::LoadConstString(APP_RE_ID_STRING_RequestAddFriend));
			}

			if(INFO_Y+nHeight > COOLBARLIST_HEIGHT)
				lpItem->SetHeight(INFO_Y+nHeight+LINE_SPACE);
			else
				lpItem->SetHeight(COOLBARLIST_HEIGHT);

			gItemData[m_ItemCount].id = Response->friends[i].id;
			lpItem->SetTagValue(m_ItemCount);
			
			m_ItemCount++;
		}
	}
				
	//显示无查找结果
	if(m_ItemCount == 0)
	{
		lpItem = lpRow->AppendItem();
		lpItem->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_NoFriendBeSearched));
		lpItem->SetEnabled(FALSE);
	}
	//显示More
	//else if(m_ItemCount < Response->total)	//More 方式
	else
	{
		char* szPage = Get_Url_Params(RR_FriendsSearch, "page");
		int nPage = atoi(szPage);

		char *szCount = Get_Url_Params(RR_FriendsSearch, "count");
		int nCount = atoi(szCount);
		
		if( nPage*nCount < Response->total)	//Next 方式
		{
			lpItem = lpRow->AppendItem();
			lpItem->SetCaption(TResource::LoadConstString(APP_RE_ID_STRING_NextPage));
			lpItem->SetTagValue(RR_FRIENDSEARCH_MORE_TAGVALUE);
		}
	}
	
	lpRowList->EndUpdate();
	
	if (pCoolBarList)
	{
		pCoolBarList->Update();
	}
	this->UpdateWindow(0);

	return TRUE;
}

