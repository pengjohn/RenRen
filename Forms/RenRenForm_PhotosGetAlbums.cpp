/*!
*@FileName: RenRenForm_PhotosGetAlbums.cpp
*@Author: xuhonglei@GoZone
*@Date: 2010-12-23
*@Brief: 专辑列表
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by RenRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"
#include "RenRenForm_PhotosGetAlbums.h"

#define FEED_PROFILE_IMAGE_INDEX		0xABCDEF

/*
*图片坐标:       (IMAGE_X, IMAGE_Y)
*相册名坐标:     (NAME_X,  NAME_Y)
*相册数量坐标:   (SIZE_X,  SIZE_Y)
*创建时间坐标:   (DATE_X,  DATE_Y)
*/

#define EDIT_PARAM_PASSWORD	(2)

#if(LCD_SIZE == LCD_HVGA )
#define IMAGE_X                  5
#define IMAGE_Y                  5
#define IMAGE_W                 60
#define IMAGE_H                  60

#define NAME_FONT		(FONT_NORMAL)
#define NAME_X                 80
#define NAME_Y                 6
#define NAME_W 			(SCR_W - NAME_X - 2*10)
#define NAME_H			(NAME_FONT + LINE_SPACE*2)

#define SIZE_FONT		(FONT_MIDDLE)
#define SIZE_X                  (NAME_X)
#define SIZE_Y                  (NAME_Y + NAME_H)
#define SIZE_W			(NAME_W)
#define SIZE_H			(SIZE_FONT + LINE_SPACE)

#define DATE_FONT		(FONT_SMALL)
#define DATE_X                 (NAME_X)
#define DATE_Y                 (SIZE_Y + SIZE_H)
#define DATE_W			(NAME_W)
#define DATE_H			(DATE_FONT + LINE_SPACE)

#elif(LCD_SIZE == LCD_WVGA )
#define IMAGE_X                  5
#define IMAGE_Y                  LINE_SPACE
#define IMAGE_W                 80
#define IMAGE_H                  80

#define NAME_FONT		(FONT_NORMAL)
#define NAME_X                 (IMAGE_W + IMAGE_X*2 + 10)
#define NAME_Y                 LINE_SPACE
#define NAME_W 			(SCR_W - NAME_X - 2*10)
#define NAME_H			(NAME_FONT + LINE_SPACE)

#define SIZE_FONT		(FONT_MIDDLE)
#define SIZE_X                  (NAME_X)
#define SIZE_Y                  (NAME_Y + NAME_H)
#define SIZE_W			(NAME_W)
#define SIZE_H			(SIZE_FONT + LINE_SPACE)

#define DATE_FONT		(FONT_SMALL)
#define DATE_X                 (NAME_X)
#define DATE_Y                 (SIZE_Y + SIZE_H)
#define DATE_W			(NAME_W)
#define DATE_H			(DATE_FONT + LINE_SPACE)
#endif

//加密图标大小
#define LOCK_W		(12)
#define LOCK_H		(12)

#define COOLBAR_ITEM_HEIGHT			(IMAGE_H + IMAGE_Y*2)   //Item的高度


//大头像坐标
#define RR_HEAD_X				(10)
#define RR_HEAD_Y				(10)
#define RR_HEAD_W				(100)
#define RR_HEAD_H				(100)

//姓名 坐标
#define RR_NAME_X				(RR_HEAD_X + RR_HEAD_W + 10)
#define RR_NAME_Y				(10)
#define RR_NAME_W				(SCR_W - RR_NAME_X - 10)
#define RR_NAME_H				(FONT_NORMAL + 4)

//Status 坐标
#define RR_STATUS_X				(RR_NAME_X)
#define RR_STATUS_Y				(RR_NAME_Y + RR_NAME_H + 5)
#define RR_STATUS_W			(RR_NAME_W)
#define RR_STATUS_H				(20)

//提示文本, 如"没有新鲜事"等
#define RR_INFO_X			(10)
#define RR_INFO_Y			(12)
#define RR_INFO_W			(SCR_W - RR_INFO_X - 10)
#define RR_INFO_H			(40)

// 构造函数
TPhotosGetAlbumsForm::TPhotosGetAlbumsForm(TApplication* pApp, eFormMode nFormMode, Boolean bNew):TWindow(pApp)
{
	m_TitleBtnLeft = -1;
	m_TitleBtnRight = -1;
	m_FormMode = nFormMode;
	Response = NULL;
	m_ProfileImageID = -1;
	pProfileImage = NULL;
	
	m_uid = Get_Url_Params(RR_PhotosGetAlbums, "uid");
	
	memset(gItemData, 0, sizeof(gItemData));
	memset((void*)&BottomTabCtrID, 0x0, sizeof(BottomTabCtrID));
	
	Create(APP_RE_ID_CommonListForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);	
}

// 析构函数
TPhotosGetAlbumsForm::~TPhotosGetAlbumsForm(void)
{
	RenRenAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	if( pProfileImage != NULL)
	{
		pProfileImage->Destroy();
		pProfileImage = NULL;								
	}
	
	for(int i=0; i<PHOTOSGetALBUMS_MAXITEM ;i++)
	{
		if( gItemData[i].pBmp != NULL)
		{
			gItemData[i].pBmp->Destroy();
			gItemData[i].pBmp = NULL;									
		}
	}
	
}

// 窗口事件处理
Boolean TPhotosGetAlbumsForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
		//窗口创建
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
		}
		break;

		//窗口关闭
	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
		}
		break;

		//点击控件
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
		}
		break;

		//控件获取焦点
	case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
		}
		break;

		//控件丢失焦点
	case EVENT_CtrlKillFocus :
		{
			bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
		}
		break;

		//输入框内容变化
	case EVENT_FieldChanged:
		{
			_OnFldChangedEvent(pApp, pEvent);
			bHandled = TRUE;
		}
		break;

		//窗口的背景
	case EVENT_WinEraseClient:
		{
			TDC dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
			dc.EraseRectangle(&rc, 0);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);

			if(m_FormMode == FORM_MODE_MYHOME)
				dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_RE_ID_BITMAP_Bottom_btn_bg), 0, BOTTOM_TAB_Y, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);				
			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

		// 右软键事件 
	case EVENT_KeyCommand: 
		{ 
			if( pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP || pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG ) 
			{ 
				// 模拟标题栏右按钮选中消息 
				HitControl(m_TitleBtnRight); 
				bHandled = TRUE; 
			} 
		} 
		break;

        //下载完成事件
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));
			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
				case RR_PhotoDownload:
				{
					if(notifyData.nParam == FEED_PROFILE_IMAGE_INDEX)
					{	
						//下载完后更新对应的图片
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);

						if(pDownLoadBitmap)
						{
							TMaskButton* pLogo = NULL;
							pLogo = static_cast<TMaskButton*>(GetControlPtr(m_ProfileImageID));
							if(pLogo)
							{
								TRectangle rc;							
								pLogo->GetBounds(&rc);
								if( pProfileImage != NULL)
								{
									pProfileImage->Destroy();
									pProfileImage = NULL; 							
								}
									
								pProfileImage = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
								pProfileImage->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
								pLogo->SetCaption(TUSTR_Re_NULL,0,0);
								pLogo->SetImage(pProfileImage, (rc.Width()-pProfileImage->GetWidth())/2, (rc.Height()-pProfileImage->GetHeight())/2);										pLogo->Draw();
							}				

							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 						
						}	
						break;
					}
						
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap= LoadImgByPath(notifyData.pszFilePath);
					if(pDownLoadBitmap != NULL)
					{
						TImage* pImage = static_cast<TImage*>(GetControlPtr(gItemData[notifyData.nParam].nImageID));
						if(pImage != NULL)
						{
							if( gItemData[notifyData.nParam].pBmp != NULL)
							{
								gItemData[notifyData.nParam].pBmp->Destroy();
								gItemData[notifyData.nParam].pBmp = NULL;									
							}
							gItemData[notifyData.nParam].pBmp = pDownLoadBitmap->Create(IMAGE_W, IMAGE_H, 32);
							gItemData[notifyData.nParam].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
					
							//pImage->SetImage(gItemData[notifyData.nParam].pBmp, (HEADMASKBUTTON_W - gItemData[notifyData.nParam].pBmp->GetWidth())/2, (HEADMASKBUTTON_H - gItemData[notifyData.nParam].pBmp->GetHeight())/2 );
							pImage->SetBitmap(gItemData[notifyData.nParam].pBmp);
							pImage->Draw();
						}

						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 							
					}
				}					
				break;
				
				case RR_PhotosUpload:
				{
					if(pApp->MessageBox(TResource::LoadConstString(APP_RE_ID_STRING_PhotoUploadContinue),TResource::LoadConstString(APP_RE_ID_STRING_PhotoUploadSuccess),WMB_YESNO) ==0 )
					{
						HitControl(m_TitleBtnLeft); 
					}
					else
					{
						RenRenAPICommon_Download(RR_PhotosGetAlbums, this->GetWindowHwndId(), 0, m_FormMode); 
					}
					break;
				}

				case RR_UsersGetInfoPhoto:
					{
					tResponseUsersGetInfo* Response = NULL;
					RenRenAPI_JsonParse(RR_UsersGetInfoPhoto, (void **)&Response);
					if(Response)
						{
						_UpdateProfilePhoto(pApp, Response);
						delete Response;
						Response = NULL;
						}
					}
				break;					
			default:
				break;
			}
		}
		break;
		
		case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nParam == EDIT_PARAM_PASSWORD)
			{
				Set_Url_Params(RR_PhotosGet, "password", (char*)notifyData.pszEditContent);	
				RenRenAPICommon_Download(RR_PhotosGet, this->GetWindowHwndId(), 0, 0); 
			}
			else if(notifyData.nParam == RR_PhotosUpload)
			{
				Set_Url_Params(RR_PhotosUpload, "caption", (char*)notifyData.pszEditContent);
				RenRenAPICommon_Download(RR_PhotosUpload,  this->GetWindowHwndId(), 0, 0);
			}
			
			bHandled = TRUE;
			break;
		}
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TPhotosGetAlbumsForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int nErrorCode = eFailed;
	Int32 Height_Panel = 0;		//Panel高度		

	//m_TitleBtnLeft = SetAppTitleButton(this, APP_RE_ID_STRING_Comment,TITLE_BUTTON_LEFT);

	//显示不同的title
	if(m_FormMode == FORM_MODE_NORMAL)
	{
		SetAppTilte(this, APP_RE_ID_STRING_Album);
		m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);

		char* uid = NULL;
		uid = Get_Url_Params(RR_PhotosGetAlbums, "uid");
		if( strcmp(uid, RenRenUserInfo.szuid) == 0)
		{
			m_TitleBtnLeft = SetAppBitmapButton(this, APP_RE_ID_BITMAP_take_photo, APP_RE_ID_BITMAP_take_photo);
		}
	}
	else if(m_FormMode == FORM_MODE_MYHOME)
	{
		tResponseProfile* ResponseProfile;
		nErrorCode = RenRenAPI_JsonParse(RR_ProfileGetInfo, (void **)&ResponseProfile);
		if(ResponseProfile != NULL)
		{
			if(ResponseProfile->uid == RenRenUserInfo.uid)
			{
				SetAppTilte(this, APP_RE_ID_STRING_MyNews);
				m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Home, TITLE_BUTTON_RIGHT);
				m_TitleBtnLeft = SetAppBitmapButton(this, APP_RE_ID_BITMAP_take_photo, APP_RE_ID_BITMAP_take_photo);
			}
			else
			{
				//姓名
				TUChar  pszFName[64] = {0};
				TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)ResponseProfile->name);
				SetAppTilte(this, 0, pszFName);
				m_TitleBtnRight = SetAppTitleButton(this, APP_RE_ID_STRING_Back,TITLE_BUTTON_RIGHT);
			}
			delete ResponseProfile;
			ResponseProfile = NULL;
		}		
		
	}

	//设置panel高度
	TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonPanel));	
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));	
	
	if(pTPanel)
	{
		TRectangle rect;
		
		Height_Panel = SCR_H - STATUSBAR_H - TITLEBAR_H;
		if(m_FormMode == FORM_MODE_MYHOME)
			Height_Panel -= BOTTOM_TAB_H;
			
		pTPanel->GetBounds(&rect);
		rect.SetHeight(Height_Panel);
		pTPanel->SetBounds(&rect);
	}

	if(m_FormMode == FORM_MODE_MYHOME)
		CreateProfileBottomTab(this, &BottomTabCtrID, 2);

	//显示个人信息
	if(m_FormMode == FORM_MODE_MYHOME)
	{
		Int32 Height_Top = 0;			//CoolBarList上面信息的高度
		Int32 Height_CoolBarList = 0;	//CoolBarList高度	
		tResponseProfile* ResponseProfile;
		nErrorCode = RenRenAPI_JsonParse(RR_ProfileGetInfo, (void **)&ResponseProfile);
		if(ResponseProfile != NULL)
		{
			//头像
			TBitmap* pDownLoadBitmap = NULL;
			pDownLoadBitmap = LoadImgByUrl(ResponseProfile->headurl);			
			//pProfileImage = LoadImgByUrl(ResponseProfile->headurl);
			const TBitmap * pImageDeault = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_DefaultLarge);
			const TBitmap * pBackImage = TResource::LoadConstBitmap(APP_RE_ID_BITMAP_headmask_large);
			if(pDownLoadBitmap == NULL)
			{
				//RenRenAPICommon_DownloadPhoto(ResponseProfile->headurl, this->GetWindowHwndId(), FEED_PROFILE_IMAGE_INDEX);	
				m_ProfileImageID = CtrlAddItemToPanel_MaskButton(this, pTPanel, RR_HEAD_X, RR_HEAD_Y, RR_HEAD_W, RR_HEAD_H, (TBitmap*)pImageDeault, (TBitmap*)pImageDeault, (TBitmap*)pBackImage );	
				this->DisableControl(m_ProfileImageID);
			}
			else
			{
				//需要做放大
				pProfileImage = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
				pProfileImage->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));				
				m_ProfileImageID = CtrlAddItemToPanel_MaskButton(this, pTPanel, RR_HEAD_X, RR_HEAD_Y, RR_HEAD_W, RR_HEAD_H, (TBitmap*)pProfileImage, (TBitmap*)pProfileImage, (TBitmap*)pBackImage );	
				this->DisableControl(m_ProfileImageID);
				
				//释放图片
				pDownLoadBitmap->Destroy();
				pDownLoadBitmap = NULL; 						
			}
			//下载大头像
			tResponseUsersGetInfo* ResponseUserInfoPhoto = NULL;
			RenRenAPI_JsonParse(RR_UsersGetInfoPhoto, (void **)&ResponseUserInfoPhoto);
			if(ResponseUserInfoPhoto)
			{
				if( (ResponseUserInfoPhoto->nArraySize > 0) && (ResponseUserInfoPhoto->Array[0].uid == ResponseProfile->uid) )
				{
					_UpdateProfilePhoto(pApp, ResponseUserInfoPhoto);
				}
				else
				{
					Set_Url_Params(RR_UsersGetInfoPhoto, "uids", m_uid);
					RenRenAPICommon_Download(RR_UsersGetInfoPhoto, this->GetWindowHwndId(), 0, 0); 
				}					
							
				delete ResponseUserInfoPhoto;
				ResponseUserInfoPhoto = NULL;							
			}
			else
			{
				Set_Url_Params(RR_UsersGetInfoPhoto, "uids", m_uid);
				RenRenAPICommon_Download(RR_UsersGetInfoPhoto, this->GetWindowHwndId(), 0, 0); 
			}
			
			//姓名
			TUChar  pszFName[64] = {0};
			TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)ResponseProfile->name);
			CtrlAddItemToPanel_Label(this, pTPanel, RR_NAME_X, RR_NAME_Y, 0, FONT_NORMAL, pszFName, RGB_COLOR_BLACK);
			Height_Top += (RR_NAME_Y+RR_NAME_H);
			//状态
			TUChar  pszStatus[1024] = {0};
			Coord nHeight_RichView = 0;
			if(ResponseProfile->nSize_status>0)
			{
				TUString::StrUtf8ToStrUnicode(pszStatus, (const Char *)ResponseProfile->status[0].content);
				CtrlAddItemToPanel_RichView(this, pTPanel, RR_STATUS_X, RR_STATUS_Y, RR_STATUS_W, &nHeight_RichView, FONT_MIDDLE, pszStatus, RGB_COLOR_BLACK);
			}

			//位置容错调整
			if(nHeight_RichView > (RR_HEAD_H-RR_NAME_H) )
				Height_Top += nHeight_RichView;
			else
				Height_Top += (RR_HEAD_H- RR_NAME_H);

			//调整间隔
			Height_Top += 4;
			//设置CoolBarList高度
			if(pCoolBarList)
			{
				TRectangle rect;
				Int32 nY = Height_Top;
					
				pCoolBarList->GetBounds(&rect);
				rect.SetY(nY);
				pCoolBarList->SetBounds(&rect);
			}
		
			delete ResponseProfile;
			ResponseProfile = NULL;
		}
	}

	//从对应Json中获取数据,用于更新UI
	nErrorCode = RenRenAPI_JsonParse(RR_PhotosGetAlbums, (void **)&Response);		
	if (Response )
	{
		_SetAlbumCoolBarList(pApp);
		delete Response;
		Response = NULL;
	}
	else
	{
		//显示无权限操作的情况(用户设置了阅读权限)
		if(nErrorCode == 200)
		{
			TUChar ErrorInfo[ERROR_INFO_LEN] = {0};
			if(RenRenAPI_JsonParse_bSuccess(RR_PhotosGetAlbums, ErrorInfo) != 0)	
			{
				if(TUString::StrLen(ErrorInfo) > 0)
				{

					//动态添加列表数据
					TBarRowList* pRowList = NULL;
					TBarRow* pBarRow = NULL;
					
					pRowList = pCoolBarList->Rows();
					pRowList->Clear();
					pBarRow = pRowList->AppendRow();
					//显示错误提示
					TBarListItem* lpItem = NULL;
					lpItem = pBarRow->AppendItem();
					if (lpItem)  
					{
						CtrlAddItemToCoolBarList_Lable(this, lpItem, RR_INFO_X,  RR_INFO_Y, RR_INFO_W, FONT_NORMAL, (TUChar*)ErrorInfo);
						lpItem->SetHeight(RR_INFO_H);
						lpItem->SetEnabled(FALSE);
					}
				}
			}
		}
	}

	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TPhotosGetAlbumsForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 控件点击事件处理
Boolean TPhotosGetAlbumsForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);
	
	if(m_TitleBtnRight == nCtrlID)
	{
		if(m_FormMode == FORM_MODE_NORMAL)
			this->CloseWindow();
		else			
			App_PostMessageEx(&gtidMain, MSG_BACKTO_HOME, NULL, 0, 0, 0);			
		bHandled = TRUE; 
		return bHandled;
	}
	else if(m_TitleBtnLeft == nCtrlID)
	{
		if( PopBox_UploadPhoto(pApp, this->GetWindowHwndId()) == 1)
		{
		}
		bHandled = TRUE; 		
		return bHandled;
	}
	//获取用户信息及新鲜事
	else if(BottomTabCtrID.nCtrID[0] == nCtrlID)
	{
		Set_Url_Params(RR_ProfileGetInfo, "uid", m_uid);
		RenRenAPICommon_Download(RR_ProfileGetInfo, this->GetWindowHwndId(), 0, 0); 				
		bHandled = TRUE;		
		return bHandled;
	}
	//相册
	else if(BottomTabCtrID.nCtrID[1] == nCtrlID)
	{
		//Set_Url_Params(RR_PhotosGetAlbums, "uid", m_uid);
		//RenRenAPICommon_Download(RR_PhotosGetAlbums, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME); 				
		bHandled = TRUE;		
		return bHandled;
	}
	//日记
	else if(BottomTabCtrID.nCtrID[2] == nCtrlID)
	{
		Set_Url_Params(RR_BlogGets, "uid", m_uid);
		RenRenAPICommon_Download(RR_BlogGets, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME);			
		bHandled = TRUE;
		return bHandled;
	}
	//留言本
	else if(BottomTabCtrID.nCtrID[3] == nCtrlID)
	{
		Set_Url_Params(RR_GuestbookGet, "uid", m_uid);
		RenRenAPICommon_Download(RR_GuestbookGet, this->GetWindowHwndId(), 0, FORM_MODE_MYHOME); 			
		bHandled = TRUE;		
		return bHandled;
	}
	//资料
	else if(BottomTabCtrID.nCtrID[4] == nCtrlID)
	{
		if(bIsPage == TRUE)
			{
			Set_Url_Params(RR_PagesGetInfo, "page_id", m_uid);
			RenRenAPICommon_Download(RR_PagesGetInfo, this->GetWindowHwndId(), 0, 0); 				
			}
		else
			{
			Set_Url_Params(RR_UsersGetInfo, "uids", m_uid);
			RenRenAPICommon_Download(RR_UsersGetInfo, this->GetWindowHwndId(), 0, 0); 				
			}
		bHandled = TRUE;		
		return bHandled;
	}
		
	//点击界面，进入下一个界面
	switch(nCtrlID)
	{
		case APP_RE_ID_CommonListForm_CommonCoolBarList:
			{
			
				TBarListItem *lpItem;
				Int32        nIndex;
				char 	szuids[64] = "";
				char    szaids[64] = "";
			
				lpItem = (TBarListItem *)(pEvent->lParam3);
				//nIndex = lpItem->GetIndex();
				nIndex = lpItem->GetTagValue();

				sprintf(szuids, "%d", gItemData[nIndex].uid);
				sprintf(szaids, "%d", gItemData[nIndex].aid);
				Set_Url_Params(RR_PhotosGet, "uid", szuids);
				Set_Url_Params(RR_PhotosGet, "aid", szaids);
				Set_Url_Params(RR_PhotosGet, "pids", "");
				Set_Url_Params(RR_PhotosGet, "password", "");
								
				if( (gItemData[nIndex].uid != RenRenUserInfo.uid) && (gItemData[nIndex].visable == 4) )
				{
					PostNotifyMsgDataType in_msgData = {0};
					MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

					in_msgData.nHwndId = this->GetWindowHwndId();
					in_msgData.nCtrlId = 0;
					in_msgData.nParam = EDIT_PARAM_PASSWORD;
					in_msgData.nAppTitleStrID = APP_RE_ID_STRING_PleaseInputPWD; 
					in_msgData.nPublicBtnCaptionStrID = APP_RE_ID_STRING_OK;
					
					in_msgData.nTitleEditMaxChars = RENREN_LENGTH_PASSWORD;
					in_msgData.nContentEditMaxChars = RENREN_LENGTH_PASSWORD;
					
					in_msgData.IsExpressionBtn = FALSE;
					in_msgData.IsPhotoBtn = FALSE;
					in_msgData.IsLocationBtn = FALSE;
					in_msgData.IsPrivacyCtl = TRUE;
					in_msgData.IsTitleEdit = FALSE;
					in_msgData.IsPopEdit = TRUE;
					in_msgData.IsPwdInput = TRUE;
							
					TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);									
				}
				else
				{
					RenRenAPICommon_Download(RR_PhotosGet, this->GetWindowHwndId(), 0, 0); 	
				}
				bHandled = TRUE;
				break;
			}
		default:
			break;
	}

	switch(nCtrlID)
	{
	case APP_RE_ID_TestForm_Test01:
		{
			bHandled = TRUE; 	
		}
		break;
	default:
		break;
	}

	return bHandled;
}

//控件获取焦点
Boolean TPhotosGetAlbumsForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;	
}

//控件丢失焦点
Boolean TPhotosGetAlbumsForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandled;
}

// 文本框输入处理事件
Boolean TPhotosGetAlbumsForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	Int32 CtrlID = pEvent->sParam1; 

	//:TODO:

	return bHandle;
}

/**
 * 设置专辑列表显示
 *
 * \param pApp
 *
 * \return 
 */
Int32 TPhotosGetAlbumsForm::_SetAlbumCoolBarList(TApplication* pApp)
{
	//获取CoolBarList 控件指针 
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_RE_ID_CommonListForm_CommonCoolBarList));

	if (Response)
	{
		//动态添加控件处理 
		if (pCoolBarList)
		{
			//大行类，它管理 N个TBarRow对象
			TBarRowList* pRowList = NULL;
			//小行类，管理N个TBarListItem 对象
			TBarRow* pBarRow = NULL;
			//TCoolBarList中的项,为行所包含,一行可以包含多个项
			TBarListItem* pListItem = NULL;

			//背景设置为白色底色
			pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);

			//获取行列表指针，通过行列表指针插入一行
			pRowList = pCoolBarList->Rows();
			if (pRowList)
			{
				//开始更新数据
				pRowList->BeginUpdate();
				//清除所有行
				pRowList->Clear();
				//在行列表尾追加一行
				pBarRow = pRowList->AppendRow();

				//数量统计
				{
					TBarListItem* lpItem = NULL;
					TUChar pszTitle[64] = {0};
					TUString::StrPrintF(pszTitle, TResource::LoadConstString(APP_RE_ID_STRING_AlbumCount), Response->nArraySize);
					lpItem = pBarRow->AppendItem();
					lpItem->SetCaption(pszTitle);
					lpItem->SetEnabled(FALSE);
				}

				for(int i=0; i<Response->nArraySize; i++)
				{
					TUChar pnString[128] = {0};//相册名称
					TUChar pctString[64] = {0};//相册创建时间
					TUChar psString[64] = {0}; //相册大小


					//添加列表项
					pListItem = pBarRow->AppendItem();
					if (pListItem)
					{
						//设定item属性
						pListItem->SetHeight(COOLBAR_ITEM_HEIGHT);
						pListItem->SetTitle(NULL);
						pListItem->SetCaption(NULL);       
						pListItem->SetIndicatorType(itDefault);

						//磁盘cache无文件,再下载
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByUrl(Response->Array[i].url);
					
						// 1、获取相册封面,图片头像,需要做缩放
						if(  pDownLoadBitmap != NULL)
						{
							gItemData[i].pBmp= pDownLoadBitmap->Create(IMAGE_W, IMAGE_H, 32);
							gItemData[i].pBmp->QuickSpecialZoom(pDownLoadBitmap, 0, 0);
							gItemData[i].nImageID = CtrlAddItemToCoolBarList_Image(this, pListItem, IMAGE_X, IMAGE_Y, IMAGE_W, IMAGE_H, gItemData[i].pBmp);
							//pListItem->SetIcon( gItemData[i].pBmpZoom );
							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 							
						}
						else
						{
							//因为第一项为数据统计, 所以参数需要+1
							RenRenAPICommon_DownloadPhoto(Response->Array[i].url, this->GetWindowHwndId(), i );
							gItemData[i].nImageID = CtrlAddItemToCoolBarList_Image(this, pListItem, IMAGE_X, IMAGE_Y, IMAGE_W, IMAGE_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default));
							//pListItem->SetIcon(TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_Default));
						}
						
						// 2、获取相册名称
						TUString::StrUtf8ToStrUnicode(pnString , (const Char *)Response->Array[i].name);
						//是否加密
						if(Response->Array[i].visable == 4)
						{
							CtrlAddItemToCoolBarList_Image(this, pListItem, NAME_X, NAME_Y + (NAME_H - LOCK_H)/2, LOCK_W, LOCK_H, (TBitmap*)TBitmap::LoadResBitmap(APP_RE_ID_BITMAP_locked));
							CtrlAddItemToCoolBarList_Lable(this, pListItem, NAME_X+LOCK_W, NAME_Y, NAME_W-LOCK_W, NAME_FONT, pnString, RGB_COLOR_BLACK);
						}
						else
						{
							CtrlAddItemToCoolBarList_Lable(this, pListItem, NAME_X, NAME_Y, NAME_W, NAME_FONT, pnString, RGB_COLOR_BLACK);
						}
						// 3、获取相册大小
						//按照格式串填写目的串
						TUString::StrPrintF(psString, TResource::LoadConstString(APP_RE_ID_STRING_PhotosCountFormat), Response->Array[i].size);
						CtrlAddItemToCoolBarList_Lable(this, pListItem, SIZE_X, SIZE_Y, 0, SIZE_FONT, psString, RGB_COLOR_BLACK);						

						// 4、获取创建相册日期
						TUString::StrUtf8ToStrUnicode(pctString , (const Char *)Response->Array[i].create_time);
						CtrlAddItemToCoolBarList_Lable(this, pListItem, DATE_X, DATE_Y, 0, DATE_FONT, pctString, RGB_COLOR_GRAY);

						pListItem->SetTagValue(i);
					}
					gItemData[i].uid = Response->Array[i].uid;
					gItemData[i].aid = Response->Array[i].aid;
					gItemData[i].visable = Response->Array[i].visable;
					
				}
				pRowList->EndUpdate();
			}

		}
	}
	return TRUE;
}

/**
 * 从profile中读取大头像, 如果本地没有则进行下载
 *
 * \param pApp
 * \param ResponseInfoPhoto
 *
 * \return 
 */
Boolean TPhotosGetAlbumsForm::_UpdateProfilePhoto(TApplication* pApp, tResponseUsersGetInfo* ResponseInfoPhoto)
{

	if(ResponseInfoPhoto == NULL)
		return FALSE;
	
	if(ResponseInfoPhoto->nArraySize > 0)
	{
		TBitmap* pDownLoadBitmap = NULL;
		pDownLoadBitmap = LoadImgByUrl(ResponseInfoPhoto->Array[0].headurl);						
		if(pDownLoadBitmap == NULL)
		{
			RenRenAPICommon_DownloadPhoto(ResponseInfoPhoto->Array[0].headurl, this->GetWindowHwndId(), FEED_PROFILE_IMAGE_INDEX);	
		}
		else
		{
			TMaskButton* pLogo = NULL;
			pLogo = static_cast<TMaskButton*>(GetControlPtr(m_ProfileImageID));
			if(pLogo)
			{
				TRectangle rc;
				TBitmap * pProfileImageTmp = NULL;	//Profile的头像

				pLogo->GetBounds(&rc);
				
				pProfileImageTmp = TBitmap::Create(RR_HEAD_W, RR_HEAD_W, pDownLoadBitmap->GetDepth());
				pProfileImageTmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
				pLogo->SetCaption(TUSTR_Re_NULL,0,0);
				pLogo->SetImage(pProfileImageTmp, (rc.Width()-pProfileImageTmp->GetWidth())/2, (rc.Height()-pProfileImageTmp->GetHeight())/2);
				pLogo->Draw();

				//如果先Desroy,则会崩溃,很奇怪,原因不明,暂时这么处理
				if( pProfileImage != NULL)
				{
					pProfileImage->Destroy();
					pProfileImage = NULL; 							
				}
				pProfileImage = pProfileImageTmp;
				
			}

			//释放图片
			pDownLoadBitmap->Destroy();
			pDownLoadBitmap = NULL; 	
		}
	}

	return TRUE;
}
