/*!
*@FileName: RenRenAPI_FeedGet.cpp
*@Author: zengying@GoZone
*@Date: 2010-12-28
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by ReeRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"

/**
 * JsonÎÄ¼þ½âÎö
 *
 * \param text
 *
 * \return 
 */
void* RenRenAPI_JsonParse_FeedGet(char *text)
{
	int i = 0;
	cJSON *jsonall;
	cJSON *json;
	cJSON *pTemp0;
	tResponseFeedGet*  Response = new tResponseFeedGet;
	memset(Response, 0 , sizeof(tResponseFeedGet));

	jsonall = cJSON_Parse(text);

	Response->nArraySize = cJSON_GetArraySize(jsonall);
	if(Response->nArraySize>0)
	{
		Response->Array = (tResponseFeedGetItem*) malloc(sizeof( tResponseFeedGetItem) * Response->nArraySize );
		memset(Response->Array, 0, sizeof( tResponseFeedGetItem) * Response->nArraySize);
		for(i = 0; i<Response->nArraySize; i++)
		{
			json = cJSON_GetArrayItem(jsonall, i);

			pTemp0 = cJSON_GetObjectItem(json, "post_id");
			if(pTemp0)
			{
				Response->Array[i].post_id = pTemp0->valuedouble;
			}
			pTemp0 = cJSON_GetObjectItem(json, "source_id");
			if(pTemp0)
			{
				Response->Array[i].source_id = pTemp0->valuedouble;
			}
			pTemp0 = cJSON_GetObjectItem(json, "feed_type");
			if(pTemp0)
			{
				Response->Array[i].feed_type = pTemp0->valueint;
			}
			pTemp0 = cJSON_GetObjectItem(json, "update_time");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].update_time, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "actor_id");
			if(pTemp0)
			{
				Response->Array[i].actor_id = pTemp0->valueint;
			}
			pTemp0 = cJSON_GetObjectItem(json, "name");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].name, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "actor_type");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].actor_type, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "headurl");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].headurl, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "prefix");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].prefix, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "message");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].message, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "title");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].title, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "href");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].href, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "description");
			if(pTemp0)
			{
				STRCPY_Ex(Response->Array[i].description, pTemp0->valuestring);
			}
			pTemp0 = cJSON_GetObjectItem(json, "attachment");
			if(pTemp0)
			{
				int nSize1 = 0, j = 0;
				nSize1 = cJSON_GetArraySize(pTemp0);
				Response->Array[i].nSize_attachment = nSize1;
				if( nSize1 != 0 )
				{
					Response->Array[i].attachment = NULL;
					Response->Array[i].attachment = (FeedGet_attachment*) malloc(sizeof( FeedGet_attachment ) * nSize1 );
					memset(Response->Array[i].attachment, 0 , sizeof(FeedGet_attachment) * nSize1 );
				}
				for ( j = 0; j < nSize1; j++ )
				{
					cJSON *Item1 = NULL, *pTemp1 = NULL;
					Item1 = cJSON_GetArrayItem(pTemp0,j);
					pTemp1 = cJSON_GetObjectItem(Item1, "href");
					if(pTemp1)
					{
						STRCPY_Ex(Response->Array[i].attachment[j].href, pTemp1->valuestring);
					}
					pTemp1 = cJSON_GetObjectItem(Item1, "media_type");
					if(pTemp1)
					{
						STRCPY_Ex(Response->Array[i].attachment[j].media_type, pTemp1->valuestring);
					}
					pTemp1 = cJSON_GetObjectItem(Item1, "src");
					if(pTemp1)
					{
						STRCPY_Ex(Response->Array[i].attachment[j].src, pTemp1->valuestring);
					}
					pTemp1 = cJSON_GetObjectItem(Item1, "owner_id");
					if(pTemp1)
					{
						Response->Array[i].attachment[j].owner_id = pTemp1->valueint;
					}
					pTemp1 = cJSON_GetObjectItem(Item1, "media_id");
					if(pTemp1)
					{
						Response->Array[i].attachment[j].media_id = pTemp1->valuedouble;
					}

				}
			}			pTemp0 = cJSON_GetObjectItem(json, "comments");
			if(pTemp0)
			{
				int nSize1 = 0, j = 0;
				nSize1 = cJSON_GetArraySize(pTemp0);
				Response->Array[i].nSize_comments = nSize1;
				if( nSize1 != 0 )
				{
					Response->Array[i].comments = NULL;
					Response->Array[i].comments = (FeedGet_comments*) malloc(sizeof( FeedGet_comments ) * nSize1 );
					memset(Response->Array[i].comments, 0 , sizeof(FeedGet_comments) * nSize1 );
				}
				for ( j = 0; j < nSize1; j++ )
				{
					cJSON *Item1 = NULL, *pTemp1 = NULL;
					Item1 = cJSON_GetArrayItem(pTemp0,j);
					pTemp1 = cJSON_GetObjectItem(Item1, "count");
					if(pTemp1)
					{
						Response->Array[i].comments[j].count = pTemp1->valueint;
					}
					pTemp1 = cJSON_GetObjectItem(Item1, "comment");
					if(pTemp1)
					{
						int nSize2 = 0, k = 0;
						nSize2 = cJSON_GetArraySize(pTemp1);
						Response->Array[i].comments[j].nSize_comment = nSize2;
						if( nSize2 != 0 )
						{
							Response->Array[i].comments[j].comment = NULL;
							Response->Array[i].comments[j].comment = (FeedGet_comment*) malloc(sizeof( FeedGet_comment ) * nSize2 );
							memset(Response->Array[i].comments[j].comment, 0 , sizeof(FeedGet_comment) * nSize2 );
						}
						for ( k = 0; k < nSize2; k++ )
						{
							cJSON *Item2 = NULL, *pTemp2 = NULL;
							Item2 = cJSON_GetArrayItem(pTemp1,k);
							pTemp2 = cJSON_GetObjectItem(Item2, "uid");
							if(pTemp2)
							{
								Response->Array[i].comments[j].comment[k].uid = pTemp2->valueint;
							}
							pTemp2 = cJSON_GetObjectItem(Item2, "name");
							if(pTemp2)
							{
								STRCPY_Ex(Response->Array[i].comments[j].comment[k].name, pTemp2->valuestring);
							}
							pTemp2 = cJSON_GetObjectItem(Item2, "headurl");
							if(pTemp2)
							{
								STRCPY_Ex(Response->Array[i].comments[j].comment[k].headurl, pTemp2->valuestring);
							}
							pTemp2 = cJSON_GetObjectItem(Item2, "time");
							if(pTemp2)
							{
								STRCPY_Ex(Response->Array[i].comments[j].comment[k].time, pTemp2->valuestring);
							}
							pTemp2 = cJSON_GetObjectItem(Item2, "comment_id");
							if(pTemp2)
							{
								Response->Array[i].comments[j].comment[k].comment_id = pTemp2->valueint;
							}
							pTemp2 = cJSON_GetObjectItem(Item2, "text");
							if(pTemp2)
							{
								STRCPY_Ex(Response->Array[i].comments[j].comment[k].text, pTemp2->valuestring);
							}

						}
					}
				}
			}			pTemp0 = cJSON_GetObjectItem(json, "likes");
			if(pTemp0)
			{
				int nSize1 = 0, j = 0;
				nSize1 = cJSON_GetArraySize(pTemp0);
				Response->Array[i].nSize_likes = nSize1;
				if( nSize1 != 0 )
				{
					Response->Array[i].likes = NULL;
					Response->Array[i].likes = (FeedGet_likes*) malloc(sizeof( FeedGet_likes ) * nSize1 );
					memset(Response->Array[i].likes, 0 , sizeof(FeedGet_likes) * nSize1 );
				}
				for ( j = 0; j < nSize1; j++ )
				{
					cJSON *Item1 = NULL, *pTemp1 = NULL;
					Item1 = cJSON_GetArrayItem(pTemp0,j);
					pTemp1 = cJSON_GetObjectItem(Item1, "total_count");
					if(pTemp1)
					{
						Response->Array[i].likes[j].total_count = pTemp1->valueint;
					}
					pTemp1 = cJSON_GetObjectItem(Item1, "friend_count");
					if(pTemp1)
					{
						Response->Array[i].likes[j].friend_count = pTemp1->valueint;
					}
					pTemp1 = cJSON_GetObjectItem(Item1, "user_like");
					if(pTemp1)
					{
						Response->Array[i].likes[j].user_like = pTemp1->valueint;
					}

				}
			}


		}
	}
	cJSON_Delete(jsonall);
	return Response;
}
