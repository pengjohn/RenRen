/*!
*@FileName: RenRenAPI_PagesGetInfo.cpp
*@Author: pengzhixiong@GoZone
*@Date: 2010-12-28
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by ReeRen_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "RenRenAPICommon.h"

/**
 * JsonÎÄ¼þ½âÎö
 *
 * \param text
 *
 * \return 
 */
void* RenRenAPI_JsonParse_PagesGetInfo(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponsePagesGetInfo*  Response = new tResponsePagesGetInfo;
	memset(Response, 0 , sizeof(tResponsePagesGetInfo));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json, "page_id");
	if(pTemp0)
	{
		Response->page_id = pTemp0->valueint;
	}
	pTemp0 = cJSON_GetObjectItem(json, "name");
	if(pTemp0)
	{
		STRCPY_Ex(Response->name, pTemp0->valuestring);
	}
	pTemp0 = cJSON_GetObjectItem(json, "headurl");
	if(pTemp0)
	{
		STRCPY_Ex(Response->headurl, pTemp0->valuestring);
	}
	pTemp0 = cJSON_GetObjectItem(json, "mainurl");
	if(pTemp0)
	{
		STRCPY_Ex(Response->mainurl, pTemp0->valuestring);
	}
	pTemp0 = cJSON_GetObjectItem(json, "status");
	if(pTemp0)
	{
		int nSize1 = 0, i = 0;
		nSize1 = cJSON_GetArraySize(pTemp0);
		Response->nSize_status = nSize1;
		if( nSize1 != 0 )
		{
			Response->status = NULL;
			Response->status = (PagesGetInfo_status*) malloc(sizeof( PagesGetInfo_status ) * nSize1 );
			memset(Response->status, 0 , sizeof(PagesGetInfo_status) * nSize1 );
		}
		for ( i = 0; i < nSize1; i++ )
		{
			cJSON *Item1 = NULL, *pTemp1 = NULL;
			Item1 = cJSON_GetArrayItem(pTemp0,i);
			pTemp1 = cJSON_GetObjectItem(Item1, "status_id");
			if(pTemp1)
			{
				Response->status[i].status_id = pTemp1->valueint;
			}
			pTemp1 = cJSON_GetObjectItem(Item1, "content");
			if(pTemp1)
			{
				STRCPY_Ex(Response->status[i].content, pTemp1->valuestring);
			}
			pTemp1 = cJSON_GetObjectItem(Item1, "time");
			if(pTemp1)
			{
				STRCPY_Ex(Response->status[i].time, pTemp1->valuestring);
			}

		}
	}	pTemp0 = cJSON_GetObjectItem(json, "desc");
	if(pTemp0)
	{
		STRCPY_Ex(Response->desc, pTemp0->valuestring);
	}
	pTemp0 = cJSON_GetObjectItem(json, "base_info");
	if(pTemp0)
	{
		int nSize1 = 0, i = 0;
		nSize1 = cJSON_GetArraySize(pTemp0);
		Response->nSize_base_info = nSize1;
		if( nSize1 != 0 )
		{
			Response->base_info = NULL;
			Response->base_info = (PagesGetInfo_base_info*) malloc(sizeof( PagesGetInfo_base_info ) * nSize1 );
			memset(Response->base_info, 0 , sizeof(PagesGetInfo_base_info) * nSize1 );
		}
		for ( i = 0; i < nSize1; i++ )
		{
			cJSON *Item1 = NULL, *pTemp1 = NULL;
			Item1 = cJSON_GetArrayItem(pTemp0,i);
			pTemp1 = cJSON_GetObjectItem(Item1, "info");
			if(pTemp1)
			{
				STRCPY_Ex(Response->base_info[i].info, pTemp1->valuestring);
			}
			pTemp1 = cJSON_GetObjectItem(Item1, "key");
			if(pTemp1)
			{
				//Response->base_info[i].key = pTemp1->valueint;
				STRCPY_Ex(Response->base_info[i].key, pTemp1->valuestring);
			}
			pTemp1 = cJSON_GetObjectItem(Item1, "value");
			if(pTemp1)
			{
				STRCPY_Ex(Response->base_info[i].value, pTemp1->valuestring);
			}

		}
	}	pTemp0 = cJSON_GetObjectItem(json, "detail_info");
	if(pTemp0)
	{
		int nSize1 = 0, i = 0;
		nSize1 = cJSON_GetArraySize(pTemp0);
		Response->nSize_detail_info = nSize1;
		if( nSize1 != 0 )
		{
			Response->detail_info = NULL;
			Response->detail_info = (PagesGetInfo_detail_info*) malloc(sizeof( PagesGetInfo_detail_info ) * nSize1 );
			memset(Response->detail_info, 0 , sizeof(PagesGetInfo_detail_info) * nSize1 );
		}
		for ( i = 0; i < nSize1; i++ )
		{
			cJSON *Item1 = NULL, *pTemp1 = NULL;
			Item1 = cJSON_GetArrayItem(pTemp0,i);
			pTemp1 = cJSON_GetObjectItem(Item1, "info");
			if(pTemp1)
			{
				STRCPY_Ex(Response->detail_info[i].info, pTemp1->valuestring);
			}
			pTemp1 = cJSON_GetObjectItem(Item1, "key");
			if(pTemp1)
			{
				//Response->detail_info[i].key = pTemp1->valueint;
				STRCPY_Ex(Response->detail_info[i].key, pTemp1->valuestring);
			}
			pTemp1 = cJSON_GetObjectItem(Item1, "value");
			if(pTemp1)
			{
				//Response->detail_info[i].value = pTemp1->valueint;
				STRCPY_Ex(Response->detail_info[i].value, pTemp1->valuestring);
			}

		}
	}	pTemp0 = cJSON_GetObjectItem(json, "contact_info");
	if(pTemp0)
	{
		int nSize1 = 0, i = 0;
		nSize1 = cJSON_GetArraySize(pTemp0);
		Response->nSize_contact_info = nSize1;
		if( nSize1 != 0 )
		{
			Response->contact_info = NULL;
			Response->contact_info = (PagesGetInfo_contact_info*) malloc(sizeof( PagesGetInfo_contact_info ) * nSize1 );
			memset(Response->contact_info, 0 , sizeof(PagesGetInfo_contact_info) * nSize1 );
		}
		for ( i = 0; i < nSize1; i++ )
		{
			cJSON *Item1 = NULL, *pTemp1 = NULL;
			Item1 = cJSON_GetArrayItem(pTemp0,i);
			pTemp1 = cJSON_GetObjectItem(Item1, "info");
			if(pTemp1)
			{
				STRCPY_Ex(Response->contact_info[i].info, pTemp1->valuestring);
			}
			pTemp1 = cJSON_GetObjectItem(Item1, "key");
			if(pTemp1)
			{
				//Response->contact_info[i].key = pTemp1->valueint;
				STRCPY_Ex(Response->contact_info[i].key, pTemp1->valuestring);
			}
			pTemp1 = cJSON_GetObjectItem(Item1, "value");
			if(pTemp1)
			{
				STRCPY_Ex(Response->contact_info[i].value, pTemp1->valuestring);
			}

		}
	}	pTemp0 = cJSON_GetObjectItem(json, "albums_count");
	if(pTemp0)
	{
		Response->albums_count = pTemp0->valueint;
	}
	pTemp0 = cJSON_GetObjectItem(json, "blogs_count");
	if(pTemp0)
	{
		Response->blogs_count = pTemp0->valueint;
	}
	pTemp0 = cJSON_GetObjectItem(json, "fans_count");
	if(pTemp0)
	{
		Response->fans_count = pTemp0->valueint;
	}



	cJSON_Delete(json);
	return Response;
}